
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000230  00800060  00003d2e  00003dc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800290  00800290  00003ff2  2**0
                  ALLOC
  3 .stab         00003300  00000000  00000000  00003ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d96  00000000  00000000  000072f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000808a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000081ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000833a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ae6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bc1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bd7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c009  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c7d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 12 	call	0x24ae	; 0x24ae <main>
      8a:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 19 1e 	jmp	0x3c32	; 0x3c32 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e8       	ldi	r26, 0x84	; 132
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 35 1e 	jmp	0x3c6a	; 0x3c6a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 19 1e 	jmp	0x3c32	; 0x3c32 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e8       	ldi	r24, 0x84	; 132
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 35 1e 	jmp	0x3c6a	; 0x3c6a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_Init>:
/*---------------------------------------------------------------------------------*
 *                                FUNCTION DEFINITIONS                             *
 *---------------------------------------------------------------------------------*/

void UART_Init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*-------------------------------------UCSRA-------------------------------------*/
	/* Enable double speed */
	SET_BIT(UCSRA,U2X);
     b4e:	ab e2       	ldi	r26, 0x2B	; 43
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	eb e2       	ldi	r30, 0x2B	; 43
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	82 60       	ori	r24, 0x02	; 2
     b5a:	8c 93       	st	X, r24

	/*-------------------------------------UCSRB-------------------------------------*/
	/* Enable reciving and transmitting */
	SET_BIT(UCSRB,RXEN);
     b5c:	aa e2       	ldi	r26, 0x2A	; 42
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ea e2       	ldi	r30, 0x2A	; 42
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 61       	ori	r24, 0x10	; 16
     b68:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
     b6a:	aa e2       	ldi	r26, 0x2A	; 42
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ea e2       	ldi	r30, 0x2A	; 42
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 60       	ori	r24, 0x08	; 8
     b76:	8c 93       	st	X, r24

	/*-------------------------------------UCSRC-------------------------------------*/
	/* Enable writing to UCSRC register */
	SET_BIT(UCSRC,URSEL);
     b78:	a0 e4       	ldi	r26, 0x40	; 64
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e0 e4       	ldi	r30, 0x40	; 64
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 68       	ori	r24, 0x80	; 128
     b84:	8c 93       	st	X, r24
	 *					  0           1            1             8-bit
	 *					  1           1            1             9-bit
	 *
	 *----------------------------------------------------------------------------*/
	/* 8-bit */
	SET_BIT(UCSRC,UCSZ0);
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e0 e4       	ldi	r30, 0x40	; 64
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1);
     b94:	a0 e4       	ldi	r26, 0x40	; 64
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24

	/* Baudrate prescaler */
	UBRRH = (BAUDRATE_PRESCALER>>8);
     ba2:	e0 e4       	ldi	r30, 0x40	; 64
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	10 82       	st	Z, r1
    UBRRL = BAUDRATE_PRESCALER;
     ba8:	e9 e2       	ldi	r30, 0x29	; 41
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	8c e0       	ldi	r24, 0x0C	; 12
     bae:	80 83       	st	Z, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <Send_Byte>:
void Send_Byte(const uint8 data)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01
	/* wait until transmitter buffer register is empty */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     bc2:	eb e2       	ldi	r30, 0x2B	; 43
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	80 72       	andi	r24, 0x20	; 32
     bce:	90 70       	andi	r25, 0x00	; 0
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	b9 f3       	breq	.-18     	; 0xbc2 <Send_Byte+0xc>
	/* Send data */
	UDR=data;
     bd4:	ec e2       	ldi	r30, 0x2C	; 44
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	80 83       	st	Z, r24

}
     bdc:	0f 90       	pop	r0
     bde:	cf 91       	pop	r28
     be0:	df 91       	pop	r29
     be2:	08 95       	ret

00000be4 <Resieve_Byte>:
uint8 Resieve_Byte()
{
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     bec:	eb e2       	ldi	r30, 0x2B	; 43
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	88 23       	and	r24, r24
     bf4:	dc f7       	brge	.-10     	; 0xbec <Resieve_Byte+0x8>
    return UDR;
     bf6:	ec e2       	ldi	r30, 0x2C	; 44
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
}
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	08 95       	ret

00000c02 <Send_String>:
void Send_String(const uint8* str)
{
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	6f 97       	sbiw	r28, 0x1f	; 31
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	9f 8f       	std	Y+31, r25	; 0x1f
     c18:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i = 0;
     c1a:	1d 8e       	std	Y+29, r1	; 0x1d
     c1c:	80 c0       	rjmp	.+256    	; 0xd1e <Send_String+0x11c>
	while(str[i] != '\0')
	{
		Send_Byte(str[i]);
     c1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c26:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c28:	fc 01       	movw	r30, r24
     c2a:	e2 0f       	add	r30, r18
     c2c:	f3 1f       	adc	r31, r19
     c2e:	80 81       	ld	r24, Z
     c30:	0e 94 db 05 	call	0xbb6	; 0xbb6 <Send_Byte>
		i++;
     c34:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c36:	8f 5f       	subi	r24, 0xFF	; 255
     c38:	8d 8f       	std	Y+29, r24	; 0x1d
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	a8 e4       	ldi	r26, 0x48	; 72
     c40:	b2 e4       	ldi	r27, 0x42	; 66
     c42:	89 8f       	std	Y+25, r24	; 0x19
     c44:	9a 8f       	std	Y+26, r25	; 0x1a
     c46:	ab 8f       	std	Y+27, r26	; 0x1b
     c48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4a:	69 8d       	ldd	r22, Y+25	; 0x19
     c4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c50:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	4a e7       	ldi	r20, 0x7A	; 122
     c58:	53 e4       	ldi	r21, 0x43	; 67
     c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	8d 8b       	std	Y+21, r24	; 0x15
     c64:	9e 8b       	std	Y+22, r25	; 0x16
     c66:	af 8b       	std	Y+23, r26	; 0x17
     c68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c6a:	6d 89       	ldd	r22, Y+21	; 0x15
     c6c:	7e 89       	ldd	r23, Y+22	; 0x16
     c6e:	8f 89       	ldd	r24, Y+23	; 0x17
     c70:	98 8d       	ldd	r25, Y+24	; 0x18
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e8       	ldi	r20, 0x80	; 128
     c78:	5f e3       	ldi	r21, 0x3F	; 63
     c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c7e:	88 23       	and	r24, r24
     c80:	2c f4       	brge	.+10     	; 0xc8c <Send_String+0x8a>
		__ticks = 1;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	9c 8b       	std	Y+20, r25	; 0x14
     c88:	8b 8b       	std	Y+19, r24	; 0x13
     c8a:	3f c0       	rjmp	.+126    	; 0xd0a <Send_String+0x108>
	else if (__tmp > 65535)
     c8c:	6d 89       	ldd	r22, Y+21	; 0x15
     c8e:	7e 89       	ldd	r23, Y+22	; 0x16
     c90:	8f 89       	ldd	r24, Y+23	; 0x17
     c92:	98 8d       	ldd	r25, Y+24	; 0x18
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	3f ef       	ldi	r19, 0xFF	; 255
     c98:	4f e7       	ldi	r20, 0x7F	; 127
     c9a:	57 e4       	ldi	r21, 0x47	; 71
     c9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ca0:	18 16       	cp	r1, r24
     ca2:	4c f5       	brge	.+82     	; 0xcf6 <Send_String+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca4:	69 8d       	ldd	r22, Y+25	; 0x19
     ca6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	40 e2       	ldi	r20, 0x20	; 32
     cb2:	51 e4       	ldi	r21, 0x41	; 65
     cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	bc 01       	movw	r22, r24
     cbe:	cd 01       	movw	r24, r26
     cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc4:	dc 01       	movw	r26, r24
     cc6:	cb 01       	movw	r24, r22
     cc8:	9c 8b       	std	Y+20, r25	; 0x14
     cca:	8b 8b       	std	Y+19, r24	; 0x13
     ccc:	0f c0       	rjmp	.+30     	; 0xcec <Send_String+0xea>
     cce:	89 e1       	ldi	r24, 0x19	; 25
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	9a 8b       	std	Y+18, r25	; 0x12
     cd4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cd6:	89 89       	ldd	r24, Y+17	; 0x11
     cd8:	9a 89       	ldd	r25, Y+18	; 0x12
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <Send_String+0xd8>
     cde:	9a 8b       	std	Y+18, r25	; 0x12
     ce0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce2:	8b 89       	ldd	r24, Y+19	; 0x13
     ce4:	9c 89       	ldd	r25, Y+20	; 0x14
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	9c 8b       	std	Y+20, r25	; 0x14
     cea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cec:	8b 89       	ldd	r24, Y+19	; 0x13
     cee:	9c 89       	ldd	r25, Y+20	; 0x14
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	69 f7       	brne	.-38     	; 0xcce <Send_String+0xcc>
     cf4:	14 c0       	rjmp	.+40     	; 0xd1e <Send_String+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cf6:	6d 89       	ldd	r22, Y+21	; 0x15
     cf8:	7e 89       	ldd	r23, Y+22	; 0x16
     cfa:	8f 89       	ldd	r24, Y+23	; 0x17
     cfc:	98 8d       	ldd	r25, Y+24	; 0x18
     cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	9c 8b       	std	Y+20, r25	; 0x14
     d08:	8b 8b       	std	Y+19, r24	; 0x13
     d0a:	8b 89       	ldd	r24, Y+19	; 0x13
     d0c:	9c 89       	ldd	r25, Y+20	; 0x14
     d0e:	98 8b       	std	Y+16, r25	; 0x10
     d10:	8f 87       	std	Y+15, r24	; 0x0f
     d12:	8f 85       	ldd	r24, Y+15	; 0x0f
     d14:	98 89       	ldd	r25, Y+16	; 0x10
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	f1 f7       	brne	.-4      	; 0xd16 <Send_String+0x114>
     d1a:	98 8b       	std	Y+16, r25	; 0x10
     d1c:	8f 87       	std	Y+15, r24	; 0x0f
    return UDR;
}
void Send_String(const uint8* str)
{
	uint8 i = 0;
	while(str[i] != '\0')
     d1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d26:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d28:	fc 01       	movw	r30, r24
     d2a:	e2 0f       	add	r30, r18
     d2c:	f3 1f       	adc	r31, r19
     d2e:	80 81       	ld	r24, Z
     d30:	88 23       	and	r24, r24
     d32:	09 f0       	breq	.+2      	; 0xd36 <Send_String+0x134>
     d34:	74 cf       	rjmp	.-280    	; 0xc1e <Send_String+0x1c>
	{
		Send_Byte(str[i]);
		i++;
		_delay_ms(50);
	}
	Send_Byte(END_STRING_SYMBOL);
     d36:	83 e2       	ldi	r24, 0x23	; 35
     d38:	0e 94 db 05 	call	0xbb6	; 0xbb6 <Send_Byte>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	a8 e4       	ldi	r26, 0x48	; 72
     d42:	b2 e4       	ldi	r27, 0x42	; 66
     d44:	8b 87       	std	Y+11, r24	; 0x0b
     d46:	9c 87       	std	Y+12, r25	; 0x0c
     d48:	ad 87       	std	Y+13, r26	; 0x0d
     d4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d50:	8d 85       	ldd	r24, Y+13	; 0x0d
     d52:	9e 85       	ldd	r25, Y+14	; 0x0e
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	4a e7       	ldi	r20, 0x7A	; 122
     d5a:	53 e4       	ldi	r21, 0x43	; 67
     d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	8f 83       	std	Y+7, r24	; 0x07
     d66:	98 87       	std	Y+8, r25	; 0x08
     d68:	a9 87       	std	Y+9, r26	; 0x09
     d6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d6c:	6f 81       	ldd	r22, Y+7	; 0x07
     d6e:	78 85       	ldd	r23, Y+8	; 0x08
     d70:	89 85       	ldd	r24, Y+9	; 0x09
     d72:	9a 85       	ldd	r25, Y+10	; 0x0a
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e8       	ldi	r20, 0x80	; 128
     d7a:	5f e3       	ldi	r21, 0x3F	; 63
     d7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d80:	88 23       	and	r24, r24
     d82:	2c f4       	brge	.+10     	; 0xd8e <Send_String+0x18c>
		__ticks = 1;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	9e 83       	std	Y+6, r25	; 0x06
     d8a:	8d 83       	std	Y+5, r24	; 0x05
     d8c:	3f c0       	rjmp	.+126    	; 0xe0c <Send_String+0x20a>
	else if (__tmp > 65535)
     d8e:	6f 81       	ldd	r22, Y+7	; 0x07
     d90:	78 85       	ldd	r23, Y+8	; 0x08
     d92:	89 85       	ldd	r24, Y+9	; 0x09
     d94:	9a 85       	ldd	r25, Y+10	; 0x0a
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	3f ef       	ldi	r19, 0xFF	; 255
     d9a:	4f e7       	ldi	r20, 0x7F	; 127
     d9c:	57 e4       	ldi	r21, 0x47	; 71
     d9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da2:	18 16       	cp	r1, r24
     da4:	4c f5       	brge	.+82     	; 0xdf8 <Send_String+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da6:	6b 85       	ldd	r22, Y+11	; 0x0b
     da8:	7c 85       	ldd	r23, Y+12	; 0x0c
     daa:	8d 85       	ldd	r24, Y+13	; 0x0d
     dac:	9e 85       	ldd	r25, Y+14	; 0x0e
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e2       	ldi	r20, 0x20	; 32
     db4:	51 e4       	ldi	r21, 0x41	; 65
     db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	bc 01       	movw	r22, r24
     dc0:	cd 01       	movw	r24, r26
     dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	9e 83       	std	Y+6, r25	; 0x06
     dcc:	8d 83       	std	Y+5, r24	; 0x05
     dce:	0f c0       	rjmp	.+30     	; 0xdee <Send_String+0x1ec>
     dd0:	89 e1       	ldi	r24, 0x19	; 25
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	9c 83       	std	Y+4, r25	; 0x04
     dd6:	8b 83       	std	Y+3, r24	; 0x03
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	9c 81       	ldd	r25, Y+4	; 0x04
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <Send_String+0x1da>
     de0:	9c 83       	std	Y+4, r25	; 0x04
     de2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de4:	8d 81       	ldd	r24, Y+5	; 0x05
     de6:	9e 81       	ldd	r25, Y+6	; 0x06
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	9e 83       	std	Y+6, r25	; 0x06
     dec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dee:	8d 81       	ldd	r24, Y+5	; 0x05
     df0:	9e 81       	ldd	r25, Y+6	; 0x06
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	69 f7       	brne	.-38     	; 0xdd0 <Send_String+0x1ce>
     df6:	14 c0       	rjmp	.+40     	; 0xe20 <Send_String+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df8:	6f 81       	ldd	r22, Y+7	; 0x07
     dfa:	78 85       	ldd	r23, Y+8	; 0x08
     dfc:	89 85       	ldd	r24, Y+9	; 0x09
     dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	9e 83       	std	Y+6, r25	; 0x06
     e0a:	8d 83       	std	Y+5, r24	; 0x05
     e0c:	8d 81       	ldd	r24, Y+5	; 0x05
     e0e:	9e 81       	ldd	r25, Y+6	; 0x06
     e10:	9a 83       	std	Y+2, r25	; 0x02
     e12:	89 83       	std	Y+1, r24	; 0x01
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	9a 81       	ldd	r25, Y+2	; 0x02
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <Send_String+0x216>
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
     e20:	6f 96       	adiw	r28, 0x1f	; 31
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <Resieve_String>:
void Resieve_String(uint8* str)
{
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	61 97       	sbiw	r28, 0x11	; 17
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	99 8b       	std	Y+17, r25	; 0x11
     e4c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i = 0;
     e4e:	1f 86       	std	Y+15, r1	; 0x0f
	str[i] = Resieve_Byte();
     e50:	8f 85       	ldd	r24, Y+15	; 0x0f
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	88 89       	ldd	r24, Y+16	; 0x10
     e58:	99 89       	ldd	r25, Y+17	; 0x11
     e5a:	8c 01       	movw	r16, r24
     e5c:	02 0f       	add	r16, r18
     e5e:	13 1f       	adc	r17, r19
     e60:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Resieve_Byte>
     e64:	f8 01       	movw	r30, r16
     e66:	80 83       	st	Z, r24
     e68:	81 c0       	rjmp	.+258    	; 0xf6c <Resieve_String+0x13a>
	while(str[i] != END_STRING_SYMBOL)
	{
		i++;
     e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e6c:	8f 5f       	subi	r24, 0xFF	; 255
     e6e:	8f 87       	std	Y+15, r24	; 0x0f
		str[i] = Resieve_Byte();
     e70:	8f 85       	ldd	r24, Y+15	; 0x0f
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	88 89       	ldd	r24, Y+16	; 0x10
     e78:	99 89       	ldd	r25, Y+17	; 0x11
     e7a:	8c 01       	movw	r16, r24
     e7c:	02 0f       	add	r16, r18
     e7e:	13 1f       	adc	r17, r19
     e80:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Resieve_Byte>
     e84:	f8 01       	movw	r30, r16
     e86:	80 83       	st	Z, r24
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a8 e4       	ldi	r26, 0x48	; 72
     e8e:	b2 e4       	ldi	r27, 0x42	; 66
     e90:	8b 87       	std	Y+11, r24	; 0x0b
     e92:	9c 87       	std	Y+12, r25	; 0x0c
     e94:	ad 87       	std	Y+13, r26	; 0x0d
     e96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e98:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	4a e7       	ldi	r20, 0x7A	; 122
     ea6:	53 e4       	ldi	r21, 0x43	; 67
     ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	8f 83       	std	Y+7, r24	; 0x07
     eb2:	98 87       	std	Y+8, r25	; 0x08
     eb4:	a9 87       	std	Y+9, r26	; 0x09
     eb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eb8:	6f 81       	ldd	r22, Y+7	; 0x07
     eba:	78 85       	ldd	r23, Y+8	; 0x08
     ebc:	89 85       	ldd	r24, Y+9	; 0x09
     ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e8       	ldi	r20, 0x80	; 128
     ec6:	5f e3       	ldi	r21, 0x3F	; 63
     ec8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ecc:	88 23       	and	r24, r24
     ece:	2c f4       	brge	.+10     	; 0xeda <Resieve_String+0xa8>
		__ticks = 1;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	9e 83       	std	Y+6, r25	; 0x06
     ed6:	8d 83       	std	Y+5, r24	; 0x05
     ed8:	3f c0       	rjmp	.+126    	; 0xf58 <Resieve_String+0x126>
	else if (__tmp > 65535)
     eda:	6f 81       	ldd	r22, Y+7	; 0x07
     edc:	78 85       	ldd	r23, Y+8	; 0x08
     ede:	89 85       	ldd	r24, Y+9	; 0x09
     ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	3f ef       	ldi	r19, 0xFF	; 255
     ee6:	4f e7       	ldi	r20, 0x7F	; 127
     ee8:	57 e4       	ldi	r21, 0x47	; 71
     eea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eee:	18 16       	cp	r1, r24
     ef0:	4c f5       	brge	.+82     	; 0xf44 <Resieve_String+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	40 e2       	ldi	r20, 0x20	; 32
     f00:	51 e4       	ldi	r21, 0x41	; 65
     f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	bc 01       	movw	r22, r24
     f0c:	cd 01       	movw	r24, r26
     f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	9e 83       	std	Y+6, r25	; 0x06
     f18:	8d 83       	std	Y+5, r24	; 0x05
     f1a:	0f c0       	rjmp	.+30     	; 0xf3a <Resieve_String+0x108>
     f1c:	89 e1       	ldi	r24, 0x19	; 25
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	9c 83       	std	Y+4, r25	; 0x04
     f22:	8b 83       	std	Y+3, r24	; 0x03
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	9c 81       	ldd	r25, Y+4	; 0x04
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <Resieve_String+0xf6>
     f2c:	9c 83       	std	Y+4, r25	; 0x04
     f2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	9e 83       	std	Y+6, r25	; 0x06
     f38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	69 f7       	brne	.-38     	; 0xf1c <Resieve_String+0xea>
     f42:	14 c0       	rjmp	.+40     	; 0xf6c <Resieve_String+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f44:	6f 81       	ldd	r22, Y+7	; 0x07
     f46:	78 85       	ldd	r23, Y+8	; 0x08
     f48:	89 85       	ldd	r24, Y+9	; 0x09
     f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	9e 83       	std	Y+6, r25	; 0x06
     f56:	8d 83       	std	Y+5, r24	; 0x05
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	9e 81       	ldd	r25, Y+6	; 0x06
     f5c:	9a 83       	std	Y+2, r25	; 0x02
     f5e:	89 83       	std	Y+1, r24	; 0x01
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <Resieve_String+0x132>
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
}
void Resieve_String(uint8* str)
{
	uint8 i = 0;
	str[i] = Resieve_Byte();
	while(str[i] != END_STRING_SYMBOL)
     f6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	88 89       	ldd	r24, Y+16	; 0x10
     f74:	99 89       	ldd	r25, Y+17	; 0x11
     f76:	fc 01       	movw	r30, r24
     f78:	e2 0f       	add	r30, r18
     f7a:	f3 1f       	adc	r31, r19
     f7c:	80 81       	ld	r24, Z
     f7e:	83 32       	cpi	r24, 0x23	; 35
     f80:	09 f0       	breq	.+2      	; 0xf84 <Resieve_String+0x152>
     f82:	73 cf       	rjmp	.-282    	; 0xe6a <Resieve_String+0x38>
	{
		i++;
		str[i] = Resieve_Byte();
		_delay_ms(50);
	}
	str[i] = '\0';
     f84:	8f 85       	ldd	r24, Y+15	; 0x0f
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	88 89       	ldd	r24, Y+16	; 0x10
     f8c:	99 89       	ldd	r25, Y+17	; 0x11
     f8e:	fc 01       	movw	r30, r24
     f90:	e2 0f       	add	r30, r18
     f92:	f3 1f       	adc	r31, r19
     f94:	10 82       	st	Z, r1
}
     f96:	61 96       	adiw	r28, 0x11	; 17
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	08 95       	ret

00000fac <KeyPad_INIT>:
/***********************************************************************************
 * 																				   *
 *              	          Functions Definitions                                *
 * 																				   *
 ***********************************************************************************/
void KeyPad_INIT(void) {
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * set Keypad rows pins direction to input
	 */
	KEYPAD_ROW_PORT_DIR = (KEYPAD_ROW_PORT_DIR
     fb4:	a7 e3       	ldi	r26, 0x37	; 55
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e7 e3       	ldi	r30, 0x37	; 55
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	8f 70       	andi	r24, 0x0F	; 15
     fc0:	8c 93       	st	X, r24
			& ~((1 << ROW1) | (1 << ROW2) | (1 << ROW3) | (1 << ROW4)));
	/*
	 * enable the internal pull up resistors for the rows pins
	 */
	KEYPAD_ROW_PORT_OUT = (KEYPAD_ROW_PORT_OUT
     fc2:	a8 e3       	ldi	r26, 0x38	; 56
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e8 e3       	ldi	r30, 0x38	; 56
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	80 6f       	ori	r24, 0xF0	; 240
     fce:	8c 93       	st	X, r24
			| ((1 << ROW1) | (1 << ROW2) | (1 << ROW3) | (1 << ROW4)));
}
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <KeyPad_getPressedKey>:
/*---------------------------------------------------------------------------------*/
uint8 KeyPad_getPressedKey(void) {
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	00 d0       	rcall	.+0      	; 0xfdc <KeyPad_getPressedKey+0x6>
     fdc:	0f 92       	push	r0
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
	uint8 col, row;
		for (col = 0; col < N_col; col++) /* loop for columns */
     fe2:	1a 82       	std	Y+2, r1	; 0x02
     fe4:	55 c0       	rjmp	.+170    	; 0x1090 <KeyPad_getPressedKey+0xba>

			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins
			 */
			KEYPAD_COL_PORT_DIR = (KEYPAD_COL_PORT_DIR
     fe6:	a4 e3       	ldi	r26, 0x34	; 52
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e4 e3       	ldi	r30, 0x34	; 52
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	4f 70       	andi	r20, 0x0F	; 15
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	80 e1       	ldi	r24, 0x10	; 16
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <KeyPad_getPressedKey+0x2e>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	2a 95       	dec	r18
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <KeyPad_getPressedKey+0x2a>
    1008:	84 2b       	or	r24, r20
    100a:	8c 93       	st	X, r24

			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the cloumns pins
			 */
			KEYPAD_COL_PORT_OUT = (KEYPAD_COL_PORT_OUT & ~((1 << COL1) << col));
    100c:	a5 e3       	ldi	r26, 0x35	; 53
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e5 e3       	ldi	r30, 0x35	; 53
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	80 e1       	ldi	r24, 0x10	; 16
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <KeyPad_getPressedKey+0x54>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <KeyPad_getPressedKey+0x50>
    102e:	80 95       	com	r24
    1030:	84 23       	and	r24, r20
    1032:	8c 93       	st	X, r24

			for (row = 0; row < N_row; row++) /* loop for rows */
    1034:	19 82       	std	Y+1, r1	; 0x01
    1036:	26 c0       	rjmp	.+76     	; 0x1084 <KeyPad_getPressedKey+0xae>
			{
				if (BIT_IS_CLEAR(KEYPAD_ROW_PORT_IN, (ROW1+row))) /* if the switch is press in this row */
    1038:	e6 e3       	ldi	r30, 0x36	; 54
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	04 96       	adiw	r24, 0x04	; 4
    104a:	a9 01       	movw	r20, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <KeyPad_getPressedKey+0x7c>
    104e:	55 95       	asr	r21
    1050:	47 95       	ror	r20
    1052:	8a 95       	dec	r24
    1054:	e2 f7       	brpl	.-8      	; 0x104e <KeyPad_getPressedKey+0x78>
    1056:	ca 01       	movw	r24, r20
    1058:	81 70       	andi	r24, 0x01	; 1
    105a:	90 70       	andi	r25, 0x00	; 0
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	79 f4       	brne	.+30     	; 0x107e <KeyPad_getPressedKey+0xa8>
				{
#if (N_col == 3)
					return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
#elif (N_col == 4)
					return KeyPad_4x4_adjustKeyNumber((row * N_col) + col + 1);
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	98 2f       	mov	r25, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	89 0f       	add	r24, r25
    1074:	8f 5f       	subi	r24, 0xFF	; 255
    1076:	0e 94 54 08 	call	0x10a8	; 0x10a8 <KeyPad_4x4_adjustKeyNumber>
    107a:	8b 83       	std	Y+3, r24	; 0x03
    107c:	0e c0       	rjmp	.+28     	; 0x109a <KeyPad_getPressedKey+0xc4>
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the cloumns pins
			 */
			KEYPAD_COL_PORT_OUT = (KEYPAD_COL_PORT_OUT & ~((1 << COL1) << col));

			for (row = 0; row < N_row; row++) /* loop for rows */
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	8f 5f       	subi	r24, 0xFF	; 255
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	84 30       	cpi	r24, 0x04	; 4
    1088:	b8 f2       	brcs	.-82     	; 0x1038 <KeyPad_getPressedKey+0x62>
			| ((1 << ROW1) | (1 << ROW2) | (1 << ROW3) | (1 << ROW4)));
}
/*---------------------------------------------------------------------------------*/
uint8 KeyPad_getPressedKey(void) {
	uint8 col, row;
		for (col = 0; col < N_col; col++) /* loop for columns */
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	8f 5f       	subi	r24, 0xFF	; 255
    108e:	8a 83       	std	Y+2, r24	; 0x02
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	84 30       	cpi	r24, 0x04	; 4
    1094:	08 f4       	brcc	.+2      	; 0x1098 <KeyPad_getPressedKey+0xc2>
    1096:	a7 cf       	rjmp	.-178    	; 0xfe6 <KeyPad_getPressedKey+0x10>
					return KeyPad_4x4_adjustKeyNumber((row * N_col) + col + 1);
#endif
				}
			}
		}
	return 0;
    1098:	1b 82       	std	Y+3, r1	; 0x03
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <KeyPad_4x4_adjustKeyNumber>:
}

#elif (N_col == 4)

static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <KeyPad_4x4_adjustKeyNumber+0x6>
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <KeyPad_4x4_adjustKeyNumber+0x8>
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3c 83       	std	Y+4, r19	; 0x04
    10be:	2b 83       	std	Y+3, r18	; 0x03
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	88 30       	cpi	r24, 0x08	; 8
    10c6:	91 05       	cpc	r25, r1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <KeyPad_4x4_adjustKeyNumber+0x24>
    10ca:	70 c0       	rjmp	.+224    	; 0x11ac <KeyPad_4x4_adjustKeyNumber+0x104>
    10cc:	2b 81       	ldd	r18, Y+3	; 0x03
    10ce:	3c 81       	ldd	r19, Y+4	; 0x04
    10d0:	29 30       	cpi	r18, 0x09	; 9
    10d2:	31 05       	cpc	r19, r1
    10d4:	5c f5       	brge	.+86     	; 0x112c <KeyPad_4x4_adjustKeyNumber+0x84>
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	84 30       	cpi	r24, 0x04	; 4
    10dc:	91 05       	cpc	r25, r1
    10de:	09 f4       	brne	.+2      	; 0x10e2 <KeyPad_4x4_adjustKeyNumber+0x3a>
    10e0:	59 c0       	rjmp	.+178    	; 0x1194 <KeyPad_4x4_adjustKeyNumber+0xec>
    10e2:	2b 81       	ldd	r18, Y+3	; 0x03
    10e4:	3c 81       	ldd	r19, Y+4	; 0x04
    10e6:	25 30       	cpi	r18, 0x05	; 5
    10e8:	31 05       	cpc	r19, r1
    10ea:	9c f4       	brge	.+38     	; 0x1112 <KeyPad_4x4_adjustKeyNumber+0x6a>
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	91 05       	cpc	r25, r1
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <KeyPad_4x4_adjustKeyNumber+0x50>
    10f6:	48 c0       	rjmp	.+144    	; 0x1188 <KeyPad_4x4_adjustKeyNumber+0xe0>
    10f8:	2b 81       	ldd	r18, Y+3	; 0x03
    10fa:	3c 81       	ldd	r19, Y+4	; 0x04
    10fc:	23 30       	cpi	r18, 0x03	; 3
    10fe:	31 05       	cpc	r19, r1
    1100:	0c f0       	brlt	.+2      	; 0x1104 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1102:	45 c0       	rjmp	.+138    	; 0x118e <KeyPad_4x4_adjustKeyNumber+0xe6>
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	91 05       	cpc	r25, r1
    110c:	09 f4       	brne	.+2      	; 0x1110 <KeyPad_4x4_adjustKeyNumber+0x68>
    110e:	39 c0       	rjmp	.+114    	; 0x1182 <KeyPad_4x4_adjustKeyNumber+0xda>
    1110:	68 c0       	rjmp	.+208    	; 0x11e2 <KeyPad_4x4_adjustKeyNumber+0x13a>
    1112:	2b 81       	ldd	r18, Y+3	; 0x03
    1114:	3c 81       	ldd	r19, Y+4	; 0x04
    1116:	26 30       	cpi	r18, 0x06	; 6
    1118:	31 05       	cpc	r19, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <KeyPad_4x4_adjustKeyNumber+0x76>
    111c:	41 c0       	rjmp	.+130    	; 0x11a0 <KeyPad_4x4_adjustKeyNumber+0xf8>
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	9c 81       	ldd	r25, Y+4	; 0x04
    1122:	87 30       	cpi	r24, 0x07	; 7
    1124:	91 05       	cpc	r25, r1
    1126:	0c f0       	brlt	.+2      	; 0x112a <KeyPad_4x4_adjustKeyNumber+0x82>
    1128:	3e c0       	rjmp	.+124    	; 0x11a6 <KeyPad_4x4_adjustKeyNumber+0xfe>
    112a:	37 c0       	rjmp	.+110    	; 0x119a <KeyPad_4x4_adjustKeyNumber+0xf2>
    112c:	2b 81       	ldd	r18, Y+3	; 0x03
    112e:	3c 81       	ldd	r19, Y+4	; 0x04
    1130:	2c 30       	cpi	r18, 0x0C	; 12
    1132:	31 05       	cpc	r19, r1
    1134:	09 f4       	brne	.+2      	; 0x1138 <KeyPad_4x4_adjustKeyNumber+0x90>
    1136:	46 c0       	rjmp	.+140    	; 0x11c4 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	8d 30       	cpi	r24, 0x0D	; 13
    113e:	91 05       	cpc	r25, r1
    1140:	5c f4       	brge	.+22     	; 0x1158 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1142:	2b 81       	ldd	r18, Y+3	; 0x03
    1144:	3c 81       	ldd	r19, Y+4	; 0x04
    1146:	2a 30       	cpi	r18, 0x0A	; 10
    1148:	31 05       	cpc	r19, r1
    114a:	b1 f1       	breq	.+108    	; 0x11b8 <KeyPad_4x4_adjustKeyNumber+0x110>
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	9c 81       	ldd	r25, Y+4	; 0x04
    1150:	8b 30       	cpi	r24, 0x0B	; 11
    1152:	91 05       	cpc	r25, r1
    1154:	a4 f5       	brge	.+104    	; 0x11be <KeyPad_4x4_adjustKeyNumber+0x116>
    1156:	2d c0       	rjmp	.+90     	; 0x11b2 <KeyPad_4x4_adjustKeyNumber+0x10a>
    1158:	2b 81       	ldd	r18, Y+3	; 0x03
    115a:	3c 81       	ldd	r19, Y+4	; 0x04
    115c:	2e 30       	cpi	r18, 0x0E	; 14
    115e:	31 05       	cpc	r19, r1
    1160:	b9 f1       	breq	.+110    	; 0x11d0 <KeyPad_4x4_adjustKeyNumber+0x128>
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	8e 30       	cpi	r24, 0x0E	; 14
    1168:	91 05       	cpc	r25, r1
    116a:	7c f1       	brlt	.+94     	; 0x11ca <KeyPad_4x4_adjustKeyNumber+0x122>
    116c:	2b 81       	ldd	r18, Y+3	; 0x03
    116e:	3c 81       	ldd	r19, Y+4	; 0x04
    1170:	2f 30       	cpi	r18, 0x0F	; 15
    1172:	31 05       	cpc	r19, r1
    1174:	81 f1       	breq	.+96     	; 0x11d6 <KeyPad_4x4_adjustKeyNumber+0x12e>
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	9c 81       	ldd	r25, Y+4	; 0x04
    117a:	80 31       	cpi	r24, 0x10	; 16
    117c:	91 05       	cpc	r25, r1
    117e:	71 f1       	breq	.+92     	; 0x11dc <KeyPad_4x4_adjustKeyNumber+0x134>
    1180:	30 c0       	rjmp	.+96     	; 0x11e2 <KeyPad_4x4_adjustKeyNumber+0x13a>
	{
		case 1: return 7;
    1182:	97 e0       	ldi	r25, 0x07	; 7
    1184:	9a 83       	std	Y+2, r25	; 0x02
    1186:	2f c0       	rjmp	.+94     	; 0x11e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: return 8;
    1188:	28 e0       	ldi	r18, 0x08	; 8
    118a:	2a 83       	std	Y+2, r18	; 0x02
    118c:	2c c0       	rjmp	.+88     	; 0x11e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: return 9;
    118e:	39 e0       	ldi	r19, 0x09	; 9
    1190:	3a 83       	std	Y+2, r19	; 0x02
    1192:	29 c0       	rjmp	.+82     	; 0x11e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: return '%'; // ASCII Code of %
    1194:	85 e2       	ldi	r24, 0x25	; 37
    1196:	8a 83       	std	Y+2, r24	; 0x02
    1198:	26 c0       	rjmp	.+76     	; 0x11e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: return 4;
    119a:	94 e0       	ldi	r25, 0x04	; 4
    119c:	9a 83       	std	Y+2, r25	; 0x02
    119e:	23 c0       	rjmp	.+70     	; 0x11e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: return 5;
    11a0:	25 e0       	ldi	r18, 0x05	; 5
    11a2:	2a 83       	std	Y+2, r18	; 0x02
    11a4:	20 c0       	rjmp	.+64     	; 0x11e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: return 6;
    11a6:	36 e0       	ldi	r19, 0x06	; 6
    11a8:	3a 83       	std	Y+2, r19	; 0x02
    11aa:	1d c0       	rjmp	.+58     	; 0x11e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    11ac:	8a e2       	ldi	r24, 0x2A	; 42
    11ae:	8a 83       	std	Y+2, r24	; 0x02
    11b0:	1a c0       	rjmp	.+52     	; 0x11e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: return 1;
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	9a 83       	std	Y+2, r25	; 0x02
    11b6:	17 c0       	rjmp	.+46     	; 0x11e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: return 2;
    11b8:	22 e0       	ldi	r18, 0x02	; 2
    11ba:	2a 83       	std	Y+2, r18	; 0x02
    11bc:	14 c0       	rjmp	.+40     	; 0x11e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: return 3;
    11be:	33 e0       	ldi	r19, 0x03	; 3
    11c0:	3a 83       	std	Y+2, r19	; 0x02
    11c2:	11 c0       	rjmp	.+34     	; 0x11e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    11c4:	8d e2       	ldi	r24, 0x2D	; 45
    11c6:	8a 83       	std	Y+2, r24	; 0x02
    11c8:	0e c0       	rjmp	.+28     	; 0x11e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: return '#';  /* ASCII of Enter */
    11ca:	93 e2       	ldi	r25, 0x23	; 35
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	0b c0       	rjmp	.+22     	; 0x11e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: return '0';
    11d0:	20 e3       	ldi	r18, 0x30	; 48
    11d2:	2a 83       	std	Y+2, r18	; 0x02
    11d4:	08 c0       	rjmp	.+16     	; 0x11e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    11d6:	3d e3       	ldi	r19, 0x3D	; 61
    11d8:	3a 83       	std	Y+2, r19	; 0x02
    11da:	05 c0       	rjmp	.+10     	; 0x11e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    11dc:	8b e2       	ldi	r24, 0x2B	; 43
    11de:	8a 83       	std	Y+2, r24	; 0x02
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		default: return button_number;
    11e2:	99 81       	ldd	r25, Y+1	; 0x01
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <LCD_init>:
 *              	          Functions Definitions                                *
 * 																				   *
 ***********************************************************************************/

void LCD_init(void)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1 << E) | (1 << RS); /* Configure the control pins(E,RS,RW) as output pins */
    11fe:	aa e3       	ldi	r26, 0x3A	; 58
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	ea e3       	ldi	r30, 0x3A	; 58
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	86 60       	ori	r24, 0x06	; 6
    120a:	8c 93       	st	X, r24

#if (MODE == 4)
	LCD_DATA_PORT_DIR |= (1 << D4) | (1 << D5) | (1 << D6) | (1 << D7); /* Configure the data port as output port */
    120c:	aa e3       	ldi	r26, 0x3A	; 58
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	ea e3       	ldi	r30, 0x3A	; 58
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	88 67       	ori	r24, 0x78	; 120
    1218:	8c 93       	st	X, r24
	LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    121a:	82 e0       	ldi	r24, 0x02	; 2
    121c:	0e 94 1c 09 	call	0x1238	; 0x1238 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_4_BIT_MODE); /* initialize LCD in 4-bit mode */
    1220:	88 e2       	ldi	r24, 0x28	; 40
    1222:	0e 94 1c 09 	call	0x1238	; 0x1238 <LCD_sendCommand>
#elif (MODE == 8)
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
	LCD_sendCommand(TWO_LINE_LCD_8_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF); /* cursor off */
    1226:	8c e0       	ldi	r24, 0x0C	; 12
    1228:	0e 94 1c 09 	call	0x1238	; 0x1238 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	0e 94 1c 09 	call	0x1238	; 0x1238 <LCD_sendCommand>
}
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <LCD_sendCommand>:

/*---------------------------------------------------------------------------------*/

void LCD_sendCommand(uint8 command)
{
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	c3 56       	subi	r28, 0x63	; 99
    1246:	d0 40       	sbci	r29, 0x00	; 0
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	fe 01       	movw	r30, r28
    1254:	ed 59       	subi	r30, 0x9D	; 157
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    125a:	ab e3       	ldi	r26, 0x3B	; 59
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	eb e3       	ldi	r30, 0x3B	; 59
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	8d 7f       	andi	r24, 0xFD	; 253
    1266:	8c 93       	st	X, r24
    1268:	fe 01       	movw	r30, r28
    126a:	e1 5a       	subi	r30, 0xA1	; 161
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	a0 e8       	ldi	r26, 0x80	; 128
    1274:	bf e3       	ldi	r27, 0x3F	; 63
    1276:	80 83       	st	Z, r24
    1278:	91 83       	std	Z+1, r25	; 0x01
    127a:	a2 83       	std	Z+2, r26	; 0x02
    127c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127e:	8e 01       	movw	r16, r28
    1280:	05 5a       	subi	r16, 0xA5	; 165
    1282:	1f 4f       	sbci	r17, 0xFF	; 255
    1284:	fe 01       	movw	r30, r28
    1286:	e1 5a       	subi	r30, 0xA1	; 161
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	60 81       	ld	r22, Z
    128c:	71 81       	ldd	r23, Z+1	; 0x01
    128e:	82 81       	ldd	r24, Z+2	; 0x02
    1290:	93 81       	ldd	r25, Z+3	; 0x03
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	4a e7       	ldi	r20, 0x7A	; 122
    1298:	53 e4       	ldi	r21, 0x43	; 67
    129a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	f8 01       	movw	r30, r16
    12a4:	80 83       	st	Z, r24
    12a6:	91 83       	std	Z+1, r25	; 0x01
    12a8:	a2 83       	std	Z+2, r26	; 0x02
    12aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12ac:	fe 01       	movw	r30, r28
    12ae:	e5 5a       	subi	r30, 0xA5	; 165
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	60 81       	ld	r22, Z
    12b4:	71 81       	ldd	r23, Z+1	; 0x01
    12b6:	82 81       	ldd	r24, Z+2	; 0x02
    12b8:	93 81       	ldd	r25, Z+3	; 0x03
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e8       	ldi	r20, 0x80	; 128
    12c0:	5f e3       	ldi	r21, 0x3F	; 63
    12c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c6:	88 23       	and	r24, r24
    12c8:	44 f4       	brge	.+16     	; 0x12da <LCD_sendCommand+0xa2>
		__ticks = 1;
    12ca:	fe 01       	movw	r30, r28
    12cc:	e7 5a       	subi	r30, 0xA7	; 167
    12ce:	ff 4f       	sbci	r31, 0xFF	; 255
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	91 83       	std	Z+1, r25	; 0x01
    12d6:	80 83       	st	Z, r24
    12d8:	64 c0       	rjmp	.+200    	; 0x13a2 <LCD_sendCommand+0x16a>
	else if (__tmp > 65535)
    12da:	fe 01       	movw	r30, r28
    12dc:	e5 5a       	subi	r30, 0xA5	; 165
    12de:	ff 4f       	sbci	r31, 0xFF	; 255
    12e0:	60 81       	ld	r22, Z
    12e2:	71 81       	ldd	r23, Z+1	; 0x01
    12e4:	82 81       	ldd	r24, Z+2	; 0x02
    12e6:	93 81       	ldd	r25, Z+3	; 0x03
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	3f ef       	ldi	r19, 0xFF	; 255
    12ec:	4f e7       	ldi	r20, 0x7F	; 127
    12ee:	57 e4       	ldi	r21, 0x47	; 71
    12f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12f4:	18 16       	cp	r1, r24
    12f6:	0c f0       	brlt	.+2      	; 0x12fa <LCD_sendCommand+0xc2>
    12f8:	43 c0       	rjmp	.+134    	; 0x1380 <LCD_sendCommand+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fa:	fe 01       	movw	r30, r28
    12fc:	e1 5a       	subi	r30, 0xA1	; 161
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	60 81       	ld	r22, Z
    1302:	71 81       	ldd	r23, Z+1	; 0x01
    1304:	82 81       	ldd	r24, Z+2	; 0x02
    1306:	93 81       	ldd	r25, Z+3	; 0x03
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e2       	ldi	r20, 0x20	; 32
    130e:	51 e4       	ldi	r21, 0x41	; 65
    1310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	8e 01       	movw	r16, r28
    131a:	07 5a       	subi	r16, 0xA7	; 167
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
    131e:	bc 01       	movw	r22, r24
    1320:	cd 01       	movw	r24, r26
    1322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	f8 01       	movw	r30, r16
    132c:	91 83       	std	Z+1, r25	; 0x01
    132e:	80 83       	st	Z, r24
    1330:	1f c0       	rjmp	.+62     	; 0x1370 <LCD_sendCommand+0x138>
    1332:	fe 01       	movw	r30, r28
    1334:	e9 5a       	subi	r30, 0xA9	; 169
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	89 e1       	ldi	r24, 0x19	; 25
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	91 83       	std	Z+1, r25	; 0x01
    133e:	80 83       	st	Z, r24
    1340:	fe 01       	movw	r30, r28
    1342:	e9 5a       	subi	r30, 0xA9	; 169
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	80 81       	ld	r24, Z
    1348:	91 81       	ldd	r25, Z+1	; 0x01
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	f1 f7       	brne	.-4      	; 0x134a <LCD_sendCommand+0x112>
    134e:	fe 01       	movw	r30, r28
    1350:	e9 5a       	subi	r30, 0xA9	; 169
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	91 83       	std	Z+1, r25	; 0x01
    1356:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1358:	de 01       	movw	r26, r28
    135a:	a7 5a       	subi	r26, 0xA7	; 167
    135c:	bf 4f       	sbci	r27, 0xFF	; 255
    135e:	fe 01       	movw	r30, r28
    1360:	e7 5a       	subi	r30, 0xA7	; 167
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	80 81       	ld	r24, Z
    1366:	91 81       	ldd	r25, Z+1	; 0x01
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	11 96       	adiw	r26, 0x01	; 1
    136c:	9c 93       	st	X, r25
    136e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1370:	fe 01       	movw	r30, r28
    1372:	e7 5a       	subi	r30, 0xA7	; 167
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	80 81       	ld	r24, Z
    1378:	91 81       	ldd	r25, Z+1	; 0x01
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	d1 f6       	brne	.-76     	; 0x1332 <LCD_sendCommand+0xfa>
    137e:	27 c0       	rjmp	.+78     	; 0x13ce <LCD_sendCommand+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1380:	8e 01       	movw	r16, r28
    1382:	07 5a       	subi	r16, 0xA7	; 167
    1384:	1f 4f       	sbci	r17, 0xFF	; 255
    1386:	fe 01       	movw	r30, r28
    1388:	e5 5a       	subi	r30, 0xA5	; 165
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	60 81       	ld	r22, Z
    138e:	71 81       	ldd	r23, Z+1	; 0x01
    1390:	82 81       	ldd	r24, Z+2	; 0x02
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	f8 01       	movw	r30, r16
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	80 83       	st	Z, r24
    13a2:	de 01       	movw	r26, r28
    13a4:	ab 5a       	subi	r26, 0xAB	; 171
    13a6:	bf 4f       	sbci	r27, 0xFF	; 255
    13a8:	fe 01       	movw	r30, r28
    13aa:	e7 5a       	subi	r30, 0xA7	; 167
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	80 81       	ld	r24, Z
    13b0:	91 81       	ldd	r25, Z+1	; 0x01
    13b2:	8d 93       	st	X+, r24
    13b4:	9c 93       	st	X, r25
    13b6:	fe 01       	movw	r30, r28
    13b8:	eb 5a       	subi	r30, 0xAB	; 171
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	80 81       	ld	r24, Z
    13be:	91 81       	ldd	r25, Z+1	; 0x01
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <LCD_sendCommand+0x188>
    13c4:	fe 01       	movw	r30, r28
    13c6:	eb 5a       	subi	r30, 0xAB	; 171
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	91 83       	std	Z+1, r25	; 0x01
    13cc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    13ce:	ab e3       	ldi	r26, 0x3B	; 59
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	eb e3       	ldi	r30, 0x3B	; 59
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	84 60       	ori	r24, 0x04	; 4
    13da:	8c 93       	st	X, r24
    13dc:	fe 01       	movw	r30, r28
    13de:	ef 5a       	subi	r30, 0xAF	; 175
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	a0 e8       	ldi	r26, 0x80	; 128
    13e8:	bf e3       	ldi	r27, 0x3F	; 63
    13ea:	80 83       	st	Z, r24
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	a2 83       	std	Z+2, r26	; 0x02
    13f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f2:	8e 01       	movw	r16, r28
    13f4:	03 5b       	subi	r16, 0xB3	; 179
    13f6:	1f 4f       	sbci	r17, 0xFF	; 255
    13f8:	fe 01       	movw	r30, r28
    13fa:	ef 5a       	subi	r30, 0xAF	; 175
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	60 81       	ld	r22, Z
    1400:	71 81       	ldd	r23, Z+1	; 0x01
    1402:	82 81       	ldd	r24, Z+2	; 0x02
    1404:	93 81       	ldd	r25, Z+3	; 0x03
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	4a e7       	ldi	r20, 0x7A	; 122
    140c:	53 e4       	ldi	r21, 0x43	; 67
    140e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	f8 01       	movw	r30, r16
    1418:	80 83       	st	Z, r24
    141a:	91 83       	std	Z+1, r25	; 0x01
    141c:	a2 83       	std	Z+2, r26	; 0x02
    141e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1420:	fe 01       	movw	r30, r28
    1422:	e3 5b       	subi	r30, 0xB3	; 179
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	60 81       	ld	r22, Z
    1428:	71 81       	ldd	r23, Z+1	; 0x01
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e8       	ldi	r20, 0x80	; 128
    1434:	5f e3       	ldi	r21, 0x3F	; 63
    1436:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143a:	88 23       	and	r24, r24
    143c:	44 f4       	brge	.+16     	; 0x144e <LCD_sendCommand+0x216>
		__ticks = 1;
    143e:	fe 01       	movw	r30, r28
    1440:	e5 5b       	subi	r30, 0xB5	; 181
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	91 83       	std	Z+1, r25	; 0x01
    144a:	80 83       	st	Z, r24
    144c:	64 c0       	rjmp	.+200    	; 0x1516 <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    144e:	fe 01       	movw	r30, r28
    1450:	e3 5b       	subi	r30, 0xB3	; 179
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	60 81       	ld	r22, Z
    1456:	71 81       	ldd	r23, Z+1	; 0x01
    1458:	82 81       	ldd	r24, Z+2	; 0x02
    145a:	93 81       	ldd	r25, Z+3	; 0x03
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	3f ef       	ldi	r19, 0xFF	; 255
    1460:	4f e7       	ldi	r20, 0x7F	; 127
    1462:	57 e4       	ldi	r21, 0x47	; 71
    1464:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1468:	18 16       	cp	r1, r24
    146a:	0c f0       	brlt	.+2      	; 0x146e <LCD_sendCommand+0x236>
    146c:	43 c0       	rjmp	.+134    	; 0x14f4 <LCD_sendCommand+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146e:	fe 01       	movw	r30, r28
    1470:	ef 5a       	subi	r30, 0xAF	; 175
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	60 81       	ld	r22, Z
    1476:	71 81       	ldd	r23, Z+1	; 0x01
    1478:	82 81       	ldd	r24, Z+2	; 0x02
    147a:	93 81       	ldd	r25, Z+3	; 0x03
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e2       	ldi	r20, 0x20	; 32
    1482:	51 e4       	ldi	r21, 0x41	; 65
    1484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	8e 01       	movw	r16, r28
    148e:	05 5b       	subi	r16, 0xB5	; 181
    1490:	1f 4f       	sbci	r17, 0xFF	; 255
    1492:	bc 01       	movw	r22, r24
    1494:	cd 01       	movw	r24, r26
    1496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	f8 01       	movw	r30, r16
    14a0:	91 83       	std	Z+1, r25	; 0x01
    14a2:	80 83       	st	Z, r24
    14a4:	1f c0       	rjmp	.+62     	; 0x14e4 <LCD_sendCommand+0x2ac>
    14a6:	fe 01       	movw	r30, r28
    14a8:	e7 5b       	subi	r30, 0xB7	; 183
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	89 e1       	ldi	r24, 0x19	; 25
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	91 83       	std	Z+1, r25	; 0x01
    14b2:	80 83       	st	Z, r24
    14b4:	fe 01       	movw	r30, r28
    14b6:	e7 5b       	subi	r30, 0xB7	; 183
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	80 81       	ld	r24, Z
    14bc:	91 81       	ldd	r25, Z+1	; 0x01
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	f1 f7       	brne	.-4      	; 0x14be <LCD_sendCommand+0x286>
    14c2:	fe 01       	movw	r30, r28
    14c4:	e7 5b       	subi	r30, 0xB7	; 183
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	91 83       	std	Z+1, r25	; 0x01
    14ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14cc:	de 01       	movw	r26, r28
    14ce:	a5 5b       	subi	r26, 0xB5	; 181
    14d0:	bf 4f       	sbci	r27, 0xFF	; 255
    14d2:	fe 01       	movw	r30, r28
    14d4:	e5 5b       	subi	r30, 0xB5	; 181
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	80 81       	ld	r24, Z
    14da:	91 81       	ldd	r25, Z+1	; 0x01
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	11 96       	adiw	r26, 0x01	; 1
    14e0:	9c 93       	st	X, r25
    14e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e4:	fe 01       	movw	r30, r28
    14e6:	e5 5b       	subi	r30, 0xB5	; 181
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	d1 f6       	brne	.-76     	; 0x14a6 <LCD_sendCommand+0x26e>
    14f2:	27 c0       	rjmp	.+78     	; 0x1542 <LCD_sendCommand+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f4:	8e 01       	movw	r16, r28
    14f6:	05 5b       	subi	r16, 0xB5	; 181
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
    14fa:	fe 01       	movw	r30, r28
    14fc:	e3 5b       	subi	r30, 0xB3	; 179
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	60 81       	ld	r22, Z
    1502:	71 81       	ldd	r23, Z+1	; 0x01
    1504:	82 81       	ldd	r24, Z+2	; 0x02
    1506:	93 81       	ldd	r25, Z+3	; 0x03
    1508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	f8 01       	movw	r30, r16
    1512:	91 83       	std	Z+1, r25	; 0x01
    1514:	80 83       	st	Z, r24
    1516:	de 01       	movw	r26, r28
    1518:	a9 5b       	subi	r26, 0xB9	; 185
    151a:	bf 4f       	sbci	r27, 0xFF	; 255
    151c:	fe 01       	movw	r30, r28
    151e:	e5 5b       	subi	r30, 0xB5	; 181
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	80 81       	ld	r24, Z
    1524:	91 81       	ldd	r25, Z+1	; 0x01
    1526:	8d 93       	st	X+, r24
    1528:	9c 93       	st	X, r25
    152a:	fe 01       	movw	r30, r28
    152c:	e9 5b       	subi	r30, 0xB9	; 185
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	80 81       	ld	r24, Z
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <LCD_sendCommand+0x2fc>
    1538:	fe 01       	movw	r30, r28
    153a:	e9 5b       	subi	r30, 0xB9	; 185
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	91 83       	std	Z+1, r25	; 0x01
    1540:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
	LCD_DATA_PORT = (LCD_DATA_PORT & ~((1 << D4) | (1 << D5) | (1 << D6) | (1 << D7))) | ((command & 0xF0)>>(4-D4));
    1542:	ab e3       	ldi	r26, 0x3B	; 59
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	eb e3       	ldi	r30, 0x3B	; 59
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	28 2f       	mov	r18, r24
    154e:	27 78       	andi	r18, 0x87	; 135
    1550:	fe 01       	movw	r30, r28
    1552:	ed 59       	subi	r30, 0x9D	; 157
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	80 81       	ld	r24, Z
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	80 7f       	andi	r24, 0xF0	; 240
    155e:	90 70       	andi	r25, 0x00	; 0
    1560:	95 95       	asr	r25
    1562:	87 95       	ror	r24
    1564:	82 2b       	or	r24, r18
    1566:	8c 93       	st	X, r24
    1568:	fe 01       	movw	r30, r28
    156a:	ed 5b       	subi	r30, 0xBD	; 189
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	a0 e8       	ldi	r26, 0x80	; 128
    1574:	bf e3       	ldi	r27, 0x3F	; 63
    1576:	80 83       	st	Z, r24
    1578:	91 83       	std	Z+1, r25	; 0x01
    157a:	a2 83       	std	Z+2, r26	; 0x02
    157c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157e:	8e 01       	movw	r16, r28
    1580:	01 5c       	subi	r16, 0xC1	; 193
    1582:	1f 4f       	sbci	r17, 0xFF	; 255
    1584:	fe 01       	movw	r30, r28
    1586:	ed 5b       	subi	r30, 0xBD	; 189
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	60 81       	ld	r22, Z
    158c:	71 81       	ldd	r23, Z+1	; 0x01
    158e:	82 81       	ldd	r24, Z+2	; 0x02
    1590:	93 81       	ldd	r25, Z+3	; 0x03
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	4a e7       	ldi	r20, 0x7A	; 122
    1598:	53 e4       	ldi	r21, 0x43	; 67
    159a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	f8 01       	movw	r30, r16
    15a4:	80 83       	st	Z, r24
    15a6:	91 83       	std	Z+1, r25	; 0x01
    15a8:	a2 83       	std	Z+2, r26	; 0x02
    15aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15ac:	fe 01       	movw	r30, r28
    15ae:	ff 96       	adiw	r30, 0x3f	; 63
    15b0:	60 81       	ld	r22, Z
    15b2:	71 81       	ldd	r23, Z+1	; 0x01
    15b4:	82 81       	ldd	r24, Z+2	; 0x02
    15b6:	93 81       	ldd	r25, Z+3	; 0x03
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e8       	ldi	r20, 0x80	; 128
    15be:	5f e3       	ldi	r21, 0x3F	; 63
    15c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c4:	88 23       	and	r24, r24
    15c6:	2c f4       	brge	.+10     	; 0x15d2 <LCD_sendCommand+0x39a>
		__ticks = 1;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	9e af       	std	Y+62, r25	; 0x3e
    15ce:	8d af       	std	Y+61, r24	; 0x3d
    15d0:	46 c0       	rjmp	.+140    	; 0x165e <LCD_sendCommand+0x426>
	else if (__tmp > 65535)
    15d2:	fe 01       	movw	r30, r28
    15d4:	ff 96       	adiw	r30, 0x3f	; 63
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	3f ef       	ldi	r19, 0xFF	; 255
    15e2:	4f e7       	ldi	r20, 0x7F	; 127
    15e4:	57 e4       	ldi	r21, 0x47	; 71
    15e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ea:	18 16       	cp	r1, r24
    15ec:	64 f5       	brge	.+88     	; 0x1646 <LCD_sendCommand+0x40e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ee:	fe 01       	movw	r30, r28
    15f0:	ed 5b       	subi	r30, 0xBD	; 189
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e2       	ldi	r20, 0x20	; 32
    1602:	51 e4       	ldi	r21, 0x41	; 65
    1604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	bc 01       	movw	r22, r24
    160e:	cd 01       	movw	r24, r26
    1610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	9e af       	std	Y+62, r25	; 0x3e
    161a:	8d af       	std	Y+61, r24	; 0x3d
    161c:	0f c0       	rjmp	.+30     	; 0x163c <LCD_sendCommand+0x404>
    161e:	89 e1       	ldi	r24, 0x19	; 25
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	9c af       	std	Y+60, r25	; 0x3c
    1624:	8b af       	std	Y+59, r24	; 0x3b
    1626:	8b ad       	ldd	r24, Y+59	; 0x3b
    1628:	9c ad       	ldd	r25, Y+60	; 0x3c
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <LCD_sendCommand+0x3f2>
    162e:	9c af       	std	Y+60, r25	; 0x3c
    1630:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1632:	8d ad       	ldd	r24, Y+61	; 0x3d
    1634:	9e ad       	ldd	r25, Y+62	; 0x3e
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	9e af       	std	Y+62, r25	; 0x3e
    163a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163c:	8d ad       	ldd	r24, Y+61	; 0x3d
    163e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	69 f7       	brne	.-38     	; 0x161e <LCD_sendCommand+0x3e6>
    1644:	16 c0       	rjmp	.+44     	; 0x1672 <LCD_sendCommand+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1646:	fe 01       	movw	r30, r28
    1648:	ff 96       	adiw	r30, 0x3f	; 63
    164a:	60 81       	ld	r22, Z
    164c:	71 81       	ldd	r23, Z+1	; 0x01
    164e:	82 81       	ldd	r24, Z+2	; 0x02
    1650:	93 81       	ldd	r25, Z+3	; 0x03
    1652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	9e af       	std	Y+62, r25	; 0x3e
    165c:	8d af       	std	Y+61, r24	; 0x3d
    165e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1660:	9e ad       	ldd	r25, Y+62	; 0x3e
    1662:	9a af       	std	Y+58, r25	; 0x3a
    1664:	89 af       	std	Y+57, r24	; 0x39
    1666:	89 ad       	ldd	r24, Y+57	; 0x39
    1668:	9a ad       	ldd	r25, Y+58	; 0x3a
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <LCD_sendCommand+0x432>
    166e:	9a af       	std	Y+58, r25	; 0x3a
    1670:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1672:	ab e3       	ldi	r26, 0x3B	; 59
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	eb e3       	ldi	r30, 0x3B	; 59
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	8b 7f       	andi	r24, 0xFB	; 251
    167e:	8c 93       	st	X, r24
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a0 e8       	ldi	r26, 0x80	; 128
    1686:	bf e3       	ldi	r27, 0x3F	; 63
    1688:	8d ab       	std	Y+53, r24	; 0x35
    168a:	9e ab       	std	Y+54, r25	; 0x36
    168c:	af ab       	std	Y+55, r26	; 0x37
    168e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1690:	6d a9       	ldd	r22, Y+53	; 0x35
    1692:	7e a9       	ldd	r23, Y+54	; 0x36
    1694:	8f a9       	ldd	r24, Y+55	; 0x37
    1696:	98 ad       	ldd	r25, Y+56	; 0x38
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	4a e7       	ldi	r20, 0x7A	; 122
    169e:	53 e4       	ldi	r21, 0x43	; 67
    16a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	89 ab       	std	Y+49, r24	; 0x31
    16aa:	9a ab       	std	Y+50, r25	; 0x32
    16ac:	ab ab       	std	Y+51, r26	; 0x33
    16ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16b0:	69 a9       	ldd	r22, Y+49	; 0x31
    16b2:	7a a9       	ldd	r23, Y+50	; 0x32
    16b4:	8b a9       	ldd	r24, Y+51	; 0x33
    16b6:	9c a9       	ldd	r25, Y+52	; 0x34
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c4:	88 23       	and	r24, r24
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <LCD_sendCommand+0x49a>
		__ticks = 1;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	98 ab       	std	Y+48, r25	; 0x30
    16ce:	8f a7       	std	Y+47, r24	; 0x2f
    16d0:	3f c0       	rjmp	.+126    	; 0x1750 <LCD_sendCommand+0x518>
	else if (__tmp > 65535)
    16d2:	69 a9       	ldd	r22, Y+49	; 0x31
    16d4:	7a a9       	ldd	r23, Y+50	; 0x32
    16d6:	8b a9       	ldd	r24, Y+51	; 0x33
    16d8:	9c a9       	ldd	r25, Y+52	; 0x34
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	3f ef       	ldi	r19, 0xFF	; 255
    16de:	4f e7       	ldi	r20, 0x7F	; 127
    16e0:	57 e4       	ldi	r21, 0x47	; 71
    16e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e6:	18 16       	cp	r1, r24
    16e8:	4c f5       	brge	.+82     	; 0x173c <LCD_sendCommand+0x504>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ea:	6d a9       	ldd	r22, Y+53	; 0x35
    16ec:	7e a9       	ldd	r23, Y+54	; 0x36
    16ee:	8f a9       	ldd	r24, Y+55	; 0x37
    16f0:	98 ad       	ldd	r25, Y+56	; 0x38
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e2       	ldi	r20, 0x20	; 32
    16f8:	51 e4       	ldi	r21, 0x41	; 65
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	98 ab       	std	Y+48, r25	; 0x30
    1710:	8f a7       	std	Y+47, r24	; 0x2f
    1712:	0f c0       	rjmp	.+30     	; 0x1732 <LCD_sendCommand+0x4fa>
    1714:	89 e1       	ldi	r24, 0x19	; 25
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9e a7       	std	Y+46, r25	; 0x2e
    171a:	8d a7       	std	Y+45, r24	; 0x2d
    171c:	8d a5       	ldd	r24, Y+45	; 0x2d
    171e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <LCD_sendCommand+0x4e8>
    1724:	9e a7       	std	Y+46, r25	; 0x2e
    1726:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1728:	8f a5       	ldd	r24, Y+47	; 0x2f
    172a:	98 a9       	ldd	r25, Y+48	; 0x30
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	98 ab       	std	Y+48, r25	; 0x30
    1730:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1732:	8f a5       	ldd	r24, Y+47	; 0x2f
    1734:	98 a9       	ldd	r25, Y+48	; 0x30
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	69 f7       	brne	.-38     	; 0x1714 <LCD_sendCommand+0x4dc>
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <LCD_sendCommand+0x52c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173c:	69 a9       	ldd	r22, Y+49	; 0x31
    173e:	7a a9       	ldd	r23, Y+50	; 0x32
    1740:	8b a9       	ldd	r24, Y+51	; 0x33
    1742:	9c a9       	ldd	r25, Y+52	; 0x34
    1744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	98 ab       	std	Y+48, r25	; 0x30
    174e:	8f a7       	std	Y+47, r24	; 0x2f
    1750:	8f a5       	ldd	r24, Y+47	; 0x2f
    1752:	98 a9       	ldd	r25, Y+48	; 0x30
    1754:	9c a7       	std	Y+44, r25	; 0x2c
    1756:	8b a7       	std	Y+43, r24	; 0x2b
    1758:	8b a5       	ldd	r24, Y+43	; 0x2b
    175a:	9c a5       	ldd	r25, Y+44	; 0x2c
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <LCD_sendCommand+0x524>
    1760:	9c a7       	std	Y+44, r25	; 0x2c
    1762:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1764:	ab e3       	ldi	r26, 0x3B	; 59
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	eb e3       	ldi	r30, 0x3B	; 59
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	84 60       	ori	r24, 0x04	; 4
    1770:	8c 93       	st	X, r24
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a0 e8       	ldi	r26, 0x80	; 128
    1778:	bf e3       	ldi	r27, 0x3F	; 63
    177a:	8f a3       	std	Y+39, r24	; 0x27
    177c:	98 a7       	std	Y+40, r25	; 0x28
    177e:	a9 a7       	std	Y+41, r26	; 0x29
    1780:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1782:	6f a1       	ldd	r22, Y+39	; 0x27
    1784:	78 a5       	ldd	r23, Y+40	; 0x28
    1786:	89 a5       	ldd	r24, Y+41	; 0x29
    1788:	9a a5       	ldd	r25, Y+42	; 0x2a
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	4a e7       	ldi	r20, 0x7A	; 122
    1790:	53 e4       	ldi	r21, 0x43	; 67
    1792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	8b a3       	std	Y+35, r24	; 0x23
    179c:	9c a3       	std	Y+36, r25	; 0x24
    179e:	ad a3       	std	Y+37, r26	; 0x25
    17a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17a2:	6b a1       	ldd	r22, Y+35	; 0x23
    17a4:	7c a1       	ldd	r23, Y+36	; 0x24
    17a6:	8d a1       	ldd	r24, Y+37	; 0x25
    17a8:	9e a1       	ldd	r25, Y+38	; 0x26
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e8       	ldi	r20, 0x80	; 128
    17b0:	5f e3       	ldi	r21, 0x3F	; 63
    17b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b6:	88 23       	and	r24, r24
    17b8:	2c f4       	brge	.+10     	; 0x17c4 <LCD_sendCommand+0x58c>
		__ticks = 1;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	9a a3       	std	Y+34, r25	; 0x22
    17c0:	89 a3       	std	Y+33, r24	; 0x21
    17c2:	3f c0       	rjmp	.+126    	; 0x1842 <LCD_sendCommand+0x60a>
	else if (__tmp > 65535)
    17c4:	6b a1       	ldd	r22, Y+35	; 0x23
    17c6:	7c a1       	ldd	r23, Y+36	; 0x24
    17c8:	8d a1       	ldd	r24, Y+37	; 0x25
    17ca:	9e a1       	ldd	r25, Y+38	; 0x26
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	3f ef       	ldi	r19, 0xFF	; 255
    17d0:	4f e7       	ldi	r20, 0x7F	; 127
    17d2:	57 e4       	ldi	r21, 0x47	; 71
    17d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d8:	18 16       	cp	r1, r24
    17da:	4c f5       	brge	.+82     	; 0x182e <LCD_sendCommand+0x5f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17dc:	6f a1       	ldd	r22, Y+39	; 0x27
    17de:	78 a5       	ldd	r23, Y+40	; 0x28
    17e0:	89 a5       	ldd	r24, Y+41	; 0x29
    17e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e2       	ldi	r20, 0x20	; 32
    17ea:	51 e4       	ldi	r21, 0x41	; 65
    17ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	9a a3       	std	Y+34, r25	; 0x22
    1802:	89 a3       	std	Y+33, r24	; 0x21
    1804:	0f c0       	rjmp	.+30     	; 0x1824 <LCD_sendCommand+0x5ec>
    1806:	89 e1       	ldi	r24, 0x19	; 25
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	98 a3       	std	Y+32, r25	; 0x20
    180c:	8f 8f       	std	Y+31, r24	; 0x1f
    180e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1810:	98 a1       	ldd	r25, Y+32	; 0x20
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <LCD_sendCommand+0x5da>
    1816:	98 a3       	std	Y+32, r25	; 0x20
    1818:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181a:	89 a1       	ldd	r24, Y+33	; 0x21
    181c:	9a a1       	ldd	r25, Y+34	; 0x22
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	9a a3       	std	Y+34, r25	; 0x22
    1822:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1824:	89 a1       	ldd	r24, Y+33	; 0x21
    1826:	9a a1       	ldd	r25, Y+34	; 0x22
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	69 f7       	brne	.-38     	; 0x1806 <LCD_sendCommand+0x5ce>
    182c:	14 c0       	rjmp	.+40     	; 0x1856 <LCD_sendCommand+0x61e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182e:	6b a1       	ldd	r22, Y+35	; 0x23
    1830:	7c a1       	ldd	r23, Y+36	; 0x24
    1832:	8d a1       	ldd	r24, Y+37	; 0x25
    1834:	9e a1       	ldd	r25, Y+38	; 0x26
    1836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	9a a3       	std	Y+34, r25	; 0x22
    1840:	89 a3       	std	Y+33, r24	; 0x21
    1842:	89 a1       	ldd	r24, Y+33	; 0x21
    1844:	9a a1       	ldd	r25, Y+34	; 0x22
    1846:	9e 8f       	std	Y+30, r25	; 0x1e
    1848:	8d 8f       	std	Y+29, r24	; 0x1d
    184a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    184c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <LCD_sendCommand+0x616>
    1852:	9e 8f       	std	Y+30, r25	; 0x1e
    1854:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
	LCD_DATA_PORT = (LCD_DATA_PORT & ~((1 << D4) | (1 << D5) | (1 << D6) | (1 << D7))) | ((command & 0x0F)<<(D4));
    1856:	ab e3       	ldi	r26, 0x3B	; 59
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	eb e3       	ldi	r30, 0x3B	; 59
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	28 2f       	mov	r18, r24
    1862:	27 78       	andi	r18, 0x87	; 135
    1864:	fe 01       	movw	r30, r28
    1866:	ed 59       	subi	r30, 0x9D	; 157
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	80 81       	ld	r24, Z
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	8f 70       	andi	r24, 0x0F	; 15
    1872:	90 70       	andi	r25, 0x00	; 0
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	82 2b       	or	r24, r18
    1882:	8c 93       	st	X, r24
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a0 e8       	ldi	r26, 0x80	; 128
    188a:	bf e3       	ldi	r27, 0x3F	; 63
    188c:	89 8f       	std	Y+25, r24	; 0x19
    188e:	9a 8f       	std	Y+26, r25	; 0x1a
    1890:	ab 8f       	std	Y+27, r26	; 0x1b
    1892:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1894:	69 8d       	ldd	r22, Y+25	; 0x19
    1896:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1898:	8b 8d       	ldd	r24, Y+27	; 0x1b
    189a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	4a e7       	ldi	r20, 0x7A	; 122
    18a2:	53 e4       	ldi	r21, 0x43	; 67
    18a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	8d 8b       	std	Y+21, r24	; 0x15
    18ae:	9e 8b       	std	Y+22, r25	; 0x16
    18b0:	af 8b       	std	Y+23, r26	; 0x17
    18b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18b4:	6d 89       	ldd	r22, Y+21	; 0x15
    18b6:	7e 89       	ldd	r23, Y+22	; 0x16
    18b8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ba:	98 8d       	ldd	r25, Y+24	; 0x18
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e8       	ldi	r20, 0x80	; 128
    18c2:	5f e3       	ldi	r21, 0x3F	; 63
    18c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c8:	88 23       	and	r24, r24
    18ca:	2c f4       	brge	.+10     	; 0x18d6 <LCD_sendCommand+0x69e>
		__ticks = 1;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	9c 8b       	std	Y+20, r25	; 0x14
    18d2:	8b 8b       	std	Y+19, r24	; 0x13
    18d4:	3f c0       	rjmp	.+126    	; 0x1954 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    18d6:	6d 89       	ldd	r22, Y+21	; 0x15
    18d8:	7e 89       	ldd	r23, Y+22	; 0x16
    18da:	8f 89       	ldd	r24, Y+23	; 0x17
    18dc:	98 8d       	ldd	r25, Y+24	; 0x18
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	3f ef       	ldi	r19, 0xFF	; 255
    18e2:	4f e7       	ldi	r20, 0x7F	; 127
    18e4:	57 e4       	ldi	r21, 0x47	; 71
    18e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ea:	18 16       	cp	r1, r24
    18ec:	4c f5       	brge	.+82     	; 0x1940 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ee:	69 8d       	ldd	r22, Y+25	; 0x19
    18f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e2       	ldi	r20, 0x20	; 32
    18fc:	51 e4       	ldi	r21, 0x41	; 65
    18fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	bc 01       	movw	r22, r24
    1908:	cd 01       	movw	r24, r26
    190a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	9c 8b       	std	Y+20, r25	; 0x14
    1914:	8b 8b       	std	Y+19, r24	; 0x13
    1916:	0f c0       	rjmp	.+30     	; 0x1936 <LCD_sendCommand+0x6fe>
    1918:	89 e1       	ldi	r24, 0x19	; 25
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	9a 8b       	std	Y+18, r25	; 0x12
    191e:	89 8b       	std	Y+17, r24	; 0x11
    1920:	89 89       	ldd	r24, Y+17	; 0x11
    1922:	9a 89       	ldd	r25, Y+18	; 0x12
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <LCD_sendCommand+0x6ec>
    1928:	9a 8b       	std	Y+18, r25	; 0x12
    192a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192c:	8b 89       	ldd	r24, Y+19	; 0x13
    192e:	9c 89       	ldd	r25, Y+20	; 0x14
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	9c 8b       	std	Y+20, r25	; 0x14
    1934:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1936:	8b 89       	ldd	r24, Y+19	; 0x13
    1938:	9c 89       	ldd	r25, Y+20	; 0x14
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	69 f7       	brne	.-38     	; 0x1918 <LCD_sendCommand+0x6e0>
    193e:	14 c0       	rjmp	.+40     	; 0x1968 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1940:	6d 89       	ldd	r22, Y+21	; 0x15
    1942:	7e 89       	ldd	r23, Y+22	; 0x16
    1944:	8f 89       	ldd	r24, Y+23	; 0x17
    1946:	98 8d       	ldd	r25, Y+24	; 0x18
    1948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9c 8b       	std	Y+20, r25	; 0x14
    1952:	8b 8b       	std	Y+19, r24	; 0x13
    1954:	8b 89       	ldd	r24, Y+19	; 0x13
    1956:	9c 89       	ldd	r25, Y+20	; 0x14
    1958:	98 8b       	std	Y+16, r25	; 0x10
    195a:	8f 87       	std	Y+15, r24	; 0x0f
    195c:	8f 85       	ldd	r24, Y+15	; 0x0f
    195e:	98 89       	ldd	r25, Y+16	; 0x10
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	f1 f7       	brne	.-4      	; 0x1960 <LCD_sendCommand+0x728>
    1964:	98 8b       	std	Y+16, r25	; 0x10
    1966:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1968:	ab e3       	ldi	r26, 0x3B	; 59
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	eb e3       	ldi	r30, 0x3B	; 59
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	8b 7f       	andi	r24, 0xFB	; 251
    1974:	8c 93       	st	X, r24
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	a0 e8       	ldi	r26, 0x80	; 128
    197c:	bf e3       	ldi	r27, 0x3F	; 63
    197e:	8b 87       	std	Y+11, r24	; 0x0b
    1980:	9c 87       	std	Y+12, r25	; 0x0c
    1982:	ad 87       	std	Y+13, r26	; 0x0d
    1984:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1986:	6b 85       	ldd	r22, Y+11	; 0x0b
    1988:	7c 85       	ldd	r23, Y+12	; 0x0c
    198a:	8d 85       	ldd	r24, Y+13	; 0x0d
    198c:	9e 85       	ldd	r25, Y+14	; 0x0e
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	4a e7       	ldi	r20, 0x7A	; 122
    1994:	53 e4       	ldi	r21, 0x43	; 67
    1996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	8f 83       	std	Y+7, r24	; 0x07
    19a0:	98 87       	std	Y+8, r25	; 0x08
    19a2:	a9 87       	std	Y+9, r26	; 0x09
    19a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a6:	6f 81       	ldd	r22, Y+7	; 0x07
    19a8:	78 85       	ldd	r23, Y+8	; 0x08
    19aa:	89 85       	ldd	r24, Y+9	; 0x09
    19ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e8       	ldi	r20, 0x80	; 128
    19b4:	5f e3       	ldi	r21, 0x3F	; 63
    19b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ba:	88 23       	and	r24, r24
    19bc:	2c f4       	brge	.+10     	; 0x19c8 <LCD_sendCommand+0x790>
		__ticks = 1;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	9e 83       	std	Y+6, r25	; 0x06
    19c4:	8d 83       	std	Y+5, r24	; 0x05
    19c6:	3f c0       	rjmp	.+126    	; 0x1a46 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    19c8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ca:	78 85       	ldd	r23, Y+8	; 0x08
    19cc:	89 85       	ldd	r24, Y+9	; 0x09
    19ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	3f ef       	ldi	r19, 0xFF	; 255
    19d4:	4f e7       	ldi	r20, 0x7F	; 127
    19d6:	57 e4       	ldi	r21, 0x47	; 71
    19d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19dc:	18 16       	cp	r1, r24
    19de:	4c f5       	brge	.+82     	; 0x1a32 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e2       	ldi	r20, 0x20	; 32
    19ee:	51 e4       	ldi	r21, 0x41	; 65
    19f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	bc 01       	movw	r22, r24
    19fa:	cd 01       	movw	r24, r26
    19fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9e 83       	std	Y+6, r25	; 0x06
    1a06:	8d 83       	std	Y+5, r24	; 0x05
    1a08:	0f c0       	rjmp	.+30     	; 0x1a28 <LCD_sendCommand+0x7f0>
    1a0a:	89 e1       	ldi	r24, 0x19	; 25
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	9c 83       	std	Y+4, r25	; 0x04
    1a10:	8b 83       	std	Y+3, r24	; 0x03
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <LCD_sendCommand+0x7de>
    1a1a:	9c 83       	std	Y+4, r25	; 0x04
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a20:	9e 81       	ldd	r25, Y+6	; 0x06
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	69 f7       	brne	.-38     	; 0x1a0a <LCD_sendCommand+0x7d2>
    1a30:	14 c0       	rjmp	.+40     	; 0x1a5a <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a32:	6f 81       	ldd	r22, Y+7	; 0x07
    1a34:	78 85       	ldd	r23, Y+8	; 0x08
    1a36:	89 85       	ldd	r24, Y+9	; 0x09
    1a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	8d 81       	ldd	r24, Y+5	; 0x05
    1a48:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4a:	9a 83       	std	Y+2, r25	; 0x02
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <LCD_sendCommand+0x81a>
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1a5a:	cd 59       	subi	r28, 0x9D	; 157
    1a5c:	df 4f       	sbci	r29, 0xFF	; 255
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	1f 91       	pop	r17
    1a6e:	0f 91       	pop	r16
    1a70:	08 95       	ret

00001a72 <LCD_displayCharacter>:

/*---------------------------------------------------------------------------------*/

void LCD_displayCharacter(uint8 data)
{
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	c3 56       	subi	r28, 0x63	; 99
    1a80:	d0 40       	sbci	r29, 0x00	; 0
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	ed 59       	subi	r30, 0x9D	; 157
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1a94:	ab e3       	ldi	r26, 0x3B	; 59
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	eb e3       	ldi	r30, 0x3B	; 59
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	82 60       	ori	r24, 0x02	; 2
    1aa0:	8c 93       	st	X, r24
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e1 5a       	subi	r30, 0xA1	; 161
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a0 e8       	ldi	r26, 0x80	; 128
    1aae:	bf e3       	ldi	r27, 0x3F	; 63
    1ab0:	80 83       	st	Z, r24
    1ab2:	91 83       	std	Z+1, r25	; 0x01
    1ab4:	a2 83       	std	Z+2, r26	; 0x02
    1ab6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab8:	8e 01       	movw	r16, r28
    1aba:	05 5a       	subi	r16, 0xA5	; 165
    1abc:	1f 4f       	sbci	r17, 0xFF	; 255
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e1 5a       	subi	r30, 0xA1	; 161
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	60 81       	ld	r22, Z
    1ac6:	71 81       	ldd	r23, Z+1	; 0x01
    1ac8:	82 81       	ldd	r24, Z+2	; 0x02
    1aca:	93 81       	ldd	r25, Z+3	; 0x03
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	4a e7       	ldi	r20, 0x7A	; 122
    1ad2:	53 e4       	ldi	r21, 0x43	; 67
    1ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	f8 01       	movw	r30, r16
    1ade:	80 83       	st	Z, r24
    1ae0:	91 83       	std	Z+1, r25	; 0x01
    1ae2:	a2 83       	std	Z+2, r26	; 0x02
    1ae4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e5 5a       	subi	r30, 0xA5	; 165
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	60 81       	ld	r22, Z
    1aee:	71 81       	ldd	r23, Z+1	; 0x01
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	93 81       	ldd	r25, Z+3	; 0x03
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e8       	ldi	r20, 0x80	; 128
    1afa:	5f e3       	ldi	r21, 0x3F	; 63
    1afc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b00:	88 23       	and	r24, r24
    1b02:	44 f4       	brge	.+16     	; 0x1b14 <LCD_displayCharacter+0xa2>
		__ticks = 1;
    1b04:	fe 01       	movw	r30, r28
    1b06:	e7 5a       	subi	r30, 0xA7	; 167
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	91 83       	std	Z+1, r25	; 0x01
    1b10:	80 83       	st	Z, r24
    1b12:	64 c0       	rjmp	.+200    	; 0x1bdc <LCD_displayCharacter+0x16a>
	else if (__tmp > 65535)
    1b14:	fe 01       	movw	r30, r28
    1b16:	e5 5a       	subi	r30, 0xA5	; 165
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	60 81       	ld	r22, Z
    1b1c:	71 81       	ldd	r23, Z+1	; 0x01
    1b1e:	82 81       	ldd	r24, Z+2	; 0x02
    1b20:	93 81       	ldd	r25, Z+3	; 0x03
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	3f ef       	ldi	r19, 0xFF	; 255
    1b26:	4f e7       	ldi	r20, 0x7F	; 127
    1b28:	57 e4       	ldi	r21, 0x47	; 71
    1b2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b2e:	18 16       	cp	r1, r24
    1b30:	0c f0       	brlt	.+2      	; 0x1b34 <LCD_displayCharacter+0xc2>
    1b32:	43 c0       	rjmp	.+134    	; 0x1bba <LCD_displayCharacter+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b34:	fe 01       	movw	r30, r28
    1b36:	e1 5a       	subi	r30, 0xA1	; 161
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e2       	ldi	r20, 0x20	; 32
    1b48:	51 e4       	ldi	r21, 0x41	; 65
    1b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	8e 01       	movw	r16, r28
    1b54:	07 5a       	subi	r16, 0xA7	; 167
    1b56:	1f 4f       	sbci	r17, 0xFF	; 255
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	f8 01       	movw	r30, r16
    1b66:	91 83       	std	Z+1, r25	; 0x01
    1b68:	80 83       	st	Z, r24
    1b6a:	1f c0       	rjmp	.+62     	; 0x1baa <LCD_displayCharacter+0x138>
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	e9 5a       	subi	r30, 0xA9	; 169
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	89 e1       	ldi	r24, 0x19	; 25
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	80 83       	st	Z, r24
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	e9 5a       	subi	r30, 0xA9	; 169
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	80 81       	ld	r24, Z
    1b82:	91 81       	ldd	r25, Z+1	; 0x01
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <LCD_displayCharacter+0x112>
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e9 5a       	subi	r30, 0xA9	; 169
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	91 83       	std	Z+1, r25	; 0x01
    1b90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b92:	de 01       	movw	r26, r28
    1b94:	a7 5a       	subi	r26, 0xA7	; 167
    1b96:	bf 4f       	sbci	r27, 0xFF	; 255
    1b98:	fe 01       	movw	r30, r28
    1b9a:	e7 5a       	subi	r30, 0xA7	; 167
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	80 81       	ld	r24, Z
    1ba0:	91 81       	ldd	r25, Z+1	; 0x01
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	11 96       	adiw	r26, 0x01	; 1
    1ba6:	9c 93       	st	X, r25
    1ba8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1baa:	fe 01       	movw	r30, r28
    1bac:	e7 5a       	subi	r30, 0xA7	; 167
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	d1 f6       	brne	.-76     	; 0x1b6c <LCD_displayCharacter+0xfa>
    1bb8:	27 c0       	rjmp	.+78     	; 0x1c08 <LCD_displayCharacter+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bba:	8e 01       	movw	r16, r28
    1bbc:	07 5a       	subi	r16, 0xA7	; 167
    1bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	e5 5a       	subi	r30, 0xA5	; 165
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	93 81       	ldd	r25, Z+3	; 0x03
    1bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	80 83       	st	Z, r24
    1bdc:	de 01       	movw	r26, r28
    1bde:	ab 5a       	subi	r26, 0xAB	; 171
    1be0:	bf 4f       	sbci	r27, 0xFF	; 255
    1be2:	fe 01       	movw	r30, r28
    1be4:	e7 5a       	subi	r30, 0xA7	; 167
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
    1bec:	8d 93       	st	X+, r24
    1bee:	9c 93       	st	X, r25
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	eb 5a       	subi	r30, 0xAB	; 171
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	80 81       	ld	r24, Z
    1bf8:	91 81       	ldd	r25, Z+1	; 0x01
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD_displayCharacter+0x188>
    1bfe:	fe 01       	movw	r30, r28
    1c00:	eb 5a       	subi	r30, 0xAB	; 171
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1c08:	ab e3       	ldi	r26, 0x3B	; 59
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	eb e3       	ldi	r30, 0x3B	; 59
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	84 60       	ori	r24, 0x04	; 4
    1c14:	8c 93       	st	X, r24
    1c16:	fe 01       	movw	r30, r28
    1c18:	ef 5a       	subi	r30, 0xAF	; 175
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	a0 e8       	ldi	r26, 0x80	; 128
    1c22:	bf e3       	ldi	r27, 0x3F	; 63
    1c24:	80 83       	st	Z, r24
    1c26:	91 83       	std	Z+1, r25	; 0x01
    1c28:	a2 83       	std	Z+2, r26	; 0x02
    1c2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2c:	8e 01       	movw	r16, r28
    1c2e:	03 5b       	subi	r16, 0xB3	; 179
    1c30:	1f 4f       	sbci	r17, 0xFF	; 255
    1c32:	fe 01       	movw	r30, r28
    1c34:	ef 5a       	subi	r30, 0xAF	; 175
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	60 81       	ld	r22, Z
    1c3a:	71 81       	ldd	r23, Z+1	; 0x01
    1c3c:	82 81       	ldd	r24, Z+2	; 0x02
    1c3e:	93 81       	ldd	r25, Z+3	; 0x03
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	4a e7       	ldi	r20, 0x7A	; 122
    1c46:	53 e4       	ldi	r21, 0x43	; 67
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	f8 01       	movw	r30, r16
    1c52:	80 83       	st	Z, r24
    1c54:	91 83       	std	Z+1, r25	; 0x01
    1c56:	a2 83       	std	Z+2, r26	; 0x02
    1c58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	e3 5b       	subi	r30, 0xB3	; 179
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	60 81       	ld	r22, Z
    1c62:	71 81       	ldd	r23, Z+1	; 0x01
    1c64:	82 81       	ldd	r24, Z+2	; 0x02
    1c66:	93 81       	ldd	r25, Z+3	; 0x03
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e8       	ldi	r20, 0x80	; 128
    1c6e:	5f e3       	ldi	r21, 0x3F	; 63
    1c70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c74:	88 23       	and	r24, r24
    1c76:	44 f4       	brge	.+16     	; 0x1c88 <LCD_displayCharacter+0x216>
		__ticks = 1;
    1c78:	fe 01       	movw	r30, r28
    1c7a:	e5 5b       	subi	r30, 0xB5	; 181
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	80 83       	st	Z, r24
    1c86:	64 c0       	rjmp	.+200    	; 0x1d50 <LCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e3 5b       	subi	r30, 0xB3	; 179
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	60 81       	ld	r22, Z
    1c90:	71 81       	ldd	r23, Z+1	; 0x01
    1c92:	82 81       	ldd	r24, Z+2	; 0x02
    1c94:	93 81       	ldd	r25, Z+3	; 0x03
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	3f ef       	ldi	r19, 0xFF	; 255
    1c9a:	4f e7       	ldi	r20, 0x7F	; 127
    1c9c:	57 e4       	ldi	r21, 0x47	; 71
    1c9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca2:	18 16       	cp	r1, r24
    1ca4:	0c f0       	brlt	.+2      	; 0x1ca8 <LCD_displayCharacter+0x236>
    1ca6:	43 c0       	rjmp	.+134    	; 0x1d2e <LCD_displayCharacter+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca8:	fe 01       	movw	r30, r28
    1caa:	ef 5a       	subi	r30, 0xAF	; 175
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e2       	ldi	r20, 0x20	; 32
    1cbc:	51 e4       	ldi	r21, 0x41	; 65
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	8e 01       	movw	r16, r28
    1cc8:	05 5b       	subi	r16, 0xB5	; 181
    1cca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	f8 01       	movw	r30, r16
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	80 83       	st	Z, r24
    1cde:	1f c0       	rjmp	.+62     	; 0x1d1e <LCD_displayCharacter+0x2ac>
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e7 5b       	subi	r30, 0xB7	; 183
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	89 e1       	ldi	r24, 0x19	; 25
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	80 83       	st	Z, r24
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e7 5b       	subi	r30, 0xB7	; 183
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	91 81       	ldd	r25, Z+1	; 0x01
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <LCD_displayCharacter+0x286>
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e7 5b       	subi	r30, 0xB7	; 183
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d06:	de 01       	movw	r26, r28
    1d08:	a5 5b       	subi	r26, 0xB5	; 181
    1d0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e5 5b       	subi	r30, 0xB5	; 181
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	11 96       	adiw	r26, 0x01	; 1
    1d1a:	9c 93       	st	X, r25
    1d1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e5 5b       	subi	r30, 0xB5	; 181
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	80 81       	ld	r24, Z
    1d26:	91 81       	ldd	r25, Z+1	; 0x01
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	d1 f6       	brne	.-76     	; 0x1ce0 <LCD_displayCharacter+0x26e>
    1d2c:	27 c0       	rjmp	.+78     	; 0x1d7c <LCD_displayCharacter+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2e:	8e 01       	movw	r16, r28
    1d30:	05 5b       	subi	r16, 0xB5	; 181
    1d32:	1f 4f       	sbci	r17, 0xFF	; 255
    1d34:	fe 01       	movw	r30, r28
    1d36:	e3 5b       	subi	r30, 0xB3	; 179
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	60 81       	ld	r22, Z
    1d3c:	71 81       	ldd	r23, Z+1	; 0x01
    1d3e:	82 81       	ldd	r24, Z+2	; 0x02
    1d40:	93 81       	ldd	r25, Z+3	; 0x03
    1d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	91 83       	std	Z+1, r25	; 0x01
    1d4e:	80 83       	st	Z, r24
    1d50:	de 01       	movw	r26, r28
    1d52:	a9 5b       	subi	r26, 0xB9	; 185
    1d54:	bf 4f       	sbci	r27, 0xFF	; 255
    1d56:	fe 01       	movw	r30, r28
    1d58:	e5 5b       	subi	r30, 0xB5	; 181
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	8d 93       	st	X+, r24
    1d62:	9c 93       	st	X, r25
    1d64:	fe 01       	movw	r30, r28
    1d66:	e9 5b       	subi	r30, 0xB9	; 185
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	80 81       	ld	r24, Z
    1d6c:	91 81       	ldd	r25, Z+1	; 0x01
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCD_displayCharacter+0x2fc>
    1d72:	fe 01       	movw	r30, r28
    1d74:	e9 5b       	subi	r30, 0xB9	; 185
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
	LCD_DATA_PORT = (LCD_DATA_PORT & ~((1 << D4) | (1 << D5) | (1 << D6) | (1 << D7))) | ((data & 0xF0)>>(4-D4));
    1d7c:	ab e3       	ldi	r26, 0x3B	; 59
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	eb e3       	ldi	r30, 0x3B	; 59
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	28 2f       	mov	r18, r24
    1d88:	27 78       	andi	r18, 0x87	; 135
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	ed 59       	subi	r30, 0x9D	; 157
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	80 81       	ld	r24, Z
    1d92:	88 2f       	mov	r24, r24
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	80 7f       	andi	r24, 0xF0	; 240
    1d98:	90 70       	andi	r25, 0x00	; 0
    1d9a:	95 95       	asr	r25
    1d9c:	87 95       	ror	r24
    1d9e:	82 2b       	or	r24, r18
    1da0:	8c 93       	st	X, r24
    1da2:	fe 01       	movw	r30, r28
    1da4:	ed 5b       	subi	r30, 0xBD	; 189
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a0 e8       	ldi	r26, 0x80	; 128
    1dae:	bf e3       	ldi	r27, 0x3F	; 63
    1db0:	80 83       	st	Z, r24
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	a2 83       	std	Z+2, r26	; 0x02
    1db6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db8:	8e 01       	movw	r16, r28
    1dba:	01 5c       	subi	r16, 0xC1	; 193
    1dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	ed 5b       	subi	r30, 0xBD	; 189
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	4a e7       	ldi	r20, 0x7A	; 122
    1dd2:	53 e4       	ldi	r21, 0x43	; 67
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	f8 01       	movw	r30, r16
    1dde:	80 83       	st	Z, r24
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	a2 83       	std	Z+2, r26	; 0x02
    1de4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1de6:	fe 01       	movw	r30, r28
    1de8:	ff 96       	adiw	r30, 0x3f	; 63
    1dea:	60 81       	ld	r22, Z
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	2c f4       	brge	.+10     	; 0x1e0c <LCD_displayCharacter+0x39a>
		__ticks = 1;
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9e af       	std	Y+62, r25	; 0x3e
    1e08:	8d af       	std	Y+61, r24	; 0x3d
    1e0a:	46 c0       	rjmp	.+140    	; 0x1e98 <LCD_displayCharacter+0x426>
	else if (__tmp > 65535)
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	ff 96       	adiw	r30, 0x3f	; 63
    1e10:	60 81       	ld	r22, Z
    1e12:	71 81       	ldd	r23, Z+1	; 0x01
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	93 81       	ldd	r25, Z+3	; 0x03
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	4f e7       	ldi	r20, 0x7F	; 127
    1e1e:	57 e4       	ldi	r21, 0x47	; 71
    1e20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e24:	18 16       	cp	r1, r24
    1e26:	64 f5       	brge	.+88     	; 0x1e80 <LCD_displayCharacter+0x40e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e28:	fe 01       	movw	r30, r28
    1e2a:	ed 5b       	subi	r30, 0xBD	; 189
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	60 81       	ld	r22, Z
    1e30:	71 81       	ldd	r23, Z+1	; 0x01
    1e32:	82 81       	ldd	r24, Z+2	; 0x02
    1e34:	93 81       	ldd	r25, Z+3	; 0x03
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	51 e4       	ldi	r21, 0x41	; 65
    1e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	bc 01       	movw	r22, r24
    1e48:	cd 01       	movw	r24, r26
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e af       	std	Y+62, r25	; 0x3e
    1e54:	8d af       	std	Y+61, r24	; 0x3d
    1e56:	0f c0       	rjmp	.+30     	; 0x1e76 <LCD_displayCharacter+0x404>
    1e58:	89 e1       	ldi	r24, 0x19	; 25
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9c af       	std	Y+60, r25	; 0x3c
    1e5e:	8b af       	std	Y+59, r24	; 0x3b
    1e60:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e62:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <LCD_displayCharacter+0x3f2>
    1e68:	9c af       	std	Y+60, r25	; 0x3c
    1e6a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	9e af       	std	Y+62, r25	; 0x3e
    1e74:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e76:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e78:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	69 f7       	brne	.-38     	; 0x1e58 <LCD_displayCharacter+0x3e6>
    1e7e:	16 c0       	rjmp	.+44     	; 0x1eac <LCD_displayCharacter+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e80:	fe 01       	movw	r30, r28
    1e82:	ff 96       	adiw	r30, 0x3f	; 63
    1e84:	60 81       	ld	r22, Z
    1e86:	71 81       	ldd	r23, Z+1	; 0x01
    1e88:	82 81       	ldd	r24, Z+2	; 0x02
    1e8a:	93 81       	ldd	r25, Z+3	; 0x03
    1e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	9e af       	std	Y+62, r25	; 0x3e
    1e96:	8d af       	std	Y+61, r24	; 0x3d
    1e98:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e9c:	9a af       	std	Y+58, r25	; 0x3a
    1e9e:	89 af       	std	Y+57, r24	; 0x39
    1ea0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ea2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <LCD_displayCharacter+0x432>
    1ea8:	9a af       	std	Y+58, r25	; 0x3a
    1eaa:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1eac:	ab e3       	ldi	r26, 0x3B	; 59
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	eb e3       	ldi	r30, 0x3B	; 59
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8b 7f       	andi	r24, 0xFB	; 251
    1eb8:	8c 93       	st	X, r24
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	a0 e8       	ldi	r26, 0x80	; 128
    1ec0:	bf e3       	ldi	r27, 0x3F	; 63
    1ec2:	8d ab       	std	Y+53, r24	; 0x35
    1ec4:	9e ab       	std	Y+54, r25	; 0x36
    1ec6:	af ab       	std	Y+55, r26	; 0x37
    1ec8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eca:	6d a9       	ldd	r22, Y+53	; 0x35
    1ecc:	7e a9       	ldd	r23, Y+54	; 0x36
    1ece:	8f a9       	ldd	r24, Y+55	; 0x37
    1ed0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	4a e7       	ldi	r20, 0x7A	; 122
    1ed8:	53 e4       	ldi	r21, 0x43	; 67
    1eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	89 ab       	std	Y+49, r24	; 0x31
    1ee4:	9a ab       	std	Y+50, r25	; 0x32
    1ee6:	ab ab       	std	Y+51, r26	; 0x33
    1ee8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1eea:	69 a9       	ldd	r22, Y+49	; 0x31
    1eec:	7a a9       	ldd	r23, Y+50	; 0x32
    1eee:	8b a9       	ldd	r24, Y+51	; 0x33
    1ef0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e8       	ldi	r20, 0x80	; 128
    1ef8:	5f e3       	ldi	r21, 0x3F	; 63
    1efa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1efe:	88 23       	and	r24, r24
    1f00:	2c f4       	brge	.+10     	; 0x1f0c <LCD_displayCharacter+0x49a>
		__ticks = 1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	98 ab       	std	Y+48, r25	; 0x30
    1f08:	8f a7       	std	Y+47, r24	; 0x2f
    1f0a:	3f c0       	rjmp	.+126    	; 0x1f8a <LCD_displayCharacter+0x518>
	else if (__tmp > 65535)
    1f0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f10:	8b a9       	ldd	r24, Y+51	; 0x33
    1f12:	9c a9       	ldd	r25, Y+52	; 0x34
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	3f ef       	ldi	r19, 0xFF	; 255
    1f18:	4f e7       	ldi	r20, 0x7F	; 127
    1f1a:	57 e4       	ldi	r21, 0x47	; 71
    1f1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f20:	18 16       	cp	r1, r24
    1f22:	4c f5       	brge	.+82     	; 0x1f76 <LCD_displayCharacter+0x504>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f24:	6d a9       	ldd	r22, Y+53	; 0x35
    1f26:	7e a9       	ldd	r23, Y+54	; 0x36
    1f28:	8f a9       	ldd	r24, Y+55	; 0x37
    1f2a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e2       	ldi	r20, 0x20	; 32
    1f32:	51 e4       	ldi	r21, 0x41	; 65
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	bc 01       	movw	r22, r24
    1f3e:	cd 01       	movw	r24, r26
    1f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	98 ab       	std	Y+48, r25	; 0x30
    1f4a:	8f a7       	std	Y+47, r24	; 0x2f
    1f4c:	0f c0       	rjmp	.+30     	; 0x1f6c <LCD_displayCharacter+0x4fa>
    1f4e:	89 e1       	ldi	r24, 0x19	; 25
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	9e a7       	std	Y+46, r25	; 0x2e
    1f54:	8d a7       	std	Y+45, r24	; 0x2d
    1f56:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f58:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <LCD_displayCharacter+0x4e8>
    1f5e:	9e a7       	std	Y+46, r25	; 0x2e
    1f60:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f64:	98 a9       	ldd	r25, Y+48	; 0x30
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	98 ab       	std	Y+48, r25	; 0x30
    1f6a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	69 f7       	brne	.-38     	; 0x1f4e <LCD_displayCharacter+0x4dc>
    1f74:	14 c0       	rjmp	.+40     	; 0x1f9e <LCD_displayCharacter+0x52c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f76:	69 a9       	ldd	r22, Y+49	; 0x31
    1f78:	7a a9       	ldd	r23, Y+50	; 0x32
    1f7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	98 ab       	std	Y+48, r25	; 0x30
    1f88:	8f a7       	std	Y+47, r24	; 0x2f
    1f8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f8e:	9c a7       	std	Y+44, r25	; 0x2c
    1f90:	8b a7       	std	Y+43, r24	; 0x2b
    1f92:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f94:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <LCD_displayCharacter+0x524>
    1f9a:	9c a7       	std	Y+44, r25	; 0x2c
    1f9c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1f9e:	ab e3       	ldi	r26, 0x3B	; 59
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	eb e3       	ldi	r30, 0x3B	; 59
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	84 60       	ori	r24, 0x04	; 4
    1faa:	8c 93       	st	X, r24
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a0 e8       	ldi	r26, 0x80	; 128
    1fb2:	bf e3       	ldi	r27, 0x3F	; 63
    1fb4:	8f a3       	std	Y+39, r24	; 0x27
    1fb6:	98 a7       	std	Y+40, r25	; 0x28
    1fb8:	a9 a7       	std	Y+41, r26	; 0x29
    1fba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbc:	6f a1       	ldd	r22, Y+39	; 0x27
    1fbe:	78 a5       	ldd	r23, Y+40	; 0x28
    1fc0:	89 a5       	ldd	r24, Y+41	; 0x29
    1fc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	4a e7       	ldi	r20, 0x7A	; 122
    1fca:	53 e4       	ldi	r21, 0x43	; 67
    1fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	8b a3       	std	Y+35, r24	; 0x23
    1fd6:	9c a3       	std	Y+36, r25	; 0x24
    1fd8:	ad a3       	std	Y+37, r26	; 0x25
    1fda:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fdc:	6b a1       	ldd	r22, Y+35	; 0x23
    1fde:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e8       	ldi	r20, 0x80	; 128
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	2c f4       	brge	.+10     	; 0x1ffe <LCD_displayCharacter+0x58c>
		__ticks = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9a a3       	std	Y+34, r25	; 0x22
    1ffa:	89 a3       	std	Y+33, r24	; 0x21
    1ffc:	3f c0       	rjmp	.+126    	; 0x207c <LCD_displayCharacter+0x60a>
	else if (__tmp > 65535)
    1ffe:	6b a1       	ldd	r22, Y+35	; 0x23
    2000:	7c a1       	ldd	r23, Y+36	; 0x24
    2002:	8d a1       	ldd	r24, Y+37	; 0x25
    2004:	9e a1       	ldd	r25, Y+38	; 0x26
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	3f ef       	ldi	r19, 0xFF	; 255
    200a:	4f e7       	ldi	r20, 0x7F	; 127
    200c:	57 e4       	ldi	r21, 0x47	; 71
    200e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2012:	18 16       	cp	r1, r24
    2014:	4c f5       	brge	.+82     	; 0x2068 <LCD_displayCharacter+0x5f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2016:	6f a1       	ldd	r22, Y+39	; 0x27
    2018:	78 a5       	ldd	r23, Y+40	; 0x28
    201a:	89 a5       	ldd	r24, Y+41	; 0x29
    201c:	9a a5       	ldd	r25, Y+42	; 0x2a
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e2       	ldi	r20, 0x20	; 32
    2024:	51 e4       	ldi	r21, 0x41	; 65
    2026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	9a a3       	std	Y+34, r25	; 0x22
    203c:	89 a3       	std	Y+33, r24	; 0x21
    203e:	0f c0       	rjmp	.+30     	; 0x205e <LCD_displayCharacter+0x5ec>
    2040:	89 e1       	ldi	r24, 0x19	; 25
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	98 a3       	std	Y+32, r25	; 0x20
    2046:	8f 8f       	std	Y+31, r24	; 0x1f
    2048:	8f 8d       	ldd	r24, Y+31	; 0x1f
    204a:	98 a1       	ldd	r25, Y+32	; 0x20
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_displayCharacter+0x5da>
    2050:	98 a3       	std	Y+32, r25	; 0x20
    2052:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2054:	89 a1       	ldd	r24, Y+33	; 0x21
    2056:	9a a1       	ldd	r25, Y+34	; 0x22
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	9a a3       	std	Y+34, r25	; 0x22
    205c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205e:	89 a1       	ldd	r24, Y+33	; 0x21
    2060:	9a a1       	ldd	r25, Y+34	; 0x22
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	69 f7       	brne	.-38     	; 0x2040 <LCD_displayCharacter+0x5ce>
    2066:	14 c0       	rjmp	.+40     	; 0x2090 <LCD_displayCharacter+0x61e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2068:	6b a1       	ldd	r22, Y+35	; 0x23
    206a:	7c a1       	ldd	r23, Y+36	; 0x24
    206c:	8d a1       	ldd	r24, Y+37	; 0x25
    206e:	9e a1       	ldd	r25, Y+38	; 0x26
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9a a3       	std	Y+34, r25	; 0x22
    207a:	89 a3       	std	Y+33, r24	; 0x21
    207c:	89 a1       	ldd	r24, Y+33	; 0x21
    207e:	9a a1       	ldd	r25, Y+34	; 0x22
    2080:	9e 8f       	std	Y+30, r25	; 0x1e
    2082:	8d 8f       	std	Y+29, r24	; 0x1d
    2084:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2086:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <LCD_displayCharacter+0x616>
    208c:	9e 8f       	std	Y+30, r25	; 0x1e
    208e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
	LCD_DATA_PORT = (LCD_DATA_PORT & ~((1 << D4) | (1 << D5) | (1 << D6) | (1 << D7))) | ((data & 0x0F)<<(D4));
    2090:	ab e3       	ldi	r26, 0x3B	; 59
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	eb e3       	ldi	r30, 0x3B	; 59
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	28 2f       	mov	r18, r24
    209c:	27 78       	andi	r18, 0x87	; 135
    209e:	fe 01       	movw	r30, r28
    20a0:	ed 59       	subi	r30, 0x9D	; 157
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	80 81       	ld	r24, Z
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	8f 70       	andi	r24, 0x0F	; 15
    20ac:	90 70       	andi	r25, 0x00	; 0
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	82 2b       	or	r24, r18
    20bc:	8c 93       	st	X, r24
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a0 e8       	ldi	r26, 0x80	; 128
    20c4:	bf e3       	ldi	r27, 0x3F	; 63
    20c6:	89 8f       	std	Y+25, r24	; 0x19
    20c8:	9a 8f       	std	Y+26, r25	; 0x1a
    20ca:	ab 8f       	std	Y+27, r26	; 0x1b
    20cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	69 8d       	ldd	r22, Y+25	; 0x19
    20d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	4a e7       	ldi	r20, 0x7A	; 122
    20dc:	53 e4       	ldi	r21, 0x43	; 67
    20de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8d 8b       	std	Y+21, r24	; 0x15
    20e8:	9e 8b       	std	Y+22, r25	; 0x16
    20ea:	af 8b       	std	Y+23, r26	; 0x17
    20ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20ee:	6d 89       	ldd	r22, Y+21	; 0x15
    20f0:	7e 89       	ldd	r23, Y+22	; 0x16
    20f2:	8f 89       	ldd	r24, Y+23	; 0x17
    20f4:	98 8d       	ldd	r25, Y+24	; 0x18
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	2c f4       	brge	.+10     	; 0x2110 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9c 8b       	std	Y+20, r25	; 0x14
    210c:	8b 8b       	std	Y+19, r24	; 0x13
    210e:	3f c0       	rjmp	.+126    	; 0x218e <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    2110:	6d 89       	ldd	r22, Y+21	; 0x15
    2112:	7e 89       	ldd	r23, Y+22	; 0x16
    2114:	8f 89       	ldd	r24, Y+23	; 0x17
    2116:	98 8d       	ldd	r25, Y+24	; 0x18
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	3f ef       	ldi	r19, 0xFF	; 255
    211c:	4f e7       	ldi	r20, 0x7F	; 127
    211e:	57 e4       	ldi	r21, 0x47	; 71
    2120:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2124:	18 16       	cp	r1, r24
    2126:	4c f5       	brge	.+82     	; 0x217a <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2128:	69 8d       	ldd	r22, Y+25	; 0x19
    212a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    212c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    212e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9c 8b       	std	Y+20, r25	; 0x14
    214e:	8b 8b       	std	Y+19, r24	; 0x13
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <LCD_displayCharacter+0x6fe>
    2152:	89 e1       	ldi	r24, 0x19	; 25
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9a 8b       	std	Y+18, r25	; 0x12
    2158:	89 8b       	std	Y+17, r24	; 0x11
    215a:	89 89       	ldd	r24, Y+17	; 0x11
    215c:	9a 89       	ldd	r25, Y+18	; 0x12
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_displayCharacter+0x6ec>
    2162:	9a 8b       	std	Y+18, r25	; 0x12
    2164:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	8b 89       	ldd	r24, Y+19	; 0x13
    2168:	9c 89       	ldd	r25, Y+20	; 0x14
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9c 8b       	std	Y+20, r25	; 0x14
    216e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	8b 89       	ldd	r24, Y+19	; 0x13
    2172:	9c 89       	ldd	r25, Y+20	; 0x14
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	69 f7       	brne	.-38     	; 0x2152 <LCD_displayCharacter+0x6e0>
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	6d 89       	ldd	r22, Y+21	; 0x15
    217c:	7e 89       	ldd	r23, Y+22	; 0x16
    217e:	8f 89       	ldd	r24, Y+23	; 0x17
    2180:	98 8d       	ldd	r25, Y+24	; 0x18
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9c 8b       	std	Y+20, r25	; 0x14
    218c:	8b 8b       	std	Y+19, r24	; 0x13
    218e:	8b 89       	ldd	r24, Y+19	; 0x13
    2190:	9c 89       	ldd	r25, Y+20	; 0x14
    2192:	98 8b       	std	Y+16, r25	; 0x10
    2194:	8f 87       	std	Y+15, r24	; 0x0f
    2196:	8f 85       	ldd	r24, Y+15	; 0x0f
    2198:	98 89       	ldd	r25, Y+16	; 0x10
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_displayCharacter+0x728>
    219e:	98 8b       	std	Y+16, r25	; 0x10
    21a0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    21a2:	ab e3       	ldi	r26, 0x3B	; 59
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	eb e3       	ldi	r30, 0x3B	; 59
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	8b 7f       	andi	r24, 0xFB	; 251
    21ae:	8c 93       	st	X, r24
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	a0 e8       	ldi	r26, 0x80	; 128
    21b6:	bf e3       	ldi	r27, 0x3F	; 63
    21b8:	8b 87       	std	Y+11, r24	; 0x0b
    21ba:	9c 87       	std	Y+12, r25	; 0x0c
    21bc:	ad 87       	std	Y+13, r26	; 0x0d
    21be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	4a e7       	ldi	r20, 0x7A	; 122
    21ce:	53 e4       	ldi	r21, 0x43	; 67
    21d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	8f 83       	std	Y+7, r24	; 0x07
    21da:	98 87       	std	Y+8, r25	; 0x08
    21dc:	a9 87       	std	Y+9, r26	; 0x09
    21de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21e0:	6f 81       	ldd	r22, Y+7	; 0x07
    21e2:	78 85       	ldd	r23, Y+8	; 0x08
    21e4:	89 85       	ldd	r24, Y+9	; 0x09
    21e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e8       	ldi	r20, 0x80	; 128
    21ee:	5f e3       	ldi	r21, 0x3F	; 63
    21f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f4:	88 23       	and	r24, r24
    21f6:	2c f4       	brge	.+10     	; 0x2202 <LCD_displayCharacter+0x790>
		__ticks = 1;
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	9e 83       	std	Y+6, r25	; 0x06
    21fe:	8d 83       	std	Y+5, r24	; 0x05
    2200:	3f c0       	rjmp	.+126    	; 0x2280 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    2202:	6f 81       	ldd	r22, Y+7	; 0x07
    2204:	78 85       	ldd	r23, Y+8	; 0x08
    2206:	89 85       	ldd	r24, Y+9	; 0x09
    2208:	9a 85       	ldd	r25, Y+10	; 0x0a
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	3f ef       	ldi	r19, 0xFF	; 255
    220e:	4f e7       	ldi	r20, 0x7F	; 127
    2210:	57 e4       	ldi	r21, 0x47	; 71
    2212:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2216:	18 16       	cp	r1, r24
    2218:	4c f5       	brge	.+82     	; 0x226c <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221a:	6b 85       	ldd	r22, Y+11	; 0x0b
    221c:	7c 85       	ldd	r23, Y+12	; 0x0c
    221e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2220:	9e 85       	ldd	r25, Y+14	; 0x0e
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e2       	ldi	r20, 0x20	; 32
    2228:	51 e4       	ldi	r21, 0x41	; 65
    222a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	bc 01       	movw	r22, r24
    2234:	cd 01       	movw	r24, r26
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	8d 83       	std	Y+5, r24	; 0x05
    2242:	0f c0       	rjmp	.+30     	; 0x2262 <LCD_displayCharacter+0x7f0>
    2244:	89 e1       	ldi	r24, 0x19	; 25
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	9c 83       	std	Y+4, r25	; 0x04
    224a:	8b 83       	std	Y+3, r24	; 0x03
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <LCD_displayCharacter+0x7de>
    2254:	9c 83       	std	Y+4, r25	; 0x04
    2256:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2258:	8d 81       	ldd	r24, Y+5	; 0x05
    225a:	9e 81       	ldd	r25, Y+6	; 0x06
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2262:	8d 81       	ldd	r24, Y+5	; 0x05
    2264:	9e 81       	ldd	r25, Y+6	; 0x06
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	69 f7       	brne	.-38     	; 0x2244 <LCD_displayCharacter+0x7d2>
    226a:	14 c0       	rjmp	.+40     	; 0x2294 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226c:	6f 81       	ldd	r22, Y+7	; 0x07
    226e:	78 85       	ldd	r23, Y+8	; 0x08
    2270:	89 85       	ldd	r24, Y+9	; 0x09
    2272:	9a 85       	ldd	r25, Y+10	; 0x0a
    2274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	9e 83       	std	Y+6, r25	; 0x06
    227e:	8d 83       	std	Y+5, r24	; 0x05
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	9e 81       	ldd	r25, Y+6	; 0x06
    2284:	9a 83       	std	Y+2, r25	; 0x02
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	9a 81       	ldd	r25, Y+2	; 0x02
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	f1 f7       	brne	.-4      	; 0x228c <LCD_displayCharacter+0x81a>
    2290:	9a 83       	std	Y+2, r25	; 0x02
    2292:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2294:	cd 59       	subi	r28, 0x9D	; 157
    2296:	df 4f       	sbci	r29, 0xFF	; 255
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	1f 91       	pop	r17
    22a8:	0f 91       	pop	r16
    22aa:	08 95       	ret

000022ac <LCD_displayString>:

/*---------------------------------------------------------------------------------*/

void LCD_displayString(const char *Str)
{
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <LCD_displayString+0x6>
    22b2:	0f 92       	push	r0
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	9b 83       	std	Y+3, r25	; 0x03
    22ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22bc:	19 82       	std	Y+1, r1	; 0x01
    22be:	0e c0       	rjmp	.+28     	; 0x22dc <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ca:	fc 01       	movw	r30, r24
    22cc:	e2 0f       	add	r30, r18
    22ce:	f3 1f       	adc	r31, r19
    22d0:	80 81       	ld	r24, Z
    22d2:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_displayCharacter>
		i++;
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	8f 5f       	subi	r24, 0xFF	; 255
    22da:	89 83       	std	Y+1, r24	; 0x01
/*---------------------------------------------------------------------------------*/

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	28 2f       	mov	r18, r24
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	9b 81       	ldd	r25, Y+3	; 0x03
    22e6:	fc 01       	movw	r30, r24
    22e8:	e2 0f       	add	r30, r18
    22ea:	f3 1f       	adc	r31, r19
    22ec:	80 81       	ld	r24, Z
    22ee:	88 23       	and	r24, r24
    22f0:	39 f7       	brne	.-50     	; 0x22c0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <LCD_goToRowColumn>:

/*---------------------------------------------------------------------------------*/

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	00 d0       	rcall	.+0      	; 0x2304 <LCD_goToRowColumn+0x6>
    2304:	00 d0       	rcall	.+0      	; 0x2306 <LCD_goToRowColumn+0x8>
    2306:	0f 92       	push	r0
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	8a 83       	std	Y+2, r24	; 0x02
    230e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	3d 83       	std	Y+5, r19	; 0x05
    2318:	2c 83       	std	Y+4, r18	; 0x04
    231a:	8c 81       	ldd	r24, Y+4	; 0x04
    231c:	9d 81       	ldd	r25, Y+5	; 0x05
    231e:	81 30       	cpi	r24, 0x01	; 1
    2320:	91 05       	cpc	r25, r1
    2322:	c1 f0       	breq	.+48     	; 0x2354 <LCD_goToRowColumn+0x56>
    2324:	2c 81       	ldd	r18, Y+4	; 0x04
    2326:	3d 81       	ldd	r19, Y+5	; 0x05
    2328:	22 30       	cpi	r18, 0x02	; 2
    232a:	31 05       	cpc	r19, r1
    232c:	2c f4       	brge	.+10     	; 0x2338 <LCD_goToRowColumn+0x3a>
    232e:	8c 81       	ldd	r24, Y+4	; 0x04
    2330:	9d 81       	ldd	r25, Y+5	; 0x05
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	61 f0       	breq	.+24     	; 0x234e <LCD_goToRowColumn+0x50>
    2336:	19 c0       	rjmp	.+50     	; 0x236a <LCD_goToRowColumn+0x6c>
    2338:	2c 81       	ldd	r18, Y+4	; 0x04
    233a:	3d 81       	ldd	r19, Y+5	; 0x05
    233c:	22 30       	cpi	r18, 0x02	; 2
    233e:	31 05       	cpc	r19, r1
    2340:	69 f0       	breq	.+26     	; 0x235c <LCD_goToRowColumn+0x5e>
    2342:	8c 81       	ldd	r24, Y+4	; 0x04
    2344:	9d 81       	ldd	r25, Y+5	; 0x05
    2346:	83 30       	cpi	r24, 0x03	; 3
    2348:	91 05       	cpc	r25, r1
    234a:	61 f0       	breq	.+24     	; 0x2364 <LCD_goToRowColumn+0x66>
    234c:	0e c0       	rjmp	.+28     	; 0x236a <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	89 83       	std	Y+1, r24	; 0x01
    2352:	0b c0       	rjmp	.+22     	; 0x236a <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	80 5c       	subi	r24, 0xC0	; 192
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	07 c0       	rjmp	.+14     	; 0x236a <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	80 5f       	subi	r24, 0xF0	; 240
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	03 c0       	rjmp	.+6      	; 0x236a <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	80 5b       	subi	r24, 0xB0	; 176
    2368:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	80 68       	ori	r24, 0x80	; 128
    236e:	0e 94 1c 09 	call	0x1238	; 0x1238 <LCD_sendCommand>
}
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <LCD_displayStringRowColumn>:

/*---------------------------------------------------------------------------------*/

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <LCD_displayStringRowColumn+0x6>
    2388:	00 d0       	rcall	.+0      	; 0x238a <LCD_displayStringRowColumn+0x8>
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	6a 83       	std	Y+2, r22	; 0x02
    2392:	5c 83       	std	Y+4, r21	; 0x04
    2394:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	6a 81       	ldd	r22, Y+2	; 0x02
    239a:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	9c 81       	ldd	r25, Y+4	; 0x04
    23a2:	0e 94 56 11 	call	0x22ac	; 0x22ac <LCD_displayString>
}
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	08 95       	ret

000023b4 <LCD_displayInteger>:

/*---------------------------------------------------------------------------------*/

void LCD_displayInteger(int data)
{
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
    23bc:	62 97       	sbiw	r28, 0x12	; 18
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	f8 94       	cli
    23c2:	de bf       	out	0x3e, r29	; 62
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	cd bf       	out	0x3d, r28	; 61
    23c8:	9a 8b       	std	Y+18, r25	; 0x12
    23ca:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    23cc:	89 89       	ldd	r24, Y+17	; 0x11
    23ce:	9a 89       	ldd	r25, Y+18	; 0x12
    23d0:	9e 01       	movw	r18, r28
    23d2:	2f 5f       	subi	r18, 0xFF	; 255
    23d4:	3f 4f       	sbci	r19, 0xFF	; 255
    23d6:	b9 01       	movw	r22, r18
    23d8:	4a e0       	ldi	r20, 0x0A	; 10
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <itoa>
   LCD_displayString(buff);
    23e0:	ce 01       	movw	r24, r28
    23e2:	01 96       	adiw	r24, 0x01	; 1
    23e4:	0e 94 56 11 	call	0x22ac	; 0x22ac <LCD_displayString>
}
    23e8:	62 96       	adiw	r28, 0x12	; 18
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	f8 94       	cli
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	cd bf       	out	0x3d, r28	; 61
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <LCD_clearScreen>:

/*---------------------------------------------------------------------------------*/

void LCD_clearScreen(void)
{
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	0e 94 1c 09 	call	0x1238	; 0x1238 <LCD_sendCommand>
}
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <LCD_shiftDisplayRight>:

/*---------------------------------------------------------------------------------*/

void LCD_shiftDisplayRight(void)
{
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(SHIFT_DISPLAY_RIGHT);
    2416:	85 e0       	ldi	r24, 0x05	; 5
    2418:	0e 94 1c 09 	call	0x1238	; 0x1238 <LCD_sendCommand>
}
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <LCD_shiftDisplayLeft>:

/*---------------------------------------------------------------------------------*/

void LCD_shiftDisplayLeft(void)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(SHIFT_DISPLAY_LEFT);
    242a:	87 e0       	ldi	r24, 0x07	; 7
    242c:	0e 94 1c 09 	call	0x1238	; 0x1238 <LCD_sendCommand>
}
    2430:	cf 91       	pop	r28
    2432:	df 91       	pop	r29
    2434:	08 95       	ret

00002436 <LCD_shiftCursorRight>:

/*---------------------------------------------------------------------------------*/

void LCD_shiftCursorRight(void)
{
    2436:	df 93       	push	r29
    2438:	cf 93       	push	r28
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(SHIFT_CURSOR_RIGHT);
    243e:	86 e0       	ldi	r24, 0x06	; 6
    2440:	0e 94 1c 09 	call	0x1238	; 0x1238 <LCD_sendCommand>
}
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <LCD_shiftCursorLeft>:

/*---------------------------------------------------------------------------------*/

void LCD_shiftCursorLeft(void)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(SHIFT_CURSOR_LEFT);
    2452:	84 e0       	ldi	r24, 0x04	; 4
    2454:	0e 94 1c 09 	call	0x1238	; 0x1238 <LCD_sendCommand>
}
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <LCD_displayOff>:

/*---------------------------------------------------------------------------------*/

void LCD_displayOff(void)
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(DISPLAY_OFF_CURSOR_OFF);
    2466:	88 e0       	ldi	r24, 0x08	; 8
    2468:	0e 94 1c 09 	call	0x1238	; 0x1238 <LCD_sendCommand>
}
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <LCD_cursorOff>:

/*---------------------------------------------------------------------------------*/

void LCD_cursorOff(void)
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);
    247a:	8c e0       	ldi	r24, 0x0C	; 12
    247c:	0e 94 1c 09 	call	0x1238	; 0x1238 <LCD_sendCommand>
}
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <LCD_cursorOn>:

/*---------------------------------------------------------------------------------*/

void LCD_cursorOn(void)
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(DISPLAY_ON_CURSOR_ON);
    248e:	8e e0       	ldi	r24, 0x0E	; 14
    2490:	0e 94 1c 09 	call	0x1238	; 0x1238 <LCD_sendCommand>
}
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <LCD_cursorBlink>:

/*---------------------------------------------------------------------------------*/

void LCD_cursorBlink(void)
{
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(DISPLAY_ON_CURSOR_BLINK);
    24a2:	8f e0       	ldi	r24, 0x0F	; 15
    24a4:	0e 94 1c 09 	call	0x1238	; 0x1238 <LCD_sendCommand>
}
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <main>:
uint8 entered_Password[PASSWORD_LENGTH];
/*---------------------------------------------------------------------------------*
 *                                FUNCTION DEFINITIONS                             *
 *---------------------------------------------------------------------------------*/
int main()
{
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	c6 54       	subi	r28, 0x46	; 70
    24bc:	d0 40       	sbci	r29, 0x00	; 0
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
	KeyPad_INIT();
    24c8:	0e 94 d6 07 	call	0xfac	; 0xfac <KeyPad_INIT>
	UART_Init();
    24cc:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_Init>
	LCD_init();
    24d0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LCD_init>
	sendCommand(FETCH_PASSWORD_COMMAND);
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <sendCommand>
	Resieve_String(password);
    24da:	80 91 8d 02 	lds	r24, 0x028D
    24de:	90 91 8e 02 	lds	r25, 0x028E
    24e2:	0e 94 19 07 	call	0xe32	; 0xe32 <Resieve_String>
	while(HIGH)
	{
		if(try && !correctFlag)
    24e6:	80 91 8c 02 	lds	r24, 0x028C
    24ea:	88 23       	and	r24, r24
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <main+0x42>
    24ee:	c5 c1       	rjmp	.+906    	; 0x287a <main+0x3cc>
    24f0:	80 91 90 02 	lds	r24, 0x0290
    24f4:	88 23       	and	r24, r24
    24f6:	09 f0       	breq	.+2      	; 0x24fa <main+0x4c>
    24f8:	c0 c1       	rjmp	.+896    	; 0x287a <main+0x3cc>
		{
			Password_Entry(entered_Password,"Welcome, please enter password");
    24fa:	81 e9       	ldi	r24, 0x91	; 145
    24fc:	92 e0       	ldi	r25, 0x02	; 2
    24fe:	26 e6       	ldi	r18, 0x66	; 102
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	b9 01       	movw	r22, r18
    2504:	0e 94 6f 15 	call	0x2ade	; 0x2ade <Password_Entry>
			if(IsCorrect(password,entered_Password))
    2508:	80 91 8d 02 	lds	r24, 0x028D
    250c:	90 91 8e 02 	lds	r25, 0x028E
    2510:	21 e9       	ldi	r18, 0x91	; 145
    2512:	32 e0       	ldi	r19, 0x02	; 2
    2514:	b9 01       	movw	r22, r18
    2516:	0e 94 34 15 	call	0x2a68	; 0x2a68 <IsCorrect>
    251a:	88 23       	and	r24, r24
    251c:	09 f4       	brne	.+2      	; 0x2520 <main+0x72>
    251e:	93 c0       	rjmp	.+294    	; 0x2646 <main+0x198>
			{
				correctFlag = TRUE;
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	80 93 90 02 	sts	0x0290, r24
				LCD_clearScreen();
    2526:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_clearScreen>
				LCD_goToRowColumn(0, 0);
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	60 e0       	ldi	r22, 0x00	; 0
    252e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LCD_goToRowColumn>
				LCD_displayString("Password is correct :) ");
    2532:	85 e8       	ldi	r24, 0x85	; 133
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	0e 94 56 11 	call	0x22ac	; 0x22ac <LCD_displayString>
    253a:	fe 01       	movw	r30, r28
    253c:	ed 5b       	subi	r30, 0xBD	; 189
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	aa e7       	ldi	r26, 0x7A	; 122
    2546:	b4 e4       	ldi	r27, 0x44	; 68
    2548:	80 83       	st	Z, r24
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	a2 83       	std	Z+2, r26	; 0x02
    254e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2550:	8e 01       	movw	r16, r28
    2552:	01 5c       	subi	r16, 0xC1	; 193
    2554:	1f 4f       	sbci	r17, 0xFF	; 255
    2556:	fe 01       	movw	r30, r28
    2558:	ed 5b       	subi	r30, 0xBD	; 189
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	60 81       	ld	r22, Z
    255e:	71 81       	ldd	r23, Z+1	; 0x01
    2560:	82 81       	ldd	r24, Z+2	; 0x02
    2562:	93 81       	ldd	r25, Z+3	; 0x03
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	4a e7       	ldi	r20, 0x7A	; 122
    256a:	53 e4       	ldi	r21, 0x43	; 67
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	f8 01       	movw	r30, r16
    2576:	80 83       	st	Z, r24
    2578:	91 83       	std	Z+1, r25	; 0x01
    257a:	a2 83       	std	Z+2, r26	; 0x02
    257c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    257e:	fe 01       	movw	r30, r28
    2580:	ff 96       	adiw	r30, 0x3f	; 63
    2582:	60 81       	ld	r22, Z
    2584:	71 81       	ldd	r23, Z+1	; 0x01
    2586:	82 81       	ldd	r24, Z+2	; 0x02
    2588:	93 81       	ldd	r25, Z+3	; 0x03
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	40 e8       	ldi	r20, 0x80	; 128
    2590:	5f e3       	ldi	r21, 0x3F	; 63
    2592:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2596:	88 23       	and	r24, r24
    2598:	2c f4       	brge	.+10     	; 0x25a4 <main+0xf6>
		__ticks = 1;
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	9e af       	std	Y+62, r25	; 0x3e
    25a0:	8d af       	std	Y+61, r24	; 0x3d
    25a2:	46 c0       	rjmp	.+140    	; 0x2630 <main+0x182>
	else if (__tmp > 65535)
    25a4:	fe 01       	movw	r30, r28
    25a6:	ff 96       	adiw	r30, 0x3f	; 63
    25a8:	60 81       	ld	r22, Z
    25aa:	71 81       	ldd	r23, Z+1	; 0x01
    25ac:	82 81       	ldd	r24, Z+2	; 0x02
    25ae:	93 81       	ldd	r25, Z+3	; 0x03
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	3f ef       	ldi	r19, 0xFF	; 255
    25b4:	4f e7       	ldi	r20, 0x7F	; 127
    25b6:	57 e4       	ldi	r21, 0x47	; 71
    25b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25bc:	18 16       	cp	r1, r24
    25be:	64 f5       	brge	.+88     	; 0x2618 <main+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c0:	fe 01       	movw	r30, r28
    25c2:	ed 5b       	subi	r30, 0xBD	; 189
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	60 81       	ld	r22, Z
    25c8:	71 81       	ldd	r23, Z+1	; 0x01
    25ca:	82 81       	ldd	r24, Z+2	; 0x02
    25cc:	93 81       	ldd	r25, Z+3	; 0x03
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e2       	ldi	r20, 0x20	; 32
    25d4:	51 e4       	ldi	r21, 0x41	; 65
    25d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	9e af       	std	Y+62, r25	; 0x3e
    25ec:	8d af       	std	Y+61, r24	; 0x3d
    25ee:	0f c0       	rjmp	.+30     	; 0x260e <main+0x160>
    25f0:	89 e1       	ldi	r24, 0x19	; 25
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	9c af       	std	Y+60, r25	; 0x3c
    25f6:	8b af       	std	Y+59, r24	; 0x3b
    25f8:	8b ad       	ldd	r24, Y+59	; 0x3b
    25fa:	9c ad       	ldd	r25, Y+60	; 0x3c
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <main+0x14e>
    2600:	9c af       	std	Y+60, r25	; 0x3c
    2602:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2604:	8d ad       	ldd	r24, Y+61	; 0x3d
    2606:	9e ad       	ldd	r25, Y+62	; 0x3e
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	9e af       	std	Y+62, r25	; 0x3e
    260c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2610:	9e ad       	ldd	r25, Y+62	; 0x3e
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	69 f7       	brne	.-38     	; 0x25f0 <main+0x142>
    2616:	67 cf       	rjmp	.-306    	; 0x24e6 <main+0x38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2618:	fe 01       	movw	r30, r28
    261a:	ff 96       	adiw	r30, 0x3f	; 63
    261c:	60 81       	ld	r22, Z
    261e:	71 81       	ldd	r23, Z+1	; 0x01
    2620:	82 81       	ldd	r24, Z+2	; 0x02
    2622:	93 81       	ldd	r25, Z+3	; 0x03
    2624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9e af       	std	Y+62, r25	; 0x3e
    262e:	8d af       	std	Y+61, r24	; 0x3d
    2630:	8d ad       	ldd	r24, Y+61	; 0x3d
    2632:	9e ad       	ldd	r25, Y+62	; 0x3e
    2634:	9a af       	std	Y+58, r25	; 0x3a
    2636:	89 af       	std	Y+57, r24	; 0x39
    2638:	89 ad       	ldd	r24, Y+57	; 0x39
    263a:	9a ad       	ldd	r25, Y+58	; 0x3a
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <main+0x18e>
    2640:	9a af       	std	Y+58, r25	; 0x3a
    2642:	89 af       	std	Y+57, r24	; 0x39
    2644:	50 cf       	rjmp	.-352    	; 0x24e6 <main+0x38>
				_delay_ms(DELAY_PERIOD_1);

			}
			else
			{
				--try;
    2646:	80 91 8c 02 	lds	r24, 0x028C
    264a:	81 50       	subi	r24, 0x01	; 1
    264c:	80 93 8c 02 	sts	0x028C, r24
				LCD_clearScreen();
    2650:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0,"Password is not correct :( ");
    2654:	2d e9       	ldi	r18, 0x9D	; 157
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	60 e0       	ldi	r22, 0x00	; 0
    265c:	a9 01       	movw	r20, r18
    265e:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
				if(try)
    2662:	80 91 8c 02 	lds	r24, 0x028C
    2666:	88 23       	and	r24, r24
    2668:	09 f4       	brne	.+2      	; 0x266c <main+0x1be>
    266a:	84 c0       	rjmp	.+264    	; 0x2774 <main+0x2c6>
				{
				LCD_displayStringRowColumn(1, 0,"you have ");
    266c:	29 eb       	ldi	r18, 0xB9	; 185
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	60 e0       	ldi	r22, 0x00	; 0
    2674:	a9 01       	movw	r20, r18
    2676:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
				LCD_displayInteger(try);
    267a:	80 91 8c 02 	lds	r24, 0x028C
    267e:	88 2f       	mov	r24, r24
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_displayInteger>
				LCD_displayString(" more tries");
    2686:	83 ec       	ldi	r24, 0xC3	; 195
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	0e 94 56 11 	call	0x22ac	; 0x22ac <LCD_displayString>
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	aa e7       	ldi	r26, 0x7A	; 122
    2694:	b4 e4       	ldi	r27, 0x44	; 68
    2696:	8d ab       	std	Y+53, r24	; 0x35
    2698:	9e ab       	std	Y+54, r25	; 0x36
    269a:	af ab       	std	Y+55, r26	; 0x37
    269c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269e:	6d a9       	ldd	r22, Y+53	; 0x35
    26a0:	7e a9       	ldd	r23, Y+54	; 0x36
    26a2:	8f a9       	ldd	r24, Y+55	; 0x37
    26a4:	98 ad       	ldd	r25, Y+56	; 0x38
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	4a e7       	ldi	r20, 0x7A	; 122
    26ac:	53 e4       	ldi	r21, 0x43	; 67
    26ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	89 ab       	std	Y+49, r24	; 0x31
    26b8:	9a ab       	std	Y+50, r25	; 0x32
    26ba:	ab ab       	std	Y+51, r26	; 0x33
    26bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26be:	69 a9       	ldd	r22, Y+49	; 0x31
    26c0:	7a a9       	ldd	r23, Y+50	; 0x32
    26c2:	8b a9       	ldd	r24, Y+51	; 0x33
    26c4:	9c a9       	ldd	r25, Y+52	; 0x34
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e8       	ldi	r20, 0x80	; 128
    26cc:	5f e3       	ldi	r21, 0x3F	; 63
    26ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26d2:	88 23       	and	r24, r24
    26d4:	2c f4       	brge	.+10     	; 0x26e0 <main+0x232>
		__ticks = 1;
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	98 ab       	std	Y+48, r25	; 0x30
    26dc:	8f a7       	std	Y+47, r24	; 0x2f
    26de:	3f c0       	rjmp	.+126    	; 0x275e <main+0x2b0>
	else if (__tmp > 65535)
    26e0:	69 a9       	ldd	r22, Y+49	; 0x31
    26e2:	7a a9       	ldd	r23, Y+50	; 0x32
    26e4:	8b a9       	ldd	r24, Y+51	; 0x33
    26e6:	9c a9       	ldd	r25, Y+52	; 0x34
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	3f ef       	ldi	r19, 0xFF	; 255
    26ec:	4f e7       	ldi	r20, 0x7F	; 127
    26ee:	57 e4       	ldi	r21, 0x47	; 71
    26f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26f4:	18 16       	cp	r1, r24
    26f6:	4c f5       	brge	.+82     	; 0x274a <main+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f8:	6d a9       	ldd	r22, Y+53	; 0x35
    26fa:	7e a9       	ldd	r23, Y+54	; 0x36
    26fc:	8f a9       	ldd	r24, Y+55	; 0x37
    26fe:	98 ad       	ldd	r25, Y+56	; 0x38
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	40 e2       	ldi	r20, 0x20	; 32
    2706:	51 e4       	ldi	r21, 0x41	; 65
    2708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	bc 01       	movw	r22, r24
    2712:	cd 01       	movw	r24, r26
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	98 ab       	std	Y+48, r25	; 0x30
    271e:	8f a7       	std	Y+47, r24	; 0x2f
    2720:	0f c0       	rjmp	.+30     	; 0x2740 <main+0x292>
    2722:	89 e1       	ldi	r24, 0x19	; 25
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9e a7       	std	Y+46, r25	; 0x2e
    2728:	8d a7       	std	Y+45, r24	; 0x2d
    272a:	8d a5       	ldd	r24, Y+45	; 0x2d
    272c:	9e a5       	ldd	r25, Y+46	; 0x2e
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <main+0x280>
    2732:	9e a7       	std	Y+46, r25	; 0x2e
    2734:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2736:	8f a5       	ldd	r24, Y+47	; 0x2f
    2738:	98 a9       	ldd	r25, Y+48	; 0x30
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	98 ab       	std	Y+48, r25	; 0x30
    273e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2740:	8f a5       	ldd	r24, Y+47	; 0x2f
    2742:	98 a9       	ldd	r25, Y+48	; 0x30
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	69 f7       	brne	.-38     	; 0x2722 <main+0x274>
    2748:	ce ce       	rjmp	.-612    	; 0x24e6 <main+0x38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274a:	69 a9       	ldd	r22, Y+49	; 0x31
    274c:	7a a9       	ldd	r23, Y+50	; 0x32
    274e:	8b a9       	ldd	r24, Y+51	; 0x33
    2750:	9c a9       	ldd	r25, Y+52	; 0x34
    2752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	98 ab       	std	Y+48, r25	; 0x30
    275c:	8f a7       	std	Y+47, r24	; 0x2f
    275e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2760:	98 a9       	ldd	r25, Y+48	; 0x30
    2762:	9c a7       	std	Y+44, r25	; 0x2c
    2764:	8b a7       	std	Y+43, r24	; 0x2b
    2766:	8b a5       	ldd	r24, Y+43	; 0x2b
    2768:	9c a5       	ldd	r25, Y+44	; 0x2c
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	f1 f7       	brne	.-4      	; 0x276a <main+0x2bc>
    276e:	9c a7       	std	Y+44, r25	; 0x2c
    2770:	8b a7       	std	Y+43, r24	; 0x2b
    2772:	b9 ce       	rjmp	.-654    	; 0x24e6 <main+0x38>
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	aa e7       	ldi	r26, 0x7A	; 122
    277a:	b4 e4       	ldi	r27, 0x44	; 68
    277c:	8f a3       	std	Y+39, r24	; 0x27
    277e:	98 a7       	std	Y+40, r25	; 0x28
    2780:	a9 a7       	std	Y+41, r26	; 0x29
    2782:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2784:	6f a1       	ldd	r22, Y+39	; 0x27
    2786:	78 a5       	ldd	r23, Y+40	; 0x28
    2788:	89 a5       	ldd	r24, Y+41	; 0x29
    278a:	9a a5       	ldd	r25, Y+42	; 0x2a
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	4a e7       	ldi	r20, 0x7A	; 122
    2792:	53 e4       	ldi	r21, 0x43	; 67
    2794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	8b a3       	std	Y+35, r24	; 0x23
    279e:	9c a3       	std	Y+36, r25	; 0x24
    27a0:	ad a3       	std	Y+37, r26	; 0x25
    27a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27a4:	6b a1       	ldd	r22, Y+35	; 0x23
    27a6:	7c a1       	ldd	r23, Y+36	; 0x24
    27a8:	8d a1       	ldd	r24, Y+37	; 0x25
    27aa:	9e a1       	ldd	r25, Y+38	; 0x26
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e8       	ldi	r20, 0x80	; 128
    27b2:	5f e3       	ldi	r21, 0x3F	; 63
    27b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b8:	88 23       	and	r24, r24
    27ba:	2c f4       	brge	.+10     	; 0x27c6 <main+0x318>
		__ticks = 1;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	9a a3       	std	Y+34, r25	; 0x22
    27c2:	89 a3       	std	Y+33, r24	; 0x21
    27c4:	3f c0       	rjmp	.+126    	; 0x2844 <main+0x396>
	else if (__tmp > 65535)
    27c6:	6b a1       	ldd	r22, Y+35	; 0x23
    27c8:	7c a1       	ldd	r23, Y+36	; 0x24
    27ca:	8d a1       	ldd	r24, Y+37	; 0x25
    27cc:	9e a1       	ldd	r25, Y+38	; 0x26
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	3f ef       	ldi	r19, 0xFF	; 255
    27d2:	4f e7       	ldi	r20, 0x7F	; 127
    27d4:	57 e4       	ldi	r21, 0x47	; 71
    27d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27da:	18 16       	cp	r1, r24
    27dc:	4c f5       	brge	.+82     	; 0x2830 <main+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27de:	6f a1       	ldd	r22, Y+39	; 0x27
    27e0:	78 a5       	ldd	r23, Y+40	; 0x28
    27e2:	89 a5       	ldd	r24, Y+41	; 0x29
    27e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	40 e2       	ldi	r20, 0x20	; 32
    27ec:	51 e4       	ldi	r21, 0x41	; 65
    27ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	bc 01       	movw	r22, r24
    27f8:	cd 01       	movw	r24, r26
    27fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9a a3       	std	Y+34, r25	; 0x22
    2804:	89 a3       	std	Y+33, r24	; 0x21
    2806:	0f c0       	rjmp	.+30     	; 0x2826 <main+0x378>
    2808:	89 e1       	ldi	r24, 0x19	; 25
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	98 a3       	std	Y+32, r25	; 0x20
    280e:	8f 8f       	std	Y+31, r24	; 0x1f
    2810:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2812:	98 a1       	ldd	r25, Y+32	; 0x20
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	f1 f7       	brne	.-4      	; 0x2814 <main+0x366>
    2818:	98 a3       	std	Y+32, r25	; 0x20
    281a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281c:	89 a1       	ldd	r24, Y+33	; 0x21
    281e:	9a a1       	ldd	r25, Y+34	; 0x22
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	9a a3       	std	Y+34, r25	; 0x22
    2824:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2826:	89 a1       	ldd	r24, Y+33	; 0x21
    2828:	9a a1       	ldd	r25, Y+34	; 0x22
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	69 f7       	brne	.-38     	; 0x2808 <main+0x35a>
    282e:	14 c0       	rjmp	.+40     	; 0x2858 <main+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2830:	6b a1       	ldd	r22, Y+35	; 0x23
    2832:	7c a1       	ldd	r23, Y+36	; 0x24
    2834:	8d a1       	ldd	r24, Y+37	; 0x25
    2836:	9e a1       	ldd	r25, Y+38	; 0x26
    2838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	9a a3       	std	Y+34, r25	; 0x22
    2842:	89 a3       	std	Y+33, r24	; 0x21
    2844:	89 a1       	ldd	r24, Y+33	; 0x21
    2846:	9a a1       	ldd	r25, Y+34	; 0x22
    2848:	9e 8f       	std	Y+30, r25	; 0x1e
    284a:	8d 8f       	std	Y+29, r24	; 0x1d
    284c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    284e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	f1 f7       	brne	.-4      	; 0x2850 <main+0x3a2>
    2854:	9e 8f       	std	Y+30, r25	; 0x1e
    2856:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(DELAY_PERIOD_1);
				}
				else
				{
					_delay_ms(DELAY_PERIOD_1);
					LCD_clearScreen();
    2858:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0,"Warning !! you typed wrong  ");
    285c:	2f ec       	ldi	r18, 0xCF	; 207
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	60 e0       	ldi	r22, 0x00	; 0
    2864:	a9 01       	movw	r20, r18
    2866:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0,"password for 3 times !");
    286a:	2c ee       	ldi	r18, 0xEC	; 236
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	60 e0       	ldi	r22, 0x00	; 0
    2872:	a9 01       	movw	r20, r18
    2874:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
    2878:	36 ce       	rjmp	.-916    	; 0x24e6 <main+0x38>
				}
			}
		}
		else if(try && correctFlag)
    287a:	80 91 8c 02 	lds	r24, 0x028C
    287e:	88 23       	and	r24, r24
    2880:	39 f0       	breq	.+14     	; 0x2890 <main+0x3e2>
    2882:	80 91 90 02 	lds	r24, 0x0290
    2886:	88 23       	and	r24, r24
    2888:	19 f0       	breq	.+6      	; 0x2890 <main+0x3e2>
		{
			options();
    288a:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <options>
    288e:	2b ce       	rjmp	.-938    	; 0x24e6 <main+0x38>
		}
		else
		{
			sendCommand(WARNING_COMMAND);
    2890:	86 e0       	ldi	r24, 0x06	; 6
    2892:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <sendCommand>
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	aa ef       	ldi	r26, 0xFA	; 250
    289c:	b3 e4       	ldi	r27, 0x43	; 67
    289e:	89 8f       	std	Y+25, r24	; 0x19
    28a0:	9a 8f       	std	Y+26, r25	; 0x1a
    28a2:	ab 8f       	std	Y+27, r26	; 0x1b
    28a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a6:	69 8d       	ldd	r22, Y+25	; 0x19
    28a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	4a e7       	ldi	r20, 0x7A	; 122
    28b4:	53 e4       	ldi	r21, 0x43	; 67
    28b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	8d 8b       	std	Y+21, r24	; 0x15
    28c0:	9e 8b       	std	Y+22, r25	; 0x16
    28c2:	af 8b       	std	Y+23, r26	; 0x17
    28c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28c6:	6d 89       	ldd	r22, Y+21	; 0x15
    28c8:	7e 89       	ldd	r23, Y+22	; 0x16
    28ca:	8f 89       	ldd	r24, Y+23	; 0x17
    28cc:	98 8d       	ldd	r25, Y+24	; 0x18
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e8       	ldi	r20, 0x80	; 128
    28d4:	5f e3       	ldi	r21, 0x3F	; 63
    28d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28da:	88 23       	and	r24, r24
    28dc:	2c f4       	brge	.+10     	; 0x28e8 <main+0x43a>
		__ticks = 1;
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	9c 8b       	std	Y+20, r25	; 0x14
    28e4:	8b 8b       	std	Y+19, r24	; 0x13
    28e6:	3f c0       	rjmp	.+126    	; 0x2966 <main+0x4b8>
	else if (__tmp > 65535)
    28e8:	6d 89       	ldd	r22, Y+21	; 0x15
    28ea:	7e 89       	ldd	r23, Y+22	; 0x16
    28ec:	8f 89       	ldd	r24, Y+23	; 0x17
    28ee:	98 8d       	ldd	r25, Y+24	; 0x18
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	3f ef       	ldi	r19, 0xFF	; 255
    28f4:	4f e7       	ldi	r20, 0x7F	; 127
    28f6:	57 e4       	ldi	r21, 0x47	; 71
    28f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28fc:	18 16       	cp	r1, r24
    28fe:	4c f5       	brge	.+82     	; 0x2952 <main+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2900:	69 8d       	ldd	r22, Y+25	; 0x19
    2902:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2904:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2906:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e2       	ldi	r20, 0x20	; 32
    290e:	51 e4       	ldi	r21, 0x41	; 65
    2910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	bc 01       	movw	r22, r24
    291a:	cd 01       	movw	r24, r26
    291c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	9c 8b       	std	Y+20, r25	; 0x14
    2926:	8b 8b       	std	Y+19, r24	; 0x13
    2928:	0f c0       	rjmp	.+30     	; 0x2948 <main+0x49a>
    292a:	89 e1       	ldi	r24, 0x19	; 25
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	9a 8b       	std	Y+18, r25	; 0x12
    2930:	89 8b       	std	Y+17, r24	; 0x11
    2932:	89 89       	ldd	r24, Y+17	; 0x11
    2934:	9a 89       	ldd	r25, Y+18	; 0x12
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	f1 f7       	brne	.-4      	; 0x2936 <main+0x488>
    293a:	9a 8b       	std	Y+18, r25	; 0x12
    293c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    293e:	8b 89       	ldd	r24, Y+19	; 0x13
    2940:	9c 89       	ldd	r25, Y+20	; 0x14
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	9c 8b       	std	Y+20, r25	; 0x14
    2946:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2948:	8b 89       	ldd	r24, Y+19	; 0x13
    294a:	9c 89       	ldd	r25, Y+20	; 0x14
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	69 f7       	brne	.-38     	; 0x292a <main+0x47c>
    2950:	14 c0       	rjmp	.+40     	; 0x297a <main+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2952:	6d 89       	ldd	r22, Y+21	; 0x15
    2954:	7e 89       	ldd	r23, Y+22	; 0x16
    2956:	8f 89       	ldd	r24, Y+23	; 0x17
    2958:	98 8d       	ldd	r25, Y+24	; 0x18
    295a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	9c 8b       	std	Y+20, r25	; 0x14
    2964:	8b 8b       	std	Y+19, r24	; 0x13
    2966:	8b 89       	ldd	r24, Y+19	; 0x13
    2968:	9c 89       	ldd	r25, Y+20	; 0x14
    296a:	98 8b       	std	Y+16, r25	; 0x10
    296c:	8f 87       	std	Y+15, r24	; 0x0f
    296e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2970:	98 89       	ldd	r25, Y+16	; 0x10
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	f1 f7       	brne	.-4      	; 0x2972 <main+0x4c4>
    2976:	98 8b       	std	Y+16, r25	; 0x10
    2978:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(DELAY_PERIOD_1/2);
			LCD_displayOff();
    297a:	0e 94 2f 12 	call	0x245e	; 0x245e <LCD_displayOff>
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	aa ef       	ldi	r26, 0xFA	; 250
    2984:	b3 e4       	ldi	r27, 0x43	; 67
    2986:	8b 87       	std	Y+11, r24	; 0x0b
    2988:	9c 87       	std	Y+12, r25	; 0x0c
    298a:	ad 87       	std	Y+13, r26	; 0x0d
    298c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2990:	7c 85       	ldd	r23, Y+12	; 0x0c
    2992:	8d 85       	ldd	r24, Y+13	; 0x0d
    2994:	9e 85       	ldd	r25, Y+14	; 0x0e
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	4a e7       	ldi	r20, 0x7A	; 122
    299c:	53 e4       	ldi	r21, 0x43	; 67
    299e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	8f 83       	std	Y+7, r24	; 0x07
    29a8:	98 87       	std	Y+8, r25	; 0x08
    29aa:	a9 87       	std	Y+9, r26	; 0x09
    29ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ae:	6f 81       	ldd	r22, Y+7	; 0x07
    29b0:	78 85       	ldd	r23, Y+8	; 0x08
    29b2:	89 85       	ldd	r24, Y+9	; 0x09
    29b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e8       	ldi	r20, 0x80	; 128
    29bc:	5f e3       	ldi	r21, 0x3F	; 63
    29be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29c2:	88 23       	and	r24, r24
    29c4:	2c f4       	brge	.+10     	; 0x29d0 <main+0x522>
		__ticks = 1;
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	9e 83       	std	Y+6, r25	; 0x06
    29cc:	8d 83       	std	Y+5, r24	; 0x05
    29ce:	3f c0       	rjmp	.+126    	; 0x2a4e <main+0x5a0>
	else if (__tmp > 65535)
    29d0:	6f 81       	ldd	r22, Y+7	; 0x07
    29d2:	78 85       	ldd	r23, Y+8	; 0x08
    29d4:	89 85       	ldd	r24, Y+9	; 0x09
    29d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	3f ef       	ldi	r19, 0xFF	; 255
    29dc:	4f e7       	ldi	r20, 0x7F	; 127
    29de:	57 e4       	ldi	r21, 0x47	; 71
    29e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29e4:	18 16       	cp	r1, r24
    29e6:	4c f5       	brge	.+82     	; 0x2a3a <main+0x58c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e2       	ldi	r20, 0x20	; 32
    29f6:	51 e4       	ldi	r21, 0x41	; 65
    29f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	bc 01       	movw	r22, r24
    2a02:	cd 01       	movw	r24, r26
    2a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	9e 83       	std	Y+6, r25	; 0x06
    2a0e:	8d 83       	std	Y+5, r24	; 0x05
    2a10:	0f c0       	rjmp	.+30     	; 0x2a30 <main+0x582>
    2a12:	89 e1       	ldi	r24, 0x19	; 25
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	9c 83       	std	Y+4, r25	; 0x04
    2a18:	8b 83       	std	Y+3, r24	; 0x03
    2a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <main+0x570>
    2a22:	9c 83       	std	Y+4, r25	; 0x04
    2a24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a26:	8d 81       	ldd	r24, Y+5	; 0x05
    2a28:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	9e 83       	std	Y+6, r25	; 0x06
    2a2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a30:	8d 81       	ldd	r24, Y+5	; 0x05
    2a32:	9e 81       	ldd	r25, Y+6	; 0x06
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	69 f7       	brne	.-38     	; 0x2a12 <main+0x564>
    2a38:	14 c0       	rjmp	.+40     	; 0x2a62 <main+0x5b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3c:	78 85       	ldd	r23, Y+8	; 0x08
    2a3e:	89 85       	ldd	r24, Y+9	; 0x09
    2a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	9e 83       	std	Y+6, r25	; 0x06
    2a4c:	8d 83       	std	Y+5, r24	; 0x05
    2a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a50:	9e 81       	ldd	r25, Y+6	; 0x06
    2a52:	9a 83       	std	Y+2, r25	; 0x02
    2a54:	89 83       	std	Y+1, r24	; 0x01
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	f1 f7       	brne	.-4      	; 0x2a5a <main+0x5ac>
    2a5e:	9a 83       	std	Y+2, r25	; 0x02
    2a60:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(DELAY_PERIOD_1/2);
			LCD_cursorOff();
    2a62:	0e 94 39 12 	call	0x2472	; 0x2472 <LCD_cursorOff>
    2a66:	3f cd       	rjmp	.-1410   	; 0x24e6 <main+0x38>

00002a68 <IsCorrect>:


}

uint8 IsCorrect (uint8* password , uint8* entered_Password)
{
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	27 97       	sbiw	r28, 0x07	; 7
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	9d 83       	std	Y+5, r25	; 0x05
    2a7e:	8c 83       	std	Y+4, r24	; 0x04
    2a80:	7f 83       	std	Y+7, r23	; 0x07
    2a82:	6e 83       	std	Y+6, r22	; 0x06
	uint8 flag = TRUE;
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	8b 83       	std	Y+3, r24	; 0x03
	for (int i=0;i<PASSWORD_LENGTH;i++)
    2a88:	1a 82       	std	Y+2, r1	; 0x02
    2a8a:	19 82       	std	Y+1, r1	; 0x01
    2a8c:	19 c0       	rjmp	.+50     	; 0x2ac0 <IsCorrect+0x58>
	{
		if(password[i] != entered_Password[i])
    2a8e:	29 81       	ldd	r18, Y+1	; 0x01
    2a90:	3a 81       	ldd	r19, Y+2	; 0x02
    2a92:	8c 81       	ldd	r24, Y+4	; 0x04
    2a94:	9d 81       	ldd	r25, Y+5	; 0x05
    2a96:	fc 01       	movw	r30, r24
    2a98:	e2 0f       	add	r30, r18
    2a9a:	f3 1f       	adc	r31, r19
    2a9c:	40 81       	ld	r20, Z
    2a9e:	29 81       	ldd	r18, Y+1	; 0x01
    2aa0:	3a 81       	ldd	r19, Y+2	; 0x02
    2aa2:	8e 81       	ldd	r24, Y+6	; 0x06
    2aa4:	9f 81       	ldd	r25, Y+7	; 0x07
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	e2 0f       	add	r30, r18
    2aaa:	f3 1f       	adc	r31, r19
    2aac:	80 81       	ld	r24, Z
    2aae:	48 17       	cp	r20, r24
    2ab0:	11 f0       	breq	.+4      	; 0x2ab6 <IsCorrect+0x4e>
		{
			flag = FALSE;
    2ab2:	1b 82       	std	Y+3, r1	; 0x03
    2ab4:	0a c0       	rjmp	.+20     	; 0x2aca <IsCorrect+0x62>
}

uint8 IsCorrect (uint8* password , uint8* entered_Password)
{
	uint8 flag = TRUE;
	for (int i=0;i<PASSWORD_LENGTH;i++)
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aba:	01 96       	adiw	r24, 0x01	; 1
    2abc:	9a 83       	std	Y+2, r25	; 0x02
    2abe:	89 83       	std	Y+1, r24	; 0x01
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac4:	85 30       	cpi	r24, 0x05	; 5
    2ac6:	91 05       	cpc	r25, r1
    2ac8:	14 f3       	brlt	.-60     	; 0x2a8e <IsCorrect+0x26>
		{
			flag = FALSE;
			break;
		}
	}
	return flag;
    2aca:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2acc:	27 96       	adiw	r28, 0x07	; 7
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	cf 91       	pop	r28
    2ada:	df 91       	pop	r29
    2adc:	08 95       	ret

00002ade <Password_Entry>:

void Password_Entry(uint8* entered_Password, char* msg)
{
    2ade:	df 93       	push	r29
    2ae0:	cf 93       	push	r28
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
    2ae6:	a4 97       	sbiw	r28, 0x24	; 36
    2ae8:	0f b6       	in	r0, 0x3f	; 63
    2aea:	f8 94       	cli
    2aec:	de bf       	out	0x3e, r29	; 62
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	cd bf       	out	0x3d, r28	; 61
    2af2:	9a a3       	std	Y+34, r25	; 0x22
    2af4:	89 a3       	std	Y+33, r24	; 0x21
    2af6:	7c a3       	std	Y+36, r23	; 0x24
    2af8:	6b a3       	std	Y+35, r22	; 0x23
	int i=0;
    2afa:	18 a2       	std	Y+32, r1	; 0x20
    2afc:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8 flag=FALSE;
    2afe:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 key;
	LCD_clearScreen();
    2b00:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0,msg);
    2b04:	2b a1       	ldd	r18, Y+35	; 0x23
    2b06:	3c a1       	ldd	r19, Y+36	; 0x24
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	60 e0       	ldi	r22, 0x00	; 0
    2b0c:	a9 01       	movw	r20, r18
    2b0e:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1, 0);
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	60 e0       	ldi	r22, 0x00	; 0
    2b16:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LCD_goToRowColumn>
    2b1a:	db c0       	rjmp	.+438    	; 0x2cd2 <Password_Entry+0x1f4>
	while(i < PASSWORD_LENGTH)
	{
		key = KeyPad_getPressedKey();
    2b1c:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <KeyPad_getPressedKey>
    2b20:	8d 8f       	std	Y+29, r24	; 0x1d
		if (key && !flag)
    2b22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b24:	88 23       	and	r24, r24
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <Password_Entry+0x4c>
    2b28:	cd c0       	rjmp	.+410    	; 0x2cc4 <Password_Entry+0x1e6>
    2b2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b2c:	88 23       	and	r24, r24
    2b2e:	09 f0       	breq	.+2      	; 0x2b32 <Password_Entry+0x54>
    2b30:	c9 c0       	rjmp	.+402    	; 0x2cc4 <Password_Entry+0x1e6>
		{
			if(key>0 && key<10)
    2b32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b34:	88 23       	and	r24, r24
    2b36:	99 f0       	breq	.+38     	; 0x2b5e <Password_Entry+0x80>
    2b38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b3a:	8a 30       	cpi	r24, 0x0A	; 10
    2b3c:	80 f4       	brcc	.+32     	; 0x2b5e <Password_Entry+0x80>
			{
			    itoa(key,&(entered_Password[i]),10);
    2b3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b40:	48 2f       	mov	r20, r24
    2b42:	50 e0       	ldi	r21, 0x00	; 0
    2b44:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2b46:	38 a1       	ldd	r19, Y+32	; 0x20
    2b48:	89 a1       	ldd	r24, Y+33	; 0x21
    2b4a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b4c:	28 0f       	add	r18, r24
    2b4e:	39 1f       	adc	r19, r25
    2b50:	ca 01       	movw	r24, r20
    2b52:	b9 01       	movw	r22, r18
    2b54:	4a e0       	ldi	r20, 0x0A	; 10
    2b56:	50 e0       	ldi	r21, 0x00	; 0
    2b58:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <itoa>
    2b5c:	0c c0       	rjmp	.+24     	; 0x2b76 <Password_Entry+0x98>
			}
			else if(key == '#')
    2b5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b60:	83 32       	cpi	r24, 0x23	; 35
    2b62:	49 f0       	breq	.+18     	; 0x2b76 <Password_Entry+0x98>
			{}
			else
			{
				entered_Password[i]=key;
    2b64:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2b66:	38 a1       	ldd	r19, Y+32	; 0x20
    2b68:	89 a1       	ldd	r24, Y+33	; 0x21
    2b6a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	e2 0f       	add	r30, r18
    2b70:	f3 1f       	adc	r31, r19
    2b72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b74:	80 83       	st	Z, r24
			}
			if(key != '#')
    2b76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b78:	83 32       	cpi	r24, 0x23	; 35
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <Password_Entry+0xa0>
    2b7c:	8a c0       	rjmp	.+276    	; 0x2c92 <Password_Entry+0x1b4>
			{
				LCD_displayCharacter(entered_Password[i]);
    2b7e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2b80:	38 a1       	ldd	r19, Y+32	; 0x20
    2b82:	89 a1       	ldd	r24, Y+33	; 0x21
    2b84:	9a a1       	ldd	r25, Y+34	; 0x22
    2b86:	fc 01       	movw	r30, r24
    2b88:	e2 0f       	add	r30, r18
    2b8a:	f3 1f       	adc	r31, r19
    2b8c:	80 81       	ld	r24, Z
    2b8e:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_displayCharacter>
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	a6 e1       	ldi	r26, 0x16	; 22
    2b98:	b3 e4       	ldi	r27, 0x43	; 67
    2b9a:	89 8f       	std	Y+25, r24	; 0x19
    2b9c:	9a 8f       	std	Y+26, r25	; 0x1a
    2b9e:	ab 8f       	std	Y+27, r26	; 0x1b
    2ba0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ba4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ba6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ba8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	4a e7       	ldi	r20, 0x7A	; 122
    2bb0:	53 e4       	ldi	r21, 0x43	; 67
    2bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	8d 8b       	std	Y+21, r24	; 0x15
    2bbc:	9e 8b       	std	Y+22, r25	; 0x16
    2bbe:	af 8b       	std	Y+23, r26	; 0x17
    2bc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bc2:	6d 89       	ldd	r22, Y+21	; 0x15
    2bc4:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e8       	ldi	r20, 0x80	; 128
    2bd0:	5f e3       	ldi	r21, 0x3F	; 63
    2bd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bd6:	88 23       	and	r24, r24
    2bd8:	2c f4       	brge	.+10     	; 0x2be4 <Password_Entry+0x106>
		__ticks = 1;
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	9c 8b       	std	Y+20, r25	; 0x14
    2be0:	8b 8b       	std	Y+19, r24	; 0x13
    2be2:	3f c0       	rjmp	.+126    	; 0x2c62 <Password_Entry+0x184>
	else if (__tmp > 65535)
    2be4:	6d 89       	ldd	r22, Y+21	; 0x15
    2be6:	7e 89       	ldd	r23, Y+22	; 0x16
    2be8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bea:	98 8d       	ldd	r25, Y+24	; 0x18
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	3f ef       	ldi	r19, 0xFF	; 255
    2bf0:	4f e7       	ldi	r20, 0x7F	; 127
    2bf2:	57 e4       	ldi	r21, 0x47	; 71
    2bf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bf8:	18 16       	cp	r1, r24
    2bfa:	4c f5       	brge	.+82     	; 0x2c4e <Password_Entry+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfc:	69 8d       	ldd	r22, Y+25	; 0x19
    2bfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e2       	ldi	r20, 0x20	; 32
    2c0a:	51 e4       	ldi	r21, 0x41	; 65
    2c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	bc 01       	movw	r22, r24
    2c16:	cd 01       	movw	r24, r26
    2c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	9c 8b       	std	Y+20, r25	; 0x14
    2c22:	8b 8b       	std	Y+19, r24	; 0x13
    2c24:	0f c0       	rjmp	.+30     	; 0x2c44 <Password_Entry+0x166>
    2c26:	89 e1       	ldi	r24, 0x19	; 25
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	9a 8b       	std	Y+18, r25	; 0x12
    2c2c:	89 8b       	std	Y+17, r24	; 0x11
    2c2e:	89 89       	ldd	r24, Y+17	; 0x11
    2c30:	9a 89       	ldd	r25, Y+18	; 0x12
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <Password_Entry+0x154>
    2c36:	9a 8b       	std	Y+18, r25	; 0x12
    2c38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	9c 8b       	std	Y+20, r25	; 0x14
    2c42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c44:	8b 89       	ldd	r24, Y+19	; 0x13
    2c46:	9c 89       	ldd	r25, Y+20	; 0x14
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	69 f7       	brne	.-38     	; 0x2c26 <Password_Entry+0x148>
    2c4c:	14 c0       	rjmp	.+40     	; 0x2c76 <Password_Entry+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c50:	7e 89       	ldd	r23, Y+22	; 0x16
    2c52:	8f 89       	ldd	r24, Y+23	; 0x17
    2c54:	98 8d       	ldd	r25, Y+24	; 0x18
    2c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	9c 8b       	std	Y+20, r25	; 0x14
    2c60:	8b 8b       	std	Y+19, r24	; 0x13
    2c62:	8b 89       	ldd	r24, Y+19	; 0x13
    2c64:	9c 89       	ldd	r25, Y+20	; 0x14
    2c66:	98 8b       	std	Y+16, r25	; 0x10
    2c68:	8f 87       	std	Y+15, r24	; 0x0f
    2c6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c6c:	98 89       	ldd	r25, Y+16	; 0x10
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <Password_Entry+0x190>
    2c72:	98 8b       	std	Y+16, r25	; 0x10
    2c74:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(150);
				LCD_goToRowColumn(1, i);
    2c76:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	69 2f       	mov	r22, r25
    2c7c:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LCD_goToRowColumn>
				LCD_displayCharacter('*');
    2c80:	8a e2       	ldi	r24, 0x2A	; 42
    2c82:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_displayCharacter>
				i++;
    2c86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c88:	98 a1       	ldd	r25, Y+32	; 0x20
    2c8a:	01 96       	adiw	r24, 0x01	; 1
    2c8c:	98 a3       	std	Y+32, r25	; 0x20
    2c8e:	8f 8f       	std	Y+31, r24	; 0x1f
    2c90:	16 c0       	rjmp	.+44     	; 0x2cbe <Password_Entry+0x1e0>
			}
			else
			{
				if(i)
    2c92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c94:	98 a1       	ldd	r25, Y+32	; 0x20
    2c96:	00 97       	sbiw	r24, 0x00	; 0
    2c98:	91 f0       	breq	.+36     	; 0x2cbe <Password_Entry+0x1e0>
				{
				--i;
    2c9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c9c:	98 a1       	ldd	r25, Y+32	; 0x20
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	98 a3       	std	Y+32, r25	; 0x20
    2ca2:	8f 8f       	std	Y+31, r24	; 0x1f
				LCD_goToRowColumn(1, i);
    2ca4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	69 2f       	mov	r22, r25
    2caa:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LCD_goToRowColumn>
				LCD_displayCharacter(' ');
    2cae:	80 e2       	ldi	r24, 0x20	; 32
    2cb0:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_displayCharacter>
				LCD_goToRowColumn(1, i);
    2cb4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	69 2f       	mov	r22, r25
    2cba:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LCD_goToRowColumn>
				}
			}
				flag = TRUE;
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	8e 8f       	std	Y+30, r24	; 0x1e
    2cc2:	07 c0       	rjmp	.+14     	; 0x2cd2 <Password_Entry+0x1f4>
		}
		else if (key && flag)
    2cc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cc6:	88 23       	and	r24, r24
    2cc8:	19 f0       	breq	.+6      	; 0x2cd0 <Password_Entry+0x1f2>
    2cca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ccc:	88 23       	and	r24, r24
    2cce:	09 f4       	brne	.+2      	; 0x2cd2 <Password_Entry+0x1f4>
		{
		}
		else
		{
		flag = FALSE;
    2cd0:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 flag=FALSE;
	uint8 key;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0,msg);
	LCD_goToRowColumn(1, 0);
	while(i < PASSWORD_LENGTH)
    2cd2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cd4:	98 a1       	ldd	r25, Y+32	; 0x20
    2cd6:	85 30       	cpi	r24, 0x05	; 5
    2cd8:	91 05       	cpc	r25, r1
    2cda:	0c f4       	brge	.+2      	; 0x2cde <Password_Entry+0x200>
    2cdc:	1f cf       	rjmp	.-450    	; 0x2b1c <Password_Entry+0x3e>
		{
		flag = FALSE;
		}

	}
	entered_Password[i]='\0';
    2cde:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2ce0:	38 a1       	ldd	r19, Y+32	; 0x20
    2ce2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ce4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	e2 0f       	add	r30, r18
    2cea:	f3 1f       	adc	r31, r19
    2cec:	10 82       	st	Z, r1
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	a8 e4       	ldi	r26, 0x48	; 72
    2cf4:	b3 e4       	ldi	r27, 0x43	; 67
    2cf6:	8b 87       	std	Y+11, r24	; 0x0b
    2cf8:	9c 87       	std	Y+12, r25	; 0x0c
    2cfa:	ad 87       	std	Y+13, r26	; 0x0d
    2cfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	4a e7       	ldi	r20, 0x7A	; 122
    2d0c:	53 e4       	ldi	r21, 0x43	; 67
    2d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	8f 83       	std	Y+7, r24	; 0x07
    2d18:	98 87       	std	Y+8, r25	; 0x08
    2d1a:	a9 87       	std	Y+9, r26	; 0x09
    2d1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d20:	78 85       	ldd	r23, Y+8	; 0x08
    2d22:	89 85       	ldd	r24, Y+9	; 0x09
    2d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e8       	ldi	r20, 0x80	; 128
    2d2c:	5f e3       	ldi	r21, 0x3F	; 63
    2d2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d32:	88 23       	and	r24, r24
    2d34:	2c f4       	brge	.+10     	; 0x2d40 <Password_Entry+0x262>
		__ticks = 1;
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	9e 83       	std	Y+6, r25	; 0x06
    2d3c:	8d 83       	std	Y+5, r24	; 0x05
    2d3e:	3f c0       	rjmp	.+126    	; 0x2dbe <Password_Entry+0x2e0>
	else if (__tmp > 65535)
    2d40:	6f 81       	ldd	r22, Y+7	; 0x07
    2d42:	78 85       	ldd	r23, Y+8	; 0x08
    2d44:	89 85       	ldd	r24, Y+9	; 0x09
    2d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	3f ef       	ldi	r19, 0xFF	; 255
    2d4c:	4f e7       	ldi	r20, 0x7F	; 127
    2d4e:	57 e4       	ldi	r21, 0x47	; 71
    2d50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d54:	18 16       	cp	r1, r24
    2d56:	4c f5       	brge	.+82     	; 0x2daa <Password_Entry+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e2       	ldi	r20, 0x20	; 32
    2d66:	51 e4       	ldi	r21, 0x41	; 65
    2d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	bc 01       	movw	r22, r24
    2d72:	cd 01       	movw	r24, r26
    2d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	9e 83       	std	Y+6, r25	; 0x06
    2d7e:	8d 83       	std	Y+5, r24	; 0x05
    2d80:	0f c0       	rjmp	.+30     	; 0x2da0 <Password_Entry+0x2c2>
    2d82:	89 e1       	ldi	r24, 0x19	; 25
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	9c 83       	std	Y+4, r25	; 0x04
    2d88:	8b 83       	std	Y+3, r24	; 0x03
    2d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	f1 f7       	brne	.-4      	; 0x2d8e <Password_Entry+0x2b0>
    2d92:	9c 83       	std	Y+4, r25	; 0x04
    2d94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d96:	8d 81       	ldd	r24, Y+5	; 0x05
    2d98:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	9e 83       	std	Y+6, r25	; 0x06
    2d9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da0:	8d 81       	ldd	r24, Y+5	; 0x05
    2da2:	9e 81       	ldd	r25, Y+6	; 0x06
    2da4:	00 97       	sbiw	r24, 0x00	; 0
    2da6:	69 f7       	brne	.-38     	; 0x2d82 <Password_Entry+0x2a4>
    2da8:	14 c0       	rjmp	.+40     	; 0x2dd2 <Password_Entry+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2daa:	6f 81       	ldd	r22, Y+7	; 0x07
    2dac:	78 85       	ldd	r23, Y+8	; 0x08
    2dae:	89 85       	ldd	r24, Y+9	; 0x09
    2db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	9e 83       	std	Y+6, r25	; 0x06
    2dbc:	8d 83       	std	Y+5, r24	; 0x05
    2dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc2:	9a 83       	std	Y+2, r25	; 0x02
    2dc4:	89 83       	std	Y+1, r24	; 0x01
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	f1 f7       	brne	.-4      	; 0x2dca <Password_Entry+0x2ec>
    2dce:	9a 83       	std	Y+2, r25	; 0x02
    2dd0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DELAY_PERIOD_1/5);
}
    2dd2:	a4 96       	adiw	r28, 0x24	; 36
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
    2dde:	cf 91       	pop	r28
    2de0:	df 91       	pop	r29
    2de2:	08 95       	ret

00002de4 <options>:
void options()
{
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	61 97       	sbiw	r28, 0x11	; 17
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
	uint8 choice=0;
    2df8:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_clearScreen();
    2dfa:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0,"Choose one of following options : ");
    2dfe:	23 e0       	ldi	r18, 0x03	; 3
    2e00:	31 e0       	ldi	r19, 0x01	; 1
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	60 e0       	ldi	r22, 0x00	; 0
    2e06:	a9 01       	movw	r20, r18
    2e08:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	aa e7       	ldi	r26, 0x7A	; 122
    2e12:	b4 e4       	ldi	r27, 0x44	; 68
    2e14:	8b 87       	std	Y+11, r24	; 0x0b
    2e16:	9c 87       	std	Y+12, r25	; 0x0c
    2e18:	ad 87       	std	Y+13, r26	; 0x0d
    2e1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	4a e7       	ldi	r20, 0x7A	; 122
    2e2a:	53 e4       	ldi	r21, 0x43	; 67
    2e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	8f 83       	std	Y+7, r24	; 0x07
    2e36:	98 87       	std	Y+8, r25	; 0x08
    2e38:	a9 87       	std	Y+9, r26	; 0x09
    2e3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3e:	78 85       	ldd	r23, Y+8	; 0x08
    2e40:	89 85       	ldd	r24, Y+9	; 0x09
    2e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e8       	ldi	r20, 0x80	; 128
    2e4a:	5f e3       	ldi	r21, 0x3F	; 63
    2e4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e50:	88 23       	and	r24, r24
    2e52:	2c f4       	brge	.+10     	; 0x2e5e <options+0x7a>
		__ticks = 1;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	9e 83       	std	Y+6, r25	; 0x06
    2e5a:	8d 83       	std	Y+5, r24	; 0x05
    2e5c:	3f c0       	rjmp	.+126    	; 0x2edc <options+0xf8>
	else if (__tmp > 65535)
    2e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e60:	78 85       	ldd	r23, Y+8	; 0x08
    2e62:	89 85       	ldd	r24, Y+9	; 0x09
    2e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	3f ef       	ldi	r19, 0xFF	; 255
    2e6a:	4f e7       	ldi	r20, 0x7F	; 127
    2e6c:	57 e4       	ldi	r21, 0x47	; 71
    2e6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e72:	18 16       	cp	r1, r24
    2e74:	4c f5       	brge	.+82     	; 0x2ec8 <options+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e2       	ldi	r20, 0x20	; 32
    2e84:	51 e4       	ldi	r21, 0x41	; 65
    2e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	bc 01       	movw	r22, r24
    2e90:	cd 01       	movw	r24, r26
    2e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	9e 83       	std	Y+6, r25	; 0x06
    2e9c:	8d 83       	std	Y+5, r24	; 0x05
    2e9e:	0f c0       	rjmp	.+30     	; 0x2ebe <options+0xda>
    2ea0:	89 e1       	ldi	r24, 0x19	; 25
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	9c 83       	std	Y+4, r25	; 0x04
    2ea6:	8b 83       	std	Y+3, r24	; 0x03
    2ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <options+0xc8>
    2eb0:	9c 83       	std	Y+4, r25	; 0x04
    2eb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	69 f7       	brne	.-38     	; 0x2ea0 <options+0xbc>
    2ec6:	14 c0       	rjmp	.+40     	; 0x2ef0 <options+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eca:	78 85       	ldd	r23, Y+8	; 0x08
    2ecc:	89 85       	ldd	r24, Y+9	; 0x09
    2ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	9e 83       	std	Y+6, r25	; 0x06
    2eda:	8d 83       	std	Y+5, r24	; 0x05
    2edc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ede:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee0:	9a 83       	std	Y+2, r25	; 0x02
    2ee2:	89 83       	std	Y+1, r24	; 0x01
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <options+0x104>
    2eec:	9a 83       	std	Y+2, r25	; 0x02
    2eee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DELAY_PERIOD_1);
	LCD_clearScreen();
    2ef0:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0,"1- Lock door");
    2ef4:	26 e2       	ldi	r18, 0x26	; 38
    2ef6:	31 e0       	ldi	r19, 0x01	; 1
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	60 e0       	ldi	r22, 0x00	; 0
    2efc:	a9 01       	movw	r20, r18
    2efe:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(0, 16,"2- Unlock door");
    2f02:	23 e3       	ldi	r18, 0x33	; 51
    2f04:	31 e0       	ldi	r19, 0x01	; 1
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	60 e1       	ldi	r22, 0x10	; 16
    2f0a:	a9 01       	movw	r20, r18
    2f0c:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0,"3- Change password");
    2f10:	22 e4       	ldi	r18, 0x42	; 66
    2f12:	31 e0       	ldi	r19, 0x01	; 1
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	60 e0       	ldi	r22, 0x00	; 0
    2f18:	a9 01       	movw	r20, r18
    2f1a:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 21,"4- Log out");
    2f1e:	25 e5       	ldi	r18, 0x55	; 85
    2f20:	31 e0       	ldi	r19, 0x01	; 1
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	65 e1       	ldi	r22, 0x15	; 21
    2f26:	a9 01       	movw	r20, r18
    2f28:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
    2f2c:	30 c0       	rjmp	.+96     	; 0x2f8e <options+0x1aa>
	while(!choice)
	{
		choice = KeyPad_getPressedKey();
    2f2e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <KeyPad_getPressedKey>
    2f32:	8f 87       	std	Y+15, r24	; 0x0f
		switch(choice)
    2f34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f36:	28 2f       	mov	r18, r24
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	39 8b       	std	Y+17, r19	; 0x11
    2f3c:	28 8b       	std	Y+16, r18	; 0x10
    2f3e:	88 89       	ldd	r24, Y+16	; 0x10
    2f40:	99 89       	ldd	r25, Y+17	; 0x11
    2f42:	82 30       	cpi	r24, 0x02	; 2
    2f44:	91 05       	cpc	r25, r1
    2f46:	c9 f0       	breq	.+50     	; 0x2f7a <options+0x196>
    2f48:	28 89       	ldd	r18, Y+16	; 0x10
    2f4a:	39 89       	ldd	r19, Y+17	; 0x11
    2f4c:	23 30       	cpi	r18, 0x03	; 3
    2f4e:	31 05       	cpc	r19, r1
    2f50:	34 f4       	brge	.+12     	; 0x2f5e <options+0x17a>
    2f52:	88 89       	ldd	r24, Y+16	; 0x10
    2f54:	99 89       	ldd	r25, Y+17	; 0x11
    2f56:	81 30       	cpi	r24, 0x01	; 1
    2f58:	91 05       	cpc	r25, r1
    2f5a:	61 f0       	breq	.+24     	; 0x2f74 <options+0x190>
    2f5c:	17 c0       	rjmp	.+46     	; 0x2f8c <options+0x1a8>
    2f5e:	28 89       	ldd	r18, Y+16	; 0x10
    2f60:	39 89       	ldd	r19, Y+17	; 0x11
    2f62:	23 30       	cpi	r18, 0x03	; 3
    2f64:	31 05       	cpc	r19, r1
    2f66:	61 f0       	breq	.+24     	; 0x2f80 <options+0x19c>
    2f68:	88 89       	ldd	r24, Y+16	; 0x10
    2f6a:	99 89       	ldd	r25, Y+17	; 0x11
    2f6c:	84 30       	cpi	r24, 0x04	; 4
    2f6e:	91 05       	cpc	r25, r1
    2f70:	51 f0       	breq	.+20     	; 0x2f86 <options+0x1a2>
    2f72:	0c c0       	rjmp	.+24     	; 0x2f8c <options+0x1a8>
		{
		case 1:
			lockDoor();
    2f74:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <lockDoor>
    2f78:	0a c0       	rjmp	.+20     	; 0x2f8e <options+0x1aa>
			break;
		case 2:
			unlockDoor();
    2f7a:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <unlockDoor>
    2f7e:	07 c0       	rjmp	.+14     	; 0x2f8e <options+0x1aa>
			break;
		case 3:
			changePassword();
    2f80:	0e 94 25 1a 	call	0x344a	; 0x344a <changePassword>
    2f84:	04 c0       	rjmp	.+8      	; 0x2f8e <options+0x1aa>
			break;
		case 4:
			logOut();
    2f86:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <logOut>
    2f8a:	01 c0       	rjmp	.+2      	; 0x2f8e <options+0x1aa>
			break;
		default:
			choice = 0;
    2f8c:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0,"1- Lock door");
	LCD_displayStringRowColumn(0, 16,"2- Unlock door");
	LCD_displayStringRowColumn(1, 0,"3- Change password");
	LCD_displayStringRowColumn(1, 21,"4- Log out");
	while(!choice)
    2f8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f90:	88 23       	and	r24, r24
    2f92:	69 f2       	breq	.-102    	; 0x2f2e <options+0x14a>
			break;
		default:
			choice = 0;
		}
	}
}
    2f94:	61 96       	adiw	r28, 0x11	; 17
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	cd bf       	out	0x3d, r28	; 61
    2fa0:	cf 91       	pop	r28
    2fa2:	df 91       	pop	r29
    2fa4:	08 95       	ret

00002fa6 <lockDoor>:
void lockDoor()
{
    2fa6:	df 93       	push	r29
    2fa8:	cf 93       	push	r28
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
    2fae:	6c 97       	sbiw	r28, 0x1c	; 28
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
	sendCommand(LOCK_DOOR_COMMAND);
    2fba:	82 e0       	ldi	r24, 0x02	; 2
    2fbc:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <sendCommand>
	if(Resieve_Byte())
    2fc0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Resieve_Byte>
    2fc4:	88 23       	and	r24, r24
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <lockDoor+0x24>
    2fc8:	7e c0       	rjmp	.+252    	; 0x30c6 <lockDoor+0x120>
	{
		LCD_clearScreen();
    2fca:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0,"Door is already Locked ");
    2fce:	20 e6       	ldi	r18, 0x60	; 96
    2fd0:	31 e0       	ldi	r19, 0x01	; 1
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	60 e0       	ldi	r22, 0x00	; 0
    2fd6:	a9 01       	movw	r20, r18
    2fd8:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	aa e7       	ldi	r26, 0x7A	; 122
    2fe2:	b4 e4       	ldi	r27, 0x44	; 68
    2fe4:	89 8f       	std	Y+25, r24	; 0x19
    2fe6:	9a 8f       	std	Y+26, r25	; 0x1a
    2fe8:	ab 8f       	std	Y+27, r26	; 0x1b
    2fea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fec:	69 8d       	ldd	r22, Y+25	; 0x19
    2fee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ff0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ff2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	4a e7       	ldi	r20, 0x7A	; 122
    2ffa:	53 e4       	ldi	r21, 0x43	; 67
    2ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	8d 8b       	std	Y+21, r24	; 0x15
    3006:	9e 8b       	std	Y+22, r25	; 0x16
    3008:	af 8b       	std	Y+23, r26	; 0x17
    300a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    300c:	6d 89       	ldd	r22, Y+21	; 0x15
    300e:	7e 89       	ldd	r23, Y+22	; 0x16
    3010:	8f 89       	ldd	r24, Y+23	; 0x17
    3012:	98 8d       	ldd	r25, Y+24	; 0x18
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 e8       	ldi	r20, 0x80	; 128
    301a:	5f e3       	ldi	r21, 0x3F	; 63
    301c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3020:	88 23       	and	r24, r24
    3022:	2c f4       	brge	.+10     	; 0x302e <lockDoor+0x88>
		__ticks = 1;
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	9c 8b       	std	Y+20, r25	; 0x14
    302a:	8b 8b       	std	Y+19, r24	; 0x13
    302c:	3f c0       	rjmp	.+126    	; 0x30ac <lockDoor+0x106>
	else if (__tmp > 65535)
    302e:	6d 89       	ldd	r22, Y+21	; 0x15
    3030:	7e 89       	ldd	r23, Y+22	; 0x16
    3032:	8f 89       	ldd	r24, Y+23	; 0x17
    3034:	98 8d       	ldd	r25, Y+24	; 0x18
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	3f ef       	ldi	r19, 0xFF	; 255
    303a:	4f e7       	ldi	r20, 0x7F	; 127
    303c:	57 e4       	ldi	r21, 0x47	; 71
    303e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3042:	18 16       	cp	r1, r24
    3044:	4c f5       	brge	.+82     	; 0x3098 <lockDoor+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3046:	69 8d       	ldd	r22, Y+25	; 0x19
    3048:	7a 8d       	ldd	r23, Y+26	; 0x1a
    304a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    304c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	40 e2       	ldi	r20, 0x20	; 32
    3054:	51 e4       	ldi	r21, 0x41	; 65
    3056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	bc 01       	movw	r22, r24
    3060:	cd 01       	movw	r24, r26
    3062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	9c 8b       	std	Y+20, r25	; 0x14
    306c:	8b 8b       	std	Y+19, r24	; 0x13
    306e:	0f c0       	rjmp	.+30     	; 0x308e <lockDoor+0xe8>
    3070:	89 e1       	ldi	r24, 0x19	; 25
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	9a 8b       	std	Y+18, r25	; 0x12
    3076:	89 8b       	std	Y+17, r24	; 0x11
    3078:	89 89       	ldd	r24, Y+17	; 0x11
    307a:	9a 89       	ldd	r25, Y+18	; 0x12
    307c:	01 97       	sbiw	r24, 0x01	; 1
    307e:	f1 f7       	brne	.-4      	; 0x307c <lockDoor+0xd6>
    3080:	9a 8b       	std	Y+18, r25	; 0x12
    3082:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3084:	8b 89       	ldd	r24, Y+19	; 0x13
    3086:	9c 89       	ldd	r25, Y+20	; 0x14
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	9c 8b       	std	Y+20, r25	; 0x14
    308c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    308e:	8b 89       	ldd	r24, Y+19	; 0x13
    3090:	9c 89       	ldd	r25, Y+20	; 0x14
    3092:	00 97       	sbiw	r24, 0x00	; 0
    3094:	69 f7       	brne	.-38     	; 0x3070 <lockDoor+0xca>
    3096:	14 c0       	rjmp	.+40     	; 0x30c0 <lockDoor+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3098:	6d 89       	ldd	r22, Y+21	; 0x15
    309a:	7e 89       	ldd	r23, Y+22	; 0x16
    309c:	8f 89       	ldd	r24, Y+23	; 0x17
    309e:	98 8d       	ldd	r25, Y+24	; 0x18
    30a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	9c 8b       	std	Y+20, r25	; 0x14
    30aa:	8b 8b       	std	Y+19, r24	; 0x13
    30ac:	8b 89       	ldd	r24, Y+19	; 0x13
    30ae:	9c 89       	ldd	r25, Y+20	; 0x14
    30b0:	98 8b       	std	Y+16, r25	; 0x10
    30b2:	8f 87       	std	Y+15, r24	; 0x0f
    30b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30b6:	98 89       	ldd	r25, Y+16	; 0x10
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	f1 f7       	brne	.-4      	; 0x30b8 <lockDoor+0x112>
    30bc:	98 8b       	std	Y+16, r25	; 0x10
    30be:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(DELAY_PERIOD_1);
		options();
    30c0:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <options>
    30c4:	90 c0       	rjmp	.+288    	; 0x31e6 <lockDoor+0x240>
	}
	else
	{
		LCD_clearScreen();
    30c6:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_clearScreen>
		if(Resieve_Byte())
    30ca:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Resieve_Byte>
    30ce:	88 23       	and	r24, r24
    30d0:	79 f0       	breq	.+30     	; 0x30f0 <lockDoor+0x14a>
		{
			LCD_displayStringRowColumn(0, 0,"Door have been Locked ");
    30d2:	28 e7       	ldi	r18, 0x78	; 120
    30d4:	31 e0       	ldi	r19, 0x01	; 1
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	60 e0       	ldi	r22, 0x00	; 0
    30da:	a9 01       	movw	r20, r18
    30dc:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0,"successfully !!");
    30e0:	2f e8       	ldi	r18, 0x8F	; 143
    30e2:	31 e0       	ldi	r19, 0x01	; 1
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	60 e0       	ldi	r22, 0x00	; 0
    30e8:	a9 01       	movw	r20, r18
    30ea:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
    30ee:	07 c0       	rjmp	.+14     	; 0x30fe <lockDoor+0x158>
		}
		else
		{
			LCD_displayStringRowColumn(0, 0,"Error !!");
    30f0:	2f e9       	ldi	r18, 0x9F	; 159
    30f2:	31 e0       	ldi	r19, 0x01	; 1
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	60 e0       	ldi	r22, 0x00	; 0
    30f8:	a9 01       	movw	r20, r18
    30fa:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	aa e7       	ldi	r26, 0x7A	; 122
    3104:	b4 e4       	ldi	r27, 0x44	; 68
    3106:	8b 87       	std	Y+11, r24	; 0x0b
    3108:	9c 87       	std	Y+12, r25	; 0x0c
    310a:	ad 87       	std	Y+13, r26	; 0x0d
    310c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3110:	7c 85       	ldd	r23, Y+12	; 0x0c
    3112:	8d 85       	ldd	r24, Y+13	; 0x0d
    3114:	9e 85       	ldd	r25, Y+14	; 0x0e
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	4a e7       	ldi	r20, 0x7A	; 122
    311c:	53 e4       	ldi	r21, 0x43	; 67
    311e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	8f 83       	std	Y+7, r24	; 0x07
    3128:	98 87       	std	Y+8, r25	; 0x08
    312a:	a9 87       	std	Y+9, r26	; 0x09
    312c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    312e:	6f 81       	ldd	r22, Y+7	; 0x07
    3130:	78 85       	ldd	r23, Y+8	; 0x08
    3132:	89 85       	ldd	r24, Y+9	; 0x09
    3134:	9a 85       	ldd	r25, Y+10	; 0x0a
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e8       	ldi	r20, 0x80	; 128
    313c:	5f e3       	ldi	r21, 0x3F	; 63
    313e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3142:	88 23       	and	r24, r24
    3144:	2c f4       	brge	.+10     	; 0x3150 <lockDoor+0x1aa>
		__ticks = 1;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	9e 83       	std	Y+6, r25	; 0x06
    314c:	8d 83       	std	Y+5, r24	; 0x05
    314e:	3f c0       	rjmp	.+126    	; 0x31ce <lockDoor+0x228>
	else if (__tmp > 65535)
    3150:	6f 81       	ldd	r22, Y+7	; 0x07
    3152:	78 85       	ldd	r23, Y+8	; 0x08
    3154:	89 85       	ldd	r24, Y+9	; 0x09
    3156:	9a 85       	ldd	r25, Y+10	; 0x0a
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	3f ef       	ldi	r19, 0xFF	; 255
    315c:	4f e7       	ldi	r20, 0x7F	; 127
    315e:	57 e4       	ldi	r21, 0x47	; 71
    3160:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3164:	18 16       	cp	r1, r24
    3166:	4c f5       	brge	.+82     	; 0x31ba <lockDoor+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3168:	6b 85       	ldd	r22, Y+11	; 0x0b
    316a:	7c 85       	ldd	r23, Y+12	; 0x0c
    316c:	8d 85       	ldd	r24, Y+13	; 0x0d
    316e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e2       	ldi	r20, 0x20	; 32
    3176:	51 e4       	ldi	r21, 0x41	; 65
    3178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	bc 01       	movw	r22, r24
    3182:	cd 01       	movw	r24, r26
    3184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	9e 83       	std	Y+6, r25	; 0x06
    318e:	8d 83       	std	Y+5, r24	; 0x05
    3190:	0f c0       	rjmp	.+30     	; 0x31b0 <lockDoor+0x20a>
    3192:	89 e1       	ldi	r24, 0x19	; 25
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	9c 83       	std	Y+4, r25	; 0x04
    3198:	8b 83       	std	Y+3, r24	; 0x03
    319a:	8b 81       	ldd	r24, Y+3	; 0x03
    319c:	9c 81       	ldd	r25, Y+4	; 0x04
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <lockDoor+0x1f8>
    31a2:	9c 83       	std	Y+4, r25	; 0x04
    31a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a6:	8d 81       	ldd	r24, Y+5	; 0x05
    31a8:	9e 81       	ldd	r25, Y+6	; 0x06
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	9e 83       	std	Y+6, r25	; 0x06
    31ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b0:	8d 81       	ldd	r24, Y+5	; 0x05
    31b2:	9e 81       	ldd	r25, Y+6	; 0x06
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	69 f7       	brne	.-38     	; 0x3192 <lockDoor+0x1ec>
    31b8:	14 c0       	rjmp	.+40     	; 0x31e2 <lockDoor+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ba:	6f 81       	ldd	r22, Y+7	; 0x07
    31bc:	78 85       	ldd	r23, Y+8	; 0x08
    31be:	89 85       	ldd	r24, Y+9	; 0x09
    31c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	9e 83       	std	Y+6, r25	; 0x06
    31cc:	8d 83       	std	Y+5, r24	; 0x05
    31ce:	8d 81       	ldd	r24, Y+5	; 0x05
    31d0:	9e 81       	ldd	r25, Y+6	; 0x06
    31d2:	9a 83       	std	Y+2, r25	; 0x02
    31d4:	89 83       	std	Y+1, r24	; 0x01
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	9a 81       	ldd	r25, Y+2	; 0x02
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <lockDoor+0x234>
    31de:	9a 83       	std	Y+2, r25	; 0x02
    31e0:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(DELAY_PERIOD_1);
		options();
    31e2:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <options>
	}
}
    31e6:	6c 96       	adiw	r28, 0x1c	; 28
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	f8 94       	cli
    31ec:	de bf       	out	0x3e, r29	; 62
    31ee:	0f be       	out	0x3f, r0	; 63
    31f0:	cd bf       	out	0x3d, r28	; 61
    31f2:	cf 91       	pop	r28
    31f4:	df 91       	pop	r29
    31f6:	08 95       	ret

000031f8 <unlockDoor>:
void unlockDoor()
{
    31f8:	df 93       	push	r29
    31fa:	cf 93       	push	r28
    31fc:	cd b7       	in	r28, 0x3d	; 61
    31fe:	de b7       	in	r29, 0x3e	; 62
    3200:	6c 97       	sbiw	r28, 0x1c	; 28
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	cd bf       	out	0x3d, r28	; 61
	sendCommand(UNLOCK_DOOR_COMMAND);
    320c:	83 e0       	ldi	r24, 0x03	; 3
    320e:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <sendCommand>
	if(Resieve_Byte())
    3212:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Resieve_Byte>
    3216:	88 23       	and	r24, r24
    3218:	09 f4       	brne	.+2      	; 0x321c <unlockDoor+0x24>
    321a:	91 c0       	rjmp	.+290    	; 0x333e <unlockDoor+0x146>
	{
		LCD_clearScreen();
    321c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_clearScreen>
		if(Resieve_Byte())
    3220:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Resieve_Byte>
    3224:	88 23       	and	r24, r24
    3226:	79 f0       	breq	.+30     	; 0x3246 <unlockDoor+0x4e>
		{
			LCD_displayStringRowColumn(0, 0,"Door have been opened ");
    3228:	28 ea       	ldi	r18, 0xA8	; 168
    322a:	31 e0       	ldi	r19, 0x01	; 1
    322c:	80 e0       	ldi	r24, 0x00	; 0
    322e:	60 e0       	ldi	r22, 0x00	; 0
    3230:	a9 01       	movw	r20, r18
    3232:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0,"successfully !!");
    3236:	2f e8       	ldi	r18, 0x8F	; 143
    3238:	31 e0       	ldi	r19, 0x01	; 1
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	60 e0       	ldi	r22, 0x00	; 0
    323e:	a9 01       	movw	r20, r18
    3240:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
    3244:	07 c0       	rjmp	.+14     	; 0x3254 <unlockDoor+0x5c>
		}
		else
		{
		LCD_displayStringRowColumn(0, 0,"Error !!");
    3246:	2f e9       	ldi	r18, 0x9F	; 159
    3248:	31 e0       	ldi	r19, 0x01	; 1
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	60 e0       	ldi	r22, 0x00	; 0
    324e:	a9 01       	movw	r20, r18
    3250:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	aa e7       	ldi	r26, 0x7A	; 122
    325a:	b4 e4       	ldi	r27, 0x44	; 68
    325c:	89 8f       	std	Y+25, r24	; 0x19
    325e:	9a 8f       	std	Y+26, r25	; 0x1a
    3260:	ab 8f       	std	Y+27, r26	; 0x1b
    3262:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3264:	69 8d       	ldd	r22, Y+25	; 0x19
    3266:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3268:	8b 8d       	ldd	r24, Y+27	; 0x1b
    326a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    326c:	20 e0       	ldi	r18, 0x00	; 0
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	4a e7       	ldi	r20, 0x7A	; 122
    3272:	53 e4       	ldi	r21, 0x43	; 67
    3274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	8d 8b       	std	Y+21, r24	; 0x15
    327e:	9e 8b       	std	Y+22, r25	; 0x16
    3280:	af 8b       	std	Y+23, r26	; 0x17
    3282:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3284:	6d 89       	ldd	r22, Y+21	; 0x15
    3286:	7e 89       	ldd	r23, Y+22	; 0x16
    3288:	8f 89       	ldd	r24, Y+23	; 0x17
    328a:	98 8d       	ldd	r25, Y+24	; 0x18
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	40 e8       	ldi	r20, 0x80	; 128
    3292:	5f e3       	ldi	r21, 0x3F	; 63
    3294:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3298:	88 23       	and	r24, r24
    329a:	2c f4       	brge	.+10     	; 0x32a6 <unlockDoor+0xae>
		__ticks = 1;
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	9c 8b       	std	Y+20, r25	; 0x14
    32a2:	8b 8b       	std	Y+19, r24	; 0x13
    32a4:	3f c0       	rjmp	.+126    	; 0x3324 <unlockDoor+0x12c>
	else if (__tmp > 65535)
    32a6:	6d 89       	ldd	r22, Y+21	; 0x15
    32a8:	7e 89       	ldd	r23, Y+22	; 0x16
    32aa:	8f 89       	ldd	r24, Y+23	; 0x17
    32ac:	98 8d       	ldd	r25, Y+24	; 0x18
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	3f ef       	ldi	r19, 0xFF	; 255
    32b2:	4f e7       	ldi	r20, 0x7F	; 127
    32b4:	57 e4       	ldi	r21, 0x47	; 71
    32b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ba:	18 16       	cp	r1, r24
    32bc:	4c f5       	brge	.+82     	; 0x3310 <unlockDoor+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32be:	69 8d       	ldd	r22, Y+25	; 0x19
    32c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	40 e2       	ldi	r20, 0x20	; 32
    32cc:	51 e4       	ldi	r21, 0x41	; 65
    32ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d2:	dc 01       	movw	r26, r24
    32d4:	cb 01       	movw	r24, r22
    32d6:	bc 01       	movw	r22, r24
    32d8:	cd 01       	movw	r24, r26
    32da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	9c 8b       	std	Y+20, r25	; 0x14
    32e4:	8b 8b       	std	Y+19, r24	; 0x13
    32e6:	0f c0       	rjmp	.+30     	; 0x3306 <unlockDoor+0x10e>
    32e8:	89 e1       	ldi	r24, 0x19	; 25
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	9a 8b       	std	Y+18, r25	; 0x12
    32ee:	89 8b       	std	Y+17, r24	; 0x11
    32f0:	89 89       	ldd	r24, Y+17	; 0x11
    32f2:	9a 89       	ldd	r25, Y+18	; 0x12
    32f4:	01 97       	sbiw	r24, 0x01	; 1
    32f6:	f1 f7       	brne	.-4      	; 0x32f4 <unlockDoor+0xfc>
    32f8:	9a 8b       	std	Y+18, r25	; 0x12
    32fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32fc:	8b 89       	ldd	r24, Y+19	; 0x13
    32fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	9c 8b       	std	Y+20, r25	; 0x14
    3304:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3306:	8b 89       	ldd	r24, Y+19	; 0x13
    3308:	9c 89       	ldd	r25, Y+20	; 0x14
    330a:	00 97       	sbiw	r24, 0x00	; 0
    330c:	69 f7       	brne	.-38     	; 0x32e8 <unlockDoor+0xf0>
    330e:	14 c0       	rjmp	.+40     	; 0x3338 <unlockDoor+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3310:	6d 89       	ldd	r22, Y+21	; 0x15
    3312:	7e 89       	ldd	r23, Y+22	; 0x16
    3314:	8f 89       	ldd	r24, Y+23	; 0x17
    3316:	98 8d       	ldd	r25, Y+24	; 0x18
    3318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	9c 8b       	std	Y+20, r25	; 0x14
    3322:	8b 8b       	std	Y+19, r24	; 0x13
    3324:	8b 89       	ldd	r24, Y+19	; 0x13
    3326:	9c 89       	ldd	r25, Y+20	; 0x14
    3328:	98 8b       	std	Y+16, r25	; 0x10
    332a:	8f 87       	std	Y+15, r24	; 0x0f
    332c:	8f 85       	ldd	r24, Y+15	; 0x0f
    332e:	98 89       	ldd	r25, Y+16	; 0x10
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	f1 f7       	brne	.-4      	; 0x3330 <unlockDoor+0x138>
    3334:	98 8b       	std	Y+16, r25	; 0x10
    3336:	8f 87       	std	Y+15, r24	; 0x0f
		}
		_delay_ms(DELAY_PERIOD_1);
		options();
    3338:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <options>
    333c:	7d c0       	rjmp	.+250    	; 0x3438 <unlockDoor+0x240>

	}
	else
	{
		LCD_clearScreen();
    333e:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0,"Door is already opened ");
    3342:	2f eb       	ldi	r18, 0xBF	; 191
    3344:	31 e0       	ldi	r19, 0x01	; 1
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	60 e0       	ldi	r22, 0x00	; 0
    334a:	a9 01       	movw	r20, r18
    334c:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	aa e7       	ldi	r26, 0x7A	; 122
    3356:	b4 e4       	ldi	r27, 0x44	; 68
    3358:	8b 87       	std	Y+11, r24	; 0x0b
    335a:	9c 87       	std	Y+12, r25	; 0x0c
    335c:	ad 87       	std	Y+13, r26	; 0x0d
    335e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3360:	6b 85       	ldd	r22, Y+11	; 0x0b
    3362:	7c 85       	ldd	r23, Y+12	; 0x0c
    3364:	8d 85       	ldd	r24, Y+13	; 0x0d
    3366:	9e 85       	ldd	r25, Y+14	; 0x0e
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	4a e7       	ldi	r20, 0x7A	; 122
    336e:	53 e4       	ldi	r21, 0x43	; 67
    3370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	8f 83       	std	Y+7, r24	; 0x07
    337a:	98 87       	std	Y+8, r25	; 0x08
    337c:	a9 87       	std	Y+9, r26	; 0x09
    337e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3380:	6f 81       	ldd	r22, Y+7	; 0x07
    3382:	78 85       	ldd	r23, Y+8	; 0x08
    3384:	89 85       	ldd	r24, Y+9	; 0x09
    3386:	9a 85       	ldd	r25, Y+10	; 0x0a
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	40 e8       	ldi	r20, 0x80	; 128
    338e:	5f e3       	ldi	r21, 0x3F	; 63
    3390:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3394:	88 23       	and	r24, r24
    3396:	2c f4       	brge	.+10     	; 0x33a2 <unlockDoor+0x1aa>
		__ticks = 1;
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	9e 83       	std	Y+6, r25	; 0x06
    339e:	8d 83       	std	Y+5, r24	; 0x05
    33a0:	3f c0       	rjmp	.+126    	; 0x3420 <unlockDoor+0x228>
	else if (__tmp > 65535)
    33a2:	6f 81       	ldd	r22, Y+7	; 0x07
    33a4:	78 85       	ldd	r23, Y+8	; 0x08
    33a6:	89 85       	ldd	r24, Y+9	; 0x09
    33a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	3f ef       	ldi	r19, 0xFF	; 255
    33ae:	4f e7       	ldi	r20, 0x7F	; 127
    33b0:	57 e4       	ldi	r21, 0x47	; 71
    33b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33b6:	18 16       	cp	r1, r24
    33b8:	4c f5       	brge	.+82     	; 0x340c <unlockDoor+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    33bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    33be:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	40 e2       	ldi	r20, 0x20	; 32
    33c8:	51 e4       	ldi	r21, 0x41	; 65
    33ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	bc 01       	movw	r22, r24
    33d4:	cd 01       	movw	r24, r26
    33d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	9e 83       	std	Y+6, r25	; 0x06
    33e0:	8d 83       	std	Y+5, r24	; 0x05
    33e2:	0f c0       	rjmp	.+30     	; 0x3402 <unlockDoor+0x20a>
    33e4:	89 e1       	ldi	r24, 0x19	; 25
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	9c 83       	std	Y+4, r25	; 0x04
    33ea:	8b 83       	std	Y+3, r24	; 0x03
    33ec:	8b 81       	ldd	r24, Y+3	; 0x03
    33ee:	9c 81       	ldd	r25, Y+4	; 0x04
    33f0:	01 97       	sbiw	r24, 0x01	; 1
    33f2:	f1 f7       	brne	.-4      	; 0x33f0 <unlockDoor+0x1f8>
    33f4:	9c 83       	std	Y+4, r25	; 0x04
    33f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f8:	8d 81       	ldd	r24, Y+5	; 0x05
    33fa:	9e 81       	ldd	r25, Y+6	; 0x06
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	9e 83       	std	Y+6, r25	; 0x06
    3400:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3402:	8d 81       	ldd	r24, Y+5	; 0x05
    3404:	9e 81       	ldd	r25, Y+6	; 0x06
    3406:	00 97       	sbiw	r24, 0x00	; 0
    3408:	69 f7       	brne	.-38     	; 0x33e4 <unlockDoor+0x1ec>
    340a:	14 c0       	rjmp	.+40     	; 0x3434 <unlockDoor+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    340c:	6f 81       	ldd	r22, Y+7	; 0x07
    340e:	78 85       	ldd	r23, Y+8	; 0x08
    3410:	89 85       	ldd	r24, Y+9	; 0x09
    3412:	9a 85       	ldd	r25, Y+10	; 0x0a
    3414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3418:	dc 01       	movw	r26, r24
    341a:	cb 01       	movw	r24, r22
    341c:	9e 83       	std	Y+6, r25	; 0x06
    341e:	8d 83       	std	Y+5, r24	; 0x05
    3420:	8d 81       	ldd	r24, Y+5	; 0x05
    3422:	9e 81       	ldd	r25, Y+6	; 0x06
    3424:	9a 83       	std	Y+2, r25	; 0x02
    3426:	89 83       	std	Y+1, r24	; 0x01
    3428:	89 81       	ldd	r24, Y+1	; 0x01
    342a:	9a 81       	ldd	r25, Y+2	; 0x02
    342c:	01 97       	sbiw	r24, 0x01	; 1
    342e:	f1 f7       	brne	.-4      	; 0x342c <unlockDoor+0x234>
    3430:	9a 83       	std	Y+2, r25	; 0x02
    3432:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(DELAY_PERIOD_1);
		options();
    3434:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <options>
	}
}
    3438:	6c 96       	adiw	r28, 0x1c	; 28
    343a:	0f b6       	in	r0, 0x3f	; 63
    343c:	f8 94       	cli
    343e:	de bf       	out	0x3e, r29	; 62
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	cd bf       	out	0x3d, r28	; 61
    3444:	cf 91       	pop	r28
    3446:	df 91       	pop	r29
    3448:	08 95       	ret

0000344a <changePassword>:

void changePassword()
{
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	aa 97       	sbiw	r28, 0x2a	; 42
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	de bf       	out	0x3e, r29	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	cd bf       	out	0x3d, r28	; 61
	if(assertion("Sure to change password ?"))
    345e:	87 ed       	ldi	r24, 0xD7	; 215
    3460:	91 e0       	ldi	r25, 0x01	; 1
    3462:	0e 94 05 1c 	call	0x380a	; 0x380a <assertion>
    3466:	88 23       	and	r24, r24
    3468:	09 f4       	brne	.+2      	; 0x346c <changePassword+0x22>
    346a:	af c1       	rjmp	.+862    	; 0x37ca <changePassword+0x380>
	{
		Password_Entry(entered_Password,"Enter old password");
    346c:	81 e9       	ldi	r24, 0x91	; 145
    346e:	92 e0       	ldi	r25, 0x02	; 2
    3470:	21 ef       	ldi	r18, 0xF1	; 241
    3472:	31 e0       	ldi	r19, 0x01	; 1
    3474:	b9 01       	movw	r22, r18
    3476:	0e 94 6f 15 	call	0x2ade	; 0x2ade <Password_Entry>
		if(IsCorrect(password, entered_Password))
    347a:	80 91 8d 02 	lds	r24, 0x028D
    347e:	90 91 8e 02 	lds	r25, 0x028E
    3482:	21 e9       	ldi	r18, 0x91	; 145
    3484:	32 e0       	ldi	r19, 0x02	; 2
    3486:	b9 01       	movw	r22, r18
    3488:	0e 94 34 15 	call	0x2a68	; 0x2a68 <IsCorrect>
    348c:	88 23       	and	r24, r24
    348e:	09 f4       	brne	.+2      	; 0x3492 <changePassword+0x48>
    3490:	1e c1       	rjmp	.+572    	; 0x36ce <changePassword+0x284>
		{
			Password_Entry(entered_Password,"Enter new password");
    3492:	81 e9       	ldi	r24, 0x91	; 145
    3494:	92 e0       	ldi	r25, 0x02	; 2
    3496:	24 e0       	ldi	r18, 0x04	; 4
    3498:	32 e0       	ldi	r19, 0x02	; 2
    349a:	b9 01       	movw	r22, r18
    349c:	0e 94 6f 15 	call	0x2ade	; 0x2ade <Password_Entry>
		    strCpy(password ,entered_Password);
    34a0:	80 91 8d 02 	lds	r24, 0x028D
    34a4:	90 91 8e 02 	lds	r25, 0x028E
    34a8:	21 e9       	ldi	r18, 0x91	; 145
    34aa:	32 e0       	ldi	r19, 0x02	; 2
    34ac:	b9 01       	movw	r22, r18
    34ae:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <strCpy>
		    sendCommand(CHANGE_PASSWORD_COMMAND);
    34b2:	84 e0       	ldi	r24, 0x04	; 4
    34b4:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <sendCommand>
		    Send_String(password);
    34b8:	80 91 8d 02 	lds	r24, 0x028D
    34bc:	90 91 8e 02 	lds	r25, 0x028E
    34c0:	0e 94 01 06 	call	0xc02	; 0xc02 <Send_String>
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	a8 e4       	ldi	r26, 0x48	; 72
    34ca:	b2 e4       	ldi	r27, 0x42	; 66
    34cc:	8f a3       	std	Y+39, r24	; 0x27
    34ce:	98 a7       	std	Y+40, r25	; 0x28
    34d0:	a9 a7       	std	Y+41, r26	; 0x29
    34d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d4:	6f a1       	ldd	r22, Y+39	; 0x27
    34d6:	78 a5       	ldd	r23, Y+40	; 0x28
    34d8:	89 a5       	ldd	r24, Y+41	; 0x29
    34da:	9a a5       	ldd	r25, Y+42	; 0x2a
    34dc:	20 e0       	ldi	r18, 0x00	; 0
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	4a e7       	ldi	r20, 0x7A	; 122
    34e2:	53 e4       	ldi	r21, 0x43	; 67
    34e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	8b a3       	std	Y+35, r24	; 0x23
    34ee:	9c a3       	std	Y+36, r25	; 0x24
    34f0:	ad a3       	std	Y+37, r26	; 0x25
    34f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34f4:	6b a1       	ldd	r22, Y+35	; 0x23
    34f6:	7c a1       	ldd	r23, Y+36	; 0x24
    34f8:	8d a1       	ldd	r24, Y+37	; 0x25
    34fa:	9e a1       	ldd	r25, Y+38	; 0x26
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	40 e8       	ldi	r20, 0x80	; 128
    3502:	5f e3       	ldi	r21, 0x3F	; 63
    3504:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3508:	88 23       	and	r24, r24
    350a:	2c f4       	brge	.+10     	; 0x3516 <changePassword+0xcc>
		__ticks = 1;
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	9a a3       	std	Y+34, r25	; 0x22
    3512:	89 a3       	std	Y+33, r24	; 0x21
    3514:	3f c0       	rjmp	.+126    	; 0x3594 <changePassword+0x14a>
	else if (__tmp > 65535)
    3516:	6b a1       	ldd	r22, Y+35	; 0x23
    3518:	7c a1       	ldd	r23, Y+36	; 0x24
    351a:	8d a1       	ldd	r24, Y+37	; 0x25
    351c:	9e a1       	ldd	r25, Y+38	; 0x26
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	3f ef       	ldi	r19, 0xFF	; 255
    3522:	4f e7       	ldi	r20, 0x7F	; 127
    3524:	57 e4       	ldi	r21, 0x47	; 71
    3526:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    352a:	18 16       	cp	r1, r24
    352c:	4c f5       	brge	.+82     	; 0x3580 <changePassword+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    352e:	6f a1       	ldd	r22, Y+39	; 0x27
    3530:	78 a5       	ldd	r23, Y+40	; 0x28
    3532:	89 a5       	ldd	r24, Y+41	; 0x29
    3534:	9a a5       	ldd	r25, Y+42	; 0x2a
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	40 e2       	ldi	r20, 0x20	; 32
    353c:	51 e4       	ldi	r21, 0x41	; 65
    353e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	bc 01       	movw	r22, r24
    3548:	cd 01       	movw	r24, r26
    354a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	9a a3       	std	Y+34, r25	; 0x22
    3554:	89 a3       	std	Y+33, r24	; 0x21
    3556:	0f c0       	rjmp	.+30     	; 0x3576 <changePassword+0x12c>
    3558:	89 e1       	ldi	r24, 0x19	; 25
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	98 a3       	std	Y+32, r25	; 0x20
    355e:	8f 8f       	std	Y+31, r24	; 0x1f
    3560:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3562:	98 a1       	ldd	r25, Y+32	; 0x20
    3564:	01 97       	sbiw	r24, 0x01	; 1
    3566:	f1 f7       	brne	.-4      	; 0x3564 <changePassword+0x11a>
    3568:	98 a3       	std	Y+32, r25	; 0x20
    356a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    356c:	89 a1       	ldd	r24, Y+33	; 0x21
    356e:	9a a1       	ldd	r25, Y+34	; 0x22
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	9a a3       	std	Y+34, r25	; 0x22
    3574:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3576:	89 a1       	ldd	r24, Y+33	; 0x21
    3578:	9a a1       	ldd	r25, Y+34	; 0x22
    357a:	00 97       	sbiw	r24, 0x00	; 0
    357c:	69 f7       	brne	.-38     	; 0x3558 <changePassword+0x10e>
    357e:	14 c0       	rjmp	.+40     	; 0x35a8 <changePassword+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3580:	6b a1       	ldd	r22, Y+35	; 0x23
    3582:	7c a1       	ldd	r23, Y+36	; 0x24
    3584:	8d a1       	ldd	r24, Y+37	; 0x25
    3586:	9e a1       	ldd	r25, Y+38	; 0x26
    3588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	9a a3       	std	Y+34, r25	; 0x22
    3592:	89 a3       	std	Y+33, r24	; 0x21
    3594:	89 a1       	ldd	r24, Y+33	; 0x21
    3596:	9a a1       	ldd	r25, Y+34	; 0x22
    3598:	9e 8f       	std	Y+30, r25	; 0x1e
    359a:	8d 8f       	std	Y+29, r24	; 0x1d
    359c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    359e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	f1 f7       	brne	.-4      	; 0x35a0 <changePassword+0x156>
    35a4:	9e 8f       	std	Y+30, r25	; 0x1e
    35a6:	8d 8f       	std	Y+29, r24	; 0x1d
		    _delay_ms(DELAY_PERIOD_1/20);
			LCD_clearScreen();
    35a8:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_clearScreen>
		    if(Resieve_Byte())
    35ac:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Resieve_Byte>
    35b0:	88 23       	and	r24, r24
    35b2:	41 f0       	breq	.+16     	; 0x35c4 <changePassword+0x17a>
		    {
		    	LCD_displayStringRowColumn(0, 0,"password saved successfully !!");
    35b4:	27 e1       	ldi	r18, 0x17	; 23
    35b6:	32 e0       	ldi	r19, 0x02	; 2
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	60 e0       	ldi	r22, 0x00	; 0
    35bc:	a9 01       	movw	r20, r18
    35be:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
    35c2:	07 c0       	rjmp	.+14     	; 0x35d2 <changePassword+0x188>
		    }
		    else
		    {
				LCD_displayStringRowColumn(0, 0,"Error !!");
    35c4:	2f e9       	ldi	r18, 0x9F	; 159
    35c6:	31 e0       	ldi	r19, 0x01	; 1
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	60 e0       	ldi	r22, 0x00	; 0
    35cc:	a9 01       	movw	r20, r18
    35ce:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
    35d2:	80 e0       	ldi	r24, 0x00	; 0
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	aa e7       	ldi	r26, 0x7A	; 122
    35d8:	b4 e4       	ldi	r27, 0x44	; 68
    35da:	89 8f       	std	Y+25, r24	; 0x19
    35dc:	9a 8f       	std	Y+26, r25	; 0x1a
    35de:	ab 8f       	std	Y+27, r26	; 0x1b
    35e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e2:	69 8d       	ldd	r22, Y+25	; 0x19
    35e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	4a e7       	ldi	r20, 0x7A	; 122
    35f0:	53 e4       	ldi	r21, 0x43	; 67
    35f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	8d 8b       	std	Y+21, r24	; 0x15
    35fc:	9e 8b       	std	Y+22, r25	; 0x16
    35fe:	af 8b       	std	Y+23, r26	; 0x17
    3600:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3602:	6d 89       	ldd	r22, Y+21	; 0x15
    3604:	7e 89       	ldd	r23, Y+22	; 0x16
    3606:	8f 89       	ldd	r24, Y+23	; 0x17
    3608:	98 8d       	ldd	r25, Y+24	; 0x18
    360a:	20 e0       	ldi	r18, 0x00	; 0
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	40 e8       	ldi	r20, 0x80	; 128
    3610:	5f e3       	ldi	r21, 0x3F	; 63
    3612:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3616:	88 23       	and	r24, r24
    3618:	2c f4       	brge	.+10     	; 0x3624 <changePassword+0x1da>
		__ticks = 1;
    361a:	81 e0       	ldi	r24, 0x01	; 1
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	9c 8b       	std	Y+20, r25	; 0x14
    3620:	8b 8b       	std	Y+19, r24	; 0x13
    3622:	3f c0       	rjmp	.+126    	; 0x36a2 <changePassword+0x258>
	else if (__tmp > 65535)
    3624:	6d 89       	ldd	r22, Y+21	; 0x15
    3626:	7e 89       	ldd	r23, Y+22	; 0x16
    3628:	8f 89       	ldd	r24, Y+23	; 0x17
    362a:	98 8d       	ldd	r25, Y+24	; 0x18
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	3f ef       	ldi	r19, 0xFF	; 255
    3630:	4f e7       	ldi	r20, 0x7F	; 127
    3632:	57 e4       	ldi	r21, 0x47	; 71
    3634:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3638:	18 16       	cp	r1, r24
    363a:	4c f5       	brge	.+82     	; 0x368e <changePassword+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    363c:	69 8d       	ldd	r22, Y+25	; 0x19
    363e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3640:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3642:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	40 e2       	ldi	r20, 0x20	; 32
    364a:	51 e4       	ldi	r21, 0x41	; 65
    364c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	bc 01       	movw	r22, r24
    3656:	cd 01       	movw	r24, r26
    3658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	9c 8b       	std	Y+20, r25	; 0x14
    3662:	8b 8b       	std	Y+19, r24	; 0x13
    3664:	0f c0       	rjmp	.+30     	; 0x3684 <changePassword+0x23a>
    3666:	89 e1       	ldi	r24, 0x19	; 25
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	9a 8b       	std	Y+18, r25	; 0x12
    366c:	89 8b       	std	Y+17, r24	; 0x11
    366e:	89 89       	ldd	r24, Y+17	; 0x11
    3670:	9a 89       	ldd	r25, Y+18	; 0x12
    3672:	01 97       	sbiw	r24, 0x01	; 1
    3674:	f1 f7       	brne	.-4      	; 0x3672 <changePassword+0x228>
    3676:	9a 8b       	std	Y+18, r25	; 0x12
    3678:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    367a:	8b 89       	ldd	r24, Y+19	; 0x13
    367c:	9c 89       	ldd	r25, Y+20	; 0x14
    367e:	01 97       	sbiw	r24, 0x01	; 1
    3680:	9c 8b       	std	Y+20, r25	; 0x14
    3682:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3684:	8b 89       	ldd	r24, Y+19	; 0x13
    3686:	9c 89       	ldd	r25, Y+20	; 0x14
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	69 f7       	brne	.-38     	; 0x3666 <changePassword+0x21c>
    368c:	14 c0       	rjmp	.+40     	; 0x36b6 <changePassword+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    368e:	6d 89       	ldd	r22, Y+21	; 0x15
    3690:	7e 89       	ldd	r23, Y+22	; 0x16
    3692:	8f 89       	ldd	r24, Y+23	; 0x17
    3694:	98 8d       	ldd	r25, Y+24	; 0x18
    3696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	9c 8b       	std	Y+20, r25	; 0x14
    36a0:	8b 8b       	std	Y+19, r24	; 0x13
    36a2:	8b 89       	ldd	r24, Y+19	; 0x13
    36a4:	9c 89       	ldd	r25, Y+20	; 0x14
    36a6:	98 8b       	std	Y+16, r25	; 0x10
    36a8:	8f 87       	std	Y+15, r24	; 0x0f
    36aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ac:	98 89       	ldd	r25, Y+16	; 0x10
    36ae:	01 97       	sbiw	r24, 0x01	; 1
    36b0:	f1 f7       	brne	.-4      	; 0x36ae <changePassword+0x264>
    36b2:	98 8b       	std	Y+16, r25	; 0x10
    36b4:	8f 87       	std	Y+15, r24	; 0x0f

		    }
		   _delay_ms(DELAY_PERIOD_1);
			sendCommand(FETCH_PASSWORD_COMMAND);
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <sendCommand>
			Resieve_String(password);
    36bc:	80 91 8d 02 	lds	r24, 0x028D
    36c0:	90 91 8e 02 	lds	r25, 0x028E
    36c4:	0e 94 19 07 	call	0xe32	; 0xe32 <Resieve_String>
			endSession();
    36c8:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <endSession>
    36cc:	80 c0       	rjmp	.+256    	; 0x37ce <changePassword+0x384>
		}
		else
		{
			LCD_clearScreen();
    36ce:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0,"Password is not correct :( ");
    36d2:	2d e9       	ldi	r18, 0x9D	; 157
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	60 e0       	ldi	r22, 0x00	; 0
    36da:	a9 01       	movw	r20, r18
    36dc:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
    36e0:	80 e0       	ldi	r24, 0x00	; 0
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	aa e7       	ldi	r26, 0x7A	; 122
    36e6:	b4 e4       	ldi	r27, 0x44	; 68
    36e8:	8b 87       	std	Y+11, r24	; 0x0b
    36ea:	9c 87       	std	Y+12, r25	; 0x0c
    36ec:	ad 87       	std	Y+13, r26	; 0x0d
    36ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	4a e7       	ldi	r20, 0x7A	; 122
    36fe:	53 e4       	ldi	r21, 0x43	; 67
    3700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	8f 83       	std	Y+7, r24	; 0x07
    370a:	98 87       	std	Y+8, r25	; 0x08
    370c:	a9 87       	std	Y+9, r26	; 0x09
    370e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3710:	6f 81       	ldd	r22, Y+7	; 0x07
    3712:	78 85       	ldd	r23, Y+8	; 0x08
    3714:	89 85       	ldd	r24, Y+9	; 0x09
    3716:	9a 85       	ldd	r25, Y+10	; 0x0a
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	40 e8       	ldi	r20, 0x80	; 128
    371e:	5f e3       	ldi	r21, 0x3F	; 63
    3720:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3724:	88 23       	and	r24, r24
    3726:	2c f4       	brge	.+10     	; 0x3732 <changePassword+0x2e8>
		__ticks = 1;
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	9e 83       	std	Y+6, r25	; 0x06
    372e:	8d 83       	std	Y+5, r24	; 0x05
    3730:	3f c0       	rjmp	.+126    	; 0x37b0 <changePassword+0x366>
	else if (__tmp > 65535)
    3732:	6f 81       	ldd	r22, Y+7	; 0x07
    3734:	78 85       	ldd	r23, Y+8	; 0x08
    3736:	89 85       	ldd	r24, Y+9	; 0x09
    3738:	9a 85       	ldd	r25, Y+10	; 0x0a
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	3f ef       	ldi	r19, 0xFF	; 255
    373e:	4f e7       	ldi	r20, 0x7F	; 127
    3740:	57 e4       	ldi	r21, 0x47	; 71
    3742:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3746:	18 16       	cp	r1, r24
    3748:	4c f5       	brge	.+82     	; 0x379c <changePassword+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374a:	6b 85       	ldd	r22, Y+11	; 0x0b
    374c:	7c 85       	ldd	r23, Y+12	; 0x0c
    374e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3750:	9e 85       	ldd	r25, Y+14	; 0x0e
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	40 e2       	ldi	r20, 0x20	; 32
    3758:	51 e4       	ldi	r21, 0x41	; 65
    375a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	bc 01       	movw	r22, r24
    3764:	cd 01       	movw	r24, r26
    3766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	9e 83       	std	Y+6, r25	; 0x06
    3770:	8d 83       	std	Y+5, r24	; 0x05
    3772:	0f c0       	rjmp	.+30     	; 0x3792 <changePassword+0x348>
    3774:	89 e1       	ldi	r24, 0x19	; 25
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	9c 83       	std	Y+4, r25	; 0x04
    377a:	8b 83       	std	Y+3, r24	; 0x03
    377c:	8b 81       	ldd	r24, Y+3	; 0x03
    377e:	9c 81       	ldd	r25, Y+4	; 0x04
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	f1 f7       	brne	.-4      	; 0x3780 <changePassword+0x336>
    3784:	9c 83       	std	Y+4, r25	; 0x04
    3786:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3788:	8d 81       	ldd	r24, Y+5	; 0x05
    378a:	9e 81       	ldd	r25, Y+6	; 0x06
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	9e 83       	std	Y+6, r25	; 0x06
    3790:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3792:	8d 81       	ldd	r24, Y+5	; 0x05
    3794:	9e 81       	ldd	r25, Y+6	; 0x06
    3796:	00 97       	sbiw	r24, 0x00	; 0
    3798:	69 f7       	brne	.-38     	; 0x3774 <changePassword+0x32a>
    379a:	14 c0       	rjmp	.+40     	; 0x37c4 <changePassword+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    379c:	6f 81       	ldd	r22, Y+7	; 0x07
    379e:	78 85       	ldd	r23, Y+8	; 0x08
    37a0:	89 85       	ldd	r24, Y+9	; 0x09
    37a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	9e 83       	std	Y+6, r25	; 0x06
    37ae:	8d 83       	std	Y+5, r24	; 0x05
    37b0:	8d 81       	ldd	r24, Y+5	; 0x05
    37b2:	9e 81       	ldd	r25, Y+6	; 0x06
    37b4:	9a 83       	std	Y+2, r25	; 0x02
    37b6:	89 83       	std	Y+1, r24	; 0x01
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	9a 81       	ldd	r25, Y+2	; 0x02
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <changePassword+0x372>
    37c0:	9a 83       	std	Y+2, r25	; 0x02
    37c2:	89 83       	std	Y+1, r24	; 0x01
		   _delay_ms(DELAY_PERIOD_1);
			options();
    37c4:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <options>
    37c8:	02 c0       	rjmp	.+4      	; 0x37ce <changePassword+0x384>
		}
	}
	else
	{
	options();
    37ca:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <options>
	}

}
    37ce:	aa 96       	adiw	r28, 0x2a	; 42
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	f8 94       	cli
    37d4:	de bf       	out	0x3e, r29	; 62
    37d6:	0f be       	out	0x3f, r0	; 63
    37d8:	cd bf       	out	0x3d, r28	; 61
    37da:	cf 91       	pop	r28
    37dc:	df 91       	pop	r29
    37de:	08 95       	ret

000037e0 <logOut>:
void logOut()
{
    37e0:	df 93       	push	r29
    37e2:	cf 93       	push	r28
    37e4:	cd b7       	in	r28, 0x3d	; 61
    37e6:	de b7       	in	r29, 0x3e	; 62
	if(assertion("Are you sure to log out?"))
    37e8:	86 e3       	ldi	r24, 0x36	; 54
    37ea:	92 e0       	ldi	r25, 0x02	; 2
    37ec:	0e 94 05 1c 	call	0x380a	; 0x380a <assertion>
    37f0:	88 23       	and	r24, r24
    37f2:	31 f0       	breq	.+12     	; 0x3800 <logOut+0x20>
	{
		sendCommand(LOG_OUT_COMMAND);
    37f4:	85 e0       	ldi	r24, 0x05	; 5
    37f6:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <sendCommand>
		endSession();
    37fa:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <endSession>
    37fe:	02 c0       	rjmp	.+4      	; 0x3804 <logOut+0x24>
	}
	else
	{
		options();
    3800:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <options>
	}

}
    3804:	cf 91       	pop	r28
    3806:	df 91       	pop	r29
    3808:	08 95       	ret

0000380a <assertion>:
uint8 assertion(char* msg)
{
    380a:	df 93       	push	r29
    380c:	cf 93       	push	r28
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
    3812:	27 97       	sbiw	r28, 0x07	; 7
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	f8 94       	cli
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	cd bf       	out	0x3d, r28	; 61
    381e:	9b 83       	std	Y+3, r25	; 0x03
    3820:	8a 83       	std	Y+2, r24	; 0x02
	uint8 answer=0;
    3822:	19 82       	std	Y+1, r1	; 0x01
	LCD_clearScreen();
    3824:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0,msg);
    3828:	2a 81       	ldd	r18, Y+2	; 0x02
    382a:	3b 81       	ldd	r19, Y+3	; 0x03
    382c:	80 e0       	ldi	r24, 0x00	; 0
    382e:	60 e0       	ldi	r22, 0x00	; 0
    3830:	a9 01       	movw	r20, r18
    3832:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0,"1- No");
    3836:	2f e4       	ldi	r18, 0x4F	; 79
    3838:	32 e0       	ldi	r19, 0x02	; 2
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	60 e0       	ldi	r22, 0x00	; 0
    383e:	a9 01       	movw	r20, r18
    3840:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 16,"2- Yes");
    3844:	25 e5       	ldi	r18, 0x55	; 85
    3846:	32 e0       	ldi	r19, 0x02	; 2
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	60 e1       	ldi	r22, 0x10	; 16
    384c:	a9 01       	movw	r20, r18
    384e:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
    3852:	19 c0       	rjmp	.+50     	; 0x3886 <assertion+0x7c>
	while(!answer)
		{
			answer = KeyPad_getPressedKey();
    3854:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <KeyPad_getPressedKey>
    3858:	89 83       	std	Y+1, r24	; 0x01
			switch(answer)
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	28 2f       	mov	r18, r24
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	3e 83       	std	Y+6, r19	; 0x06
    3862:	2d 83       	std	Y+5, r18	; 0x05
    3864:	8d 81       	ldd	r24, Y+5	; 0x05
    3866:	9e 81       	ldd	r25, Y+6	; 0x06
    3868:	81 30       	cpi	r24, 0x01	; 1
    386a:	91 05       	cpc	r25, r1
    386c:	31 f0       	breq	.+12     	; 0x387a <assertion+0x70>
    386e:	2d 81       	ldd	r18, Y+5	; 0x05
    3870:	3e 81       	ldd	r19, Y+6	; 0x06
    3872:	22 30       	cpi	r18, 0x02	; 2
    3874:	31 05       	cpc	r19, r1
    3876:	19 f0       	breq	.+6      	; 0x387e <assertion+0x74>
    3878:	05 c0       	rjmp	.+10     	; 0x3884 <assertion+0x7a>
			{
			case 1:
				return FALSE;
    387a:	1c 82       	std	Y+4, r1	; 0x04
    387c:	08 c0       	rjmp	.+16     	; 0x388e <assertion+0x84>
			case 2:
				return TRUE;
    387e:	31 e0       	ldi	r19, 0x01	; 1
    3880:	3c 83       	std	Y+4, r19	; 0x04
    3882:	05 c0       	rjmp	.+10     	; 0x388e <assertion+0x84>
			default:
				answer = 0;
    3884:	19 82       	std	Y+1, r1	; 0x01
	uint8 answer=0;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0,msg);
	LCD_displayStringRowColumn(1, 0,"1- No");
	LCD_displayStringRowColumn(1, 16,"2- Yes");
	while(!answer)
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	88 23       	and	r24, r24
    388a:	21 f3       	breq	.-56     	; 0x3854 <assertion+0x4a>
    388c:	02 c0       	rjmp	.+4      	; 0x3892 <assertion+0x88>
				return TRUE;
			default:
				answer = 0;
			}
		}
}
    388e:	8c 81       	ldd	r24, Y+4	; 0x04
    3890:	8f 83       	std	Y+7, r24	; 0x07
    3892:	8f 81       	ldd	r24, Y+7	; 0x07
    3894:	27 96       	adiw	r28, 0x07	; 7
    3896:	0f b6       	in	r0, 0x3f	; 63
    3898:	f8 94       	cli
    389a:	de bf       	out	0x3e, r29	; 62
    389c:	0f be       	out	0x3f, r0	; 63
    389e:	cd bf       	out	0x3d, r28	; 61
    38a0:	cf 91       	pop	r28
    38a2:	df 91       	pop	r29
    38a4:	08 95       	ret

000038a6 <endSession>:
void endSession()
{
    38a6:	df 93       	push	r29
    38a8:	cf 93       	push	r28
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
    38ae:	6c 97       	sbiw	r28, 0x1c	; 28
    38b0:	0f b6       	in	r0, 0x3f	; 63
    38b2:	f8 94       	cli
    38b4:	de bf       	out	0x3e, r29	; 62
    38b6:	0f be       	out	0x3f, r0	; 63
    38b8:	cd bf       	out	0x3d, r28	; 61
	correctFlag=FALSE;
    38ba:	10 92 90 02 	sts	0x0290, r1
	try=NUMBER_OF_TRIES;
    38be:	83 e0       	ldi	r24, 0x03	; 3
    38c0:	80 93 8c 02 	sts	0x028C, r24
	LCD_clearScreen();
    38c4:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0,"Session ended !");
    38c8:	2c e5       	ldi	r18, 0x5C	; 92
    38ca:	32 e0       	ldi	r19, 0x02	; 2
    38cc:	80 e0       	ldi	r24, 0x00	; 0
    38ce:	60 e0       	ldi	r22, 0x00	; 0
    38d0:	a9 01       	movw	r20, r18
    38d2:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
    38d6:	80 e0       	ldi	r24, 0x00	; 0
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	aa e7       	ldi	r26, 0x7A	; 122
    38dc:	b3 e4       	ldi	r27, 0x43	; 67
    38de:	89 8f       	std	Y+25, r24	; 0x19
    38e0:	9a 8f       	std	Y+26, r25	; 0x1a
    38e2:	ab 8f       	std	Y+27, r26	; 0x1b
    38e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e6:	69 8d       	ldd	r22, Y+25	; 0x19
    38e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	4a e7       	ldi	r20, 0x7A	; 122
    38f4:	53 e4       	ldi	r21, 0x43	; 67
    38f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	8d 8b       	std	Y+21, r24	; 0x15
    3900:	9e 8b       	std	Y+22, r25	; 0x16
    3902:	af 8b       	std	Y+23, r26	; 0x17
    3904:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3906:	6d 89       	ldd	r22, Y+21	; 0x15
    3908:	7e 89       	ldd	r23, Y+22	; 0x16
    390a:	8f 89       	ldd	r24, Y+23	; 0x17
    390c:	98 8d       	ldd	r25, Y+24	; 0x18
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 e8       	ldi	r20, 0x80	; 128
    3914:	5f e3       	ldi	r21, 0x3F	; 63
    3916:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    391a:	88 23       	and	r24, r24
    391c:	2c f4       	brge	.+10     	; 0x3928 <endSession+0x82>
		__ticks = 1;
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	9c 8b       	std	Y+20, r25	; 0x14
    3924:	8b 8b       	std	Y+19, r24	; 0x13
    3926:	3f c0       	rjmp	.+126    	; 0x39a6 <endSession+0x100>
	else if (__tmp > 65535)
    3928:	6d 89       	ldd	r22, Y+21	; 0x15
    392a:	7e 89       	ldd	r23, Y+22	; 0x16
    392c:	8f 89       	ldd	r24, Y+23	; 0x17
    392e:	98 8d       	ldd	r25, Y+24	; 0x18
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	3f ef       	ldi	r19, 0xFF	; 255
    3934:	4f e7       	ldi	r20, 0x7F	; 127
    3936:	57 e4       	ldi	r21, 0x47	; 71
    3938:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    393c:	18 16       	cp	r1, r24
    393e:	4c f5       	brge	.+82     	; 0x3992 <endSession+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3940:	69 8d       	ldd	r22, Y+25	; 0x19
    3942:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3944:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3946:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	40 e2       	ldi	r20, 0x20	; 32
    394e:	51 e4       	ldi	r21, 0x41	; 65
    3950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	bc 01       	movw	r22, r24
    395a:	cd 01       	movw	r24, r26
    395c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	9c 8b       	std	Y+20, r25	; 0x14
    3966:	8b 8b       	std	Y+19, r24	; 0x13
    3968:	0f c0       	rjmp	.+30     	; 0x3988 <endSession+0xe2>
    396a:	89 e1       	ldi	r24, 0x19	; 25
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	9a 8b       	std	Y+18, r25	; 0x12
    3970:	89 8b       	std	Y+17, r24	; 0x11
    3972:	89 89       	ldd	r24, Y+17	; 0x11
    3974:	9a 89       	ldd	r25, Y+18	; 0x12
    3976:	01 97       	sbiw	r24, 0x01	; 1
    3978:	f1 f7       	brne	.-4      	; 0x3976 <endSession+0xd0>
    397a:	9a 8b       	std	Y+18, r25	; 0x12
    397c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397e:	8b 89       	ldd	r24, Y+19	; 0x13
    3980:	9c 89       	ldd	r25, Y+20	; 0x14
    3982:	01 97       	sbiw	r24, 0x01	; 1
    3984:	9c 8b       	std	Y+20, r25	; 0x14
    3986:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3988:	8b 89       	ldd	r24, Y+19	; 0x13
    398a:	9c 89       	ldd	r25, Y+20	; 0x14
    398c:	00 97       	sbiw	r24, 0x00	; 0
    398e:	69 f7       	brne	.-38     	; 0x396a <endSession+0xc4>
    3990:	14 c0       	rjmp	.+40     	; 0x39ba <endSession+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3992:	6d 89       	ldd	r22, Y+21	; 0x15
    3994:	7e 89       	ldd	r23, Y+22	; 0x16
    3996:	8f 89       	ldd	r24, Y+23	; 0x17
    3998:	98 8d       	ldd	r25, Y+24	; 0x18
    399a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399e:	dc 01       	movw	r26, r24
    39a0:	cb 01       	movw	r24, r22
    39a2:	9c 8b       	std	Y+20, r25	; 0x14
    39a4:	8b 8b       	std	Y+19, r24	; 0x13
    39a6:	8b 89       	ldd	r24, Y+19	; 0x13
    39a8:	9c 89       	ldd	r25, Y+20	; 0x14
    39aa:	98 8b       	std	Y+16, r25	; 0x10
    39ac:	8f 87       	std	Y+15, r24	; 0x0f
    39ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    39b0:	98 89       	ldd	r25, Y+16	; 0x10
    39b2:	01 97       	sbiw	r24, 0x01	; 1
    39b4:	f1 f7       	brne	.-4      	; 0x39b2 <endSession+0x10c>
    39b6:	98 8b       	std	Y+16, r25	; 0x10
    39b8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(DELAY_PERIOD_1/4);
	LCD_displayStringRowColumn(1, 0,"you have to login again");
    39ba:	2c e6       	ldi	r18, 0x6C	; 108
    39bc:	32 e0       	ldi	r19, 0x02	; 2
    39be:	81 e0       	ldi	r24, 0x01	; 1
    39c0:	60 e0       	ldi	r22, 0x00	; 0
    39c2:	a9 01       	movw	r20, r18
    39c4:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_displayStringRowColumn>
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	aa e7       	ldi	r26, 0x7A	; 122
    39ce:	b4 e4       	ldi	r27, 0x44	; 68
    39d0:	8b 87       	std	Y+11, r24	; 0x0b
    39d2:	9c 87       	std	Y+12, r25	; 0x0c
    39d4:	ad 87       	std	Y+13, r26	; 0x0d
    39d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    39da:	7c 85       	ldd	r23, Y+12	; 0x0c
    39dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    39de:	9e 85       	ldd	r25, Y+14	; 0x0e
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	4a e7       	ldi	r20, 0x7A	; 122
    39e6:	53 e4       	ldi	r21, 0x43	; 67
    39e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ec:	dc 01       	movw	r26, r24
    39ee:	cb 01       	movw	r24, r22
    39f0:	8f 83       	std	Y+7, r24	; 0x07
    39f2:	98 87       	std	Y+8, r25	; 0x08
    39f4:	a9 87       	std	Y+9, r26	; 0x09
    39f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39f8:	6f 81       	ldd	r22, Y+7	; 0x07
    39fa:	78 85       	ldd	r23, Y+8	; 0x08
    39fc:	89 85       	ldd	r24, Y+9	; 0x09
    39fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	40 e8       	ldi	r20, 0x80	; 128
    3a06:	5f e3       	ldi	r21, 0x3F	; 63
    3a08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a0c:	88 23       	and	r24, r24
    3a0e:	2c f4       	brge	.+10     	; 0x3a1a <endSession+0x174>
		__ticks = 1;
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	9e 83       	std	Y+6, r25	; 0x06
    3a16:	8d 83       	std	Y+5, r24	; 0x05
    3a18:	3f c0       	rjmp	.+126    	; 0x3a98 <endSession+0x1f2>
	else if (__tmp > 65535)
    3a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a1c:	78 85       	ldd	r23, Y+8	; 0x08
    3a1e:	89 85       	ldd	r24, Y+9	; 0x09
    3a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	3f ef       	ldi	r19, 0xFF	; 255
    3a26:	4f e7       	ldi	r20, 0x7F	; 127
    3a28:	57 e4       	ldi	r21, 0x47	; 71
    3a2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a2e:	18 16       	cp	r1, r24
    3a30:	4c f5       	brge	.+82     	; 0x3a84 <endSession+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	40 e2       	ldi	r20, 0x20	; 32
    3a40:	51 e4       	ldi	r21, 0x41	; 65
    3a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	bc 01       	movw	r22, r24
    3a4c:	cd 01       	movw	r24, r26
    3a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	9e 83       	std	Y+6, r25	; 0x06
    3a58:	8d 83       	std	Y+5, r24	; 0x05
    3a5a:	0f c0       	rjmp	.+30     	; 0x3a7a <endSession+0x1d4>
    3a5c:	89 e1       	ldi	r24, 0x19	; 25
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	9c 83       	std	Y+4, r25	; 0x04
    3a62:	8b 83       	std	Y+3, r24	; 0x03
    3a64:	8b 81       	ldd	r24, Y+3	; 0x03
    3a66:	9c 81       	ldd	r25, Y+4	; 0x04
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	f1 f7       	brne	.-4      	; 0x3a68 <endSession+0x1c2>
    3a6c:	9c 83       	std	Y+4, r25	; 0x04
    3a6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a70:	8d 81       	ldd	r24, Y+5	; 0x05
    3a72:	9e 81       	ldd	r25, Y+6	; 0x06
    3a74:	01 97       	sbiw	r24, 0x01	; 1
    3a76:	9e 83       	std	Y+6, r25	; 0x06
    3a78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7e:	00 97       	sbiw	r24, 0x00	; 0
    3a80:	69 f7       	brne	.-38     	; 0x3a5c <endSession+0x1b6>
    3a82:	14 c0       	rjmp	.+40     	; 0x3aac <endSession+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a84:	6f 81       	ldd	r22, Y+7	; 0x07
    3a86:	78 85       	ldd	r23, Y+8	; 0x08
    3a88:	89 85       	ldd	r24, Y+9	; 0x09
    3a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	9e 83       	std	Y+6, r25	; 0x06
    3a96:	8d 83       	std	Y+5, r24	; 0x05
    3a98:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9c:	9a 83       	std	Y+2, r25	; 0x02
    3a9e:	89 83       	std	Y+1, r24	; 0x01
    3aa0:	89 81       	ldd	r24, Y+1	; 0x01
    3aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa4:	01 97       	sbiw	r24, 0x01	; 1
    3aa6:	f1 f7       	brne	.-4      	; 0x3aa4 <endSession+0x1fe>
    3aa8:	9a 83       	std	Y+2, r25	; 0x02
    3aaa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DELAY_PERIOD_1);
}
    3aac:	6c 96       	adiw	r28, 0x1c	; 28
    3aae:	0f b6       	in	r0, 0x3f	; 63
    3ab0:	f8 94       	cli
    3ab2:	de bf       	out	0x3e, r29	; 62
    3ab4:	0f be       	out	0x3f, r0	; 63
    3ab6:	cd bf       	out	0x3d, r28	; 61
    3ab8:	cf 91       	pop	r28
    3aba:	df 91       	pop	r29
    3abc:	08 95       	ret

00003abe <strCpy>:
void strCpy(uint8* str1 ,uint8* str2)
{
    3abe:	df 93       	push	r29
    3ac0:	cf 93       	push	r28
    3ac2:	00 d0       	rcall	.+0      	; 0x3ac4 <strCpy+0x6>
    3ac4:	00 d0       	rcall	.+0      	; 0x3ac6 <strCpy+0x8>
    3ac6:	00 d0       	rcall	.+0      	; 0x3ac8 <strCpy+0xa>
    3ac8:	cd b7       	in	r28, 0x3d	; 61
    3aca:	de b7       	in	r29, 0x3e	; 62
    3acc:	9c 83       	std	Y+4, r25	; 0x04
    3ace:	8b 83       	std	Y+3, r24	; 0x03
    3ad0:	7e 83       	std	Y+6, r23	; 0x06
    3ad2:	6d 83       	std	Y+5, r22	; 0x05
	for (int i=0;i<PASSWORD_LENGTH;i++)
    3ad4:	1a 82       	std	Y+2, r1	; 0x02
    3ad6:	19 82       	std	Y+1, r1	; 0x01
    3ad8:	15 c0       	rjmp	.+42     	; 0x3b04 <strCpy+0x46>
	{
		str1[i]=str2[i];
    3ada:	29 81       	ldd	r18, Y+1	; 0x01
    3adc:	3a 81       	ldd	r19, Y+2	; 0x02
    3ade:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	a2 0f       	add	r26, r18
    3ae6:	b3 1f       	adc	r27, r19
    3ae8:	29 81       	ldd	r18, Y+1	; 0x01
    3aea:	3a 81       	ldd	r19, Y+2	; 0x02
    3aec:	8d 81       	ldd	r24, Y+5	; 0x05
    3aee:	9e 81       	ldd	r25, Y+6	; 0x06
    3af0:	fc 01       	movw	r30, r24
    3af2:	e2 0f       	add	r30, r18
    3af4:	f3 1f       	adc	r31, r19
    3af6:	80 81       	ld	r24, Z
    3af8:	8c 93       	st	X, r24
	LCD_displayStringRowColumn(1, 0,"you have to login again");
	_delay_ms(DELAY_PERIOD_1);
}
void strCpy(uint8* str1 ,uint8* str2)
{
	for (int i=0;i<PASSWORD_LENGTH;i++)
    3afa:	89 81       	ldd	r24, Y+1	; 0x01
    3afc:	9a 81       	ldd	r25, Y+2	; 0x02
    3afe:	01 96       	adiw	r24, 0x01	; 1
    3b00:	9a 83       	std	Y+2, r25	; 0x02
    3b02:	89 83       	std	Y+1, r24	; 0x01
    3b04:	89 81       	ldd	r24, Y+1	; 0x01
    3b06:	9a 81       	ldd	r25, Y+2	; 0x02
    3b08:	85 30       	cpi	r24, 0x05	; 5
    3b0a:	91 05       	cpc	r25, r1
    3b0c:	34 f3       	brlt	.-52     	; 0x3ada <strCpy+0x1c>
	{
		str1[i]=str2[i];
	}
}
    3b0e:	26 96       	adiw	r28, 0x06	; 6
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	f8 94       	cli
    3b14:	de bf       	out	0x3e, r29	; 62
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	cd bf       	out	0x3d, r28	; 61
    3b1a:	cf 91       	pop	r28
    3b1c:	df 91       	pop	r29
    3b1e:	08 95       	ret

00003b20 <sendCommand>:
void sendCommand(uint8 command)
{
    3b20:	df 93       	push	r29
    3b22:	cf 93       	push	r28
    3b24:	cd b7       	in	r28, 0x3d	; 61
    3b26:	de b7       	in	r29, 0x3e	; 62
    3b28:	2f 97       	sbiw	r28, 0x0f	; 15
    3b2a:	0f b6       	in	r0, 0x3f	; 63
    3b2c:	f8 94       	cli
    3b2e:	de bf       	out	0x3e, r29	; 62
    3b30:	0f be       	out	0x3f, r0	; 63
    3b32:	cd bf       	out	0x3d, r28	; 61
    3b34:	8f 87       	std	Y+15, r24	; 0x0f
	Send_Byte(command);
    3b36:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b38:	0e 94 db 05 	call	0xbb6	; 0xbb6 <Send_Byte>
    3b3c:	80 e0       	ldi	r24, 0x00	; 0
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	a8 e4       	ldi	r26, 0x48	; 72
    3b42:	b2 e4       	ldi	r27, 0x42	; 66
    3b44:	8b 87       	std	Y+11, r24	; 0x0b
    3b46:	9c 87       	std	Y+12, r25	; 0x0c
    3b48:	ad 87       	std	Y+13, r26	; 0x0d
    3b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b50:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b52:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b54:	20 e0       	ldi	r18, 0x00	; 0
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	4a e7       	ldi	r20, 0x7A	; 122
    3b5a:	53 e4       	ldi	r21, 0x43	; 67
    3b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b60:	dc 01       	movw	r26, r24
    3b62:	cb 01       	movw	r24, r22
    3b64:	8f 83       	std	Y+7, r24	; 0x07
    3b66:	98 87       	std	Y+8, r25	; 0x08
    3b68:	a9 87       	std	Y+9, r26	; 0x09
    3b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b6e:	78 85       	ldd	r23, Y+8	; 0x08
    3b70:	89 85       	ldd	r24, Y+9	; 0x09
    3b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	40 e8       	ldi	r20, 0x80	; 128
    3b7a:	5f e3       	ldi	r21, 0x3F	; 63
    3b7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b80:	88 23       	and	r24, r24
    3b82:	2c f4       	brge	.+10     	; 0x3b8e <sendCommand+0x6e>
		__ticks = 1;
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	9e 83       	std	Y+6, r25	; 0x06
    3b8a:	8d 83       	std	Y+5, r24	; 0x05
    3b8c:	3f c0       	rjmp	.+126    	; 0x3c0c <sendCommand+0xec>
	else if (__tmp > 65535)
    3b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b90:	78 85       	ldd	r23, Y+8	; 0x08
    3b92:	89 85       	ldd	r24, Y+9	; 0x09
    3b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	3f ef       	ldi	r19, 0xFF	; 255
    3b9a:	4f e7       	ldi	r20, 0x7F	; 127
    3b9c:	57 e4       	ldi	r21, 0x47	; 71
    3b9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ba2:	18 16       	cp	r1, r24
    3ba4:	4c f5       	brge	.+82     	; 0x3bf8 <sendCommand+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3baa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bac:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bae:	20 e0       	ldi	r18, 0x00	; 0
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	40 e2       	ldi	r20, 0x20	; 32
    3bb4:	51 e4       	ldi	r21, 0x41	; 65
    3bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bba:	dc 01       	movw	r26, r24
    3bbc:	cb 01       	movw	r24, r22
    3bbe:	bc 01       	movw	r22, r24
    3bc0:	cd 01       	movw	r24, r26
    3bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	9e 83       	std	Y+6, r25	; 0x06
    3bcc:	8d 83       	std	Y+5, r24	; 0x05
    3bce:	0f c0       	rjmp	.+30     	; 0x3bee <sendCommand+0xce>
    3bd0:	89 e1       	ldi	r24, 0x19	; 25
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	9c 83       	std	Y+4, r25	; 0x04
    3bd6:	8b 83       	std	Y+3, r24	; 0x03
    3bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bda:	9c 81       	ldd	r25, Y+4	; 0x04
    3bdc:	01 97       	sbiw	r24, 0x01	; 1
    3bde:	f1 f7       	brne	.-4      	; 0x3bdc <sendCommand+0xbc>
    3be0:	9c 83       	std	Y+4, r25	; 0x04
    3be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3be4:	8d 81       	ldd	r24, Y+5	; 0x05
    3be6:	9e 81       	ldd	r25, Y+6	; 0x06
    3be8:	01 97       	sbiw	r24, 0x01	; 1
    3bea:	9e 83       	std	Y+6, r25	; 0x06
    3bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bee:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bf2:	00 97       	sbiw	r24, 0x00	; 0
    3bf4:	69 f7       	brne	.-38     	; 0x3bd0 <sendCommand+0xb0>
    3bf6:	14 c0       	rjmp	.+40     	; 0x3c20 <sendCommand+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bf8:	6f 81       	ldd	r22, Y+7	; 0x07
    3bfa:	78 85       	ldd	r23, Y+8	; 0x08
    3bfc:	89 85       	ldd	r24, Y+9	; 0x09
    3bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c04:	dc 01       	movw	r26, r24
    3c06:	cb 01       	movw	r24, r22
    3c08:	9e 83       	std	Y+6, r25	; 0x06
    3c0a:	8d 83       	std	Y+5, r24	; 0x05
    3c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c10:	9a 83       	std	Y+2, r25	; 0x02
    3c12:	89 83       	std	Y+1, r24	; 0x01
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	9a 81       	ldd	r25, Y+2	; 0x02
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	f1 f7       	brne	.-4      	; 0x3c18 <sendCommand+0xf8>
    3c1c:	9a 83       	std	Y+2, r25	; 0x02
    3c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DELAY_PERIOD_1/20);
}
    3c20:	2f 96       	adiw	r28, 0x0f	; 15
    3c22:	0f b6       	in	r0, 0x3f	; 63
    3c24:	f8 94       	cli
    3c26:	de bf       	out	0x3e, r29	; 62
    3c28:	0f be       	out	0x3f, r0	; 63
    3c2a:	cd bf       	out	0x3d, r28	; 61
    3c2c:	cf 91       	pop	r28
    3c2e:	df 91       	pop	r29
    3c30:	08 95       	ret

00003c32 <__prologue_saves__>:
    3c32:	2f 92       	push	r2
    3c34:	3f 92       	push	r3
    3c36:	4f 92       	push	r4
    3c38:	5f 92       	push	r5
    3c3a:	6f 92       	push	r6
    3c3c:	7f 92       	push	r7
    3c3e:	8f 92       	push	r8
    3c40:	9f 92       	push	r9
    3c42:	af 92       	push	r10
    3c44:	bf 92       	push	r11
    3c46:	cf 92       	push	r12
    3c48:	df 92       	push	r13
    3c4a:	ef 92       	push	r14
    3c4c:	ff 92       	push	r15
    3c4e:	0f 93       	push	r16
    3c50:	1f 93       	push	r17
    3c52:	cf 93       	push	r28
    3c54:	df 93       	push	r29
    3c56:	cd b7       	in	r28, 0x3d	; 61
    3c58:	de b7       	in	r29, 0x3e	; 62
    3c5a:	ca 1b       	sub	r28, r26
    3c5c:	db 0b       	sbc	r29, r27
    3c5e:	0f b6       	in	r0, 0x3f	; 63
    3c60:	f8 94       	cli
    3c62:	de bf       	out	0x3e, r29	; 62
    3c64:	0f be       	out	0x3f, r0	; 63
    3c66:	cd bf       	out	0x3d, r28	; 61
    3c68:	09 94       	ijmp

00003c6a <__epilogue_restores__>:
    3c6a:	2a 88       	ldd	r2, Y+18	; 0x12
    3c6c:	39 88       	ldd	r3, Y+17	; 0x11
    3c6e:	48 88       	ldd	r4, Y+16	; 0x10
    3c70:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c72:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c74:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c76:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c78:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c7c:	b9 84       	ldd	r11, Y+9	; 0x09
    3c7e:	c8 84       	ldd	r12, Y+8	; 0x08
    3c80:	df 80       	ldd	r13, Y+7	; 0x07
    3c82:	ee 80       	ldd	r14, Y+6	; 0x06
    3c84:	fd 80       	ldd	r15, Y+5	; 0x05
    3c86:	0c 81       	ldd	r16, Y+4	; 0x04
    3c88:	1b 81       	ldd	r17, Y+3	; 0x03
    3c8a:	aa 81       	ldd	r26, Y+2	; 0x02
    3c8c:	b9 81       	ldd	r27, Y+1	; 0x01
    3c8e:	ce 0f       	add	r28, r30
    3c90:	d1 1d       	adc	r29, r1
    3c92:	0f b6       	in	r0, 0x3f	; 63
    3c94:	f8 94       	cli
    3c96:	de bf       	out	0x3e, r29	; 62
    3c98:	0f be       	out	0x3f, r0	; 63
    3c9a:	cd bf       	out	0x3d, r28	; 61
    3c9c:	ed 01       	movw	r28, r26
    3c9e:	08 95       	ret

00003ca0 <itoa>:
    3ca0:	fb 01       	movw	r30, r22
    3ca2:	9f 01       	movw	r18, r30
    3ca4:	e8 94       	clt
    3ca6:	42 30       	cpi	r20, 0x02	; 2
    3ca8:	c4 f0       	brlt	.+48     	; 0x3cda <itoa+0x3a>
    3caa:	45 32       	cpi	r20, 0x25	; 37
    3cac:	b4 f4       	brge	.+44     	; 0x3cda <itoa+0x3a>
    3cae:	4a 30       	cpi	r20, 0x0A	; 10
    3cb0:	29 f4       	brne	.+10     	; 0x3cbc <itoa+0x1c>
    3cb2:	97 fb       	bst	r25, 7
    3cb4:	1e f4       	brtc	.+6      	; 0x3cbc <itoa+0x1c>
    3cb6:	90 95       	com	r25
    3cb8:	81 95       	neg	r24
    3cba:	9f 4f       	sbci	r25, 0xFF	; 255
    3cbc:	64 2f       	mov	r22, r20
    3cbe:	77 27       	eor	r23, r23
    3cc0:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__udivmodhi4>
    3cc4:	80 5d       	subi	r24, 0xD0	; 208
    3cc6:	8a 33       	cpi	r24, 0x3A	; 58
    3cc8:	0c f0       	brlt	.+2      	; 0x3ccc <itoa+0x2c>
    3cca:	89 5d       	subi	r24, 0xD9	; 217
    3ccc:	81 93       	st	Z+, r24
    3cce:	cb 01       	movw	r24, r22
    3cd0:	00 97       	sbiw	r24, 0x00	; 0
    3cd2:	a1 f7       	brne	.-24     	; 0x3cbc <itoa+0x1c>
    3cd4:	16 f4       	brtc	.+4      	; 0x3cda <itoa+0x3a>
    3cd6:	5d e2       	ldi	r21, 0x2D	; 45
    3cd8:	51 93       	st	Z+, r21
    3cda:	10 82       	st	Z, r1
    3cdc:	c9 01       	movw	r24, r18
    3cde:	0c 94 71 1e 	jmp	0x3ce2	; 0x3ce2 <strrev>

00003ce2 <strrev>:
    3ce2:	dc 01       	movw	r26, r24
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	67 2f       	mov	r22, r23
    3ce8:	71 91       	ld	r23, Z+
    3cea:	77 23       	and	r23, r23
    3cec:	e1 f7       	brne	.-8      	; 0x3ce6 <strrev+0x4>
    3cee:	32 97       	sbiw	r30, 0x02	; 2
    3cf0:	04 c0       	rjmp	.+8      	; 0x3cfa <strrev+0x18>
    3cf2:	7c 91       	ld	r23, X
    3cf4:	6d 93       	st	X+, r22
    3cf6:	70 83       	st	Z, r23
    3cf8:	62 91       	ld	r22, -Z
    3cfa:	ae 17       	cp	r26, r30
    3cfc:	bf 07       	cpc	r27, r31
    3cfe:	c8 f3       	brcs	.-14     	; 0x3cf2 <strrev+0x10>
    3d00:	08 95       	ret

00003d02 <__udivmodhi4>:
    3d02:	aa 1b       	sub	r26, r26
    3d04:	bb 1b       	sub	r27, r27
    3d06:	51 e1       	ldi	r21, 0x11	; 17
    3d08:	07 c0       	rjmp	.+14     	; 0x3d18 <__udivmodhi4_ep>

00003d0a <__udivmodhi4_loop>:
    3d0a:	aa 1f       	adc	r26, r26
    3d0c:	bb 1f       	adc	r27, r27
    3d0e:	a6 17       	cp	r26, r22
    3d10:	b7 07       	cpc	r27, r23
    3d12:	10 f0       	brcs	.+4      	; 0x3d18 <__udivmodhi4_ep>
    3d14:	a6 1b       	sub	r26, r22
    3d16:	b7 0b       	sbc	r27, r23

00003d18 <__udivmodhi4_ep>:
    3d18:	88 1f       	adc	r24, r24
    3d1a:	99 1f       	adc	r25, r25
    3d1c:	5a 95       	dec	r21
    3d1e:	a9 f7       	brne	.-22     	; 0x3d0a <__udivmodhi4_loop>
    3d20:	80 95       	com	r24
    3d22:	90 95       	com	r25
    3d24:	bc 01       	movw	r22, r24
    3d26:	cd 01       	movw	r24, r26
    3d28:	08 95       	ret

00003d2a <_exit>:
    3d2a:	f8 94       	cli

00003d2c <__stop_program>:
    3d2c:	ff cf       	rjmp	.-2      	; 0x3d2c <__stop_program>
