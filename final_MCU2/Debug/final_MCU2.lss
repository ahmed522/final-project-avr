
final_MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002432  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002432  000024c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800072  00800072  000024d8  2**0
                  ALLOC
  3 .stab         00001d10  00000000  00000000  000024d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b46  00000000  00000000  000041e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000088c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000947b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fd 08 	call	0x11fa	; 0x11fa <main>
      8a:	0c 94 17 12 	jmp	0x242e	; 0x242e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_Init>:
/*---------------------------------------------------------------------------------*
 *                                FUNCTION DEFINITIONS                             *
 *---------------------------------------------------------------------------------*/

void UART_Init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*-------------------------------------UCSRA-------------------------------------*/
	/* Enable double speed */
	SET_BIT(UCSRA,U2X);
     b4e:	ab e2       	ldi	r26, 0x2B	; 43
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	eb e2       	ldi	r30, 0x2B	; 43
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	82 60       	ori	r24, 0x02	; 2
     b5a:	8c 93       	st	X, r24

	/*-------------------------------------UCSRB-------------------------------------*/
	/* Enable reciving and transmitting */
	SET_BIT(UCSRB,RXEN);
     b5c:	aa e2       	ldi	r26, 0x2A	; 42
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ea e2       	ldi	r30, 0x2A	; 42
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 61       	ori	r24, 0x10	; 16
     b68:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
     b6a:	aa e2       	ldi	r26, 0x2A	; 42
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ea e2       	ldi	r30, 0x2A	; 42
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 60       	ori	r24, 0x08	; 8
     b76:	8c 93       	st	X, r24

	/*-------------------------------------UCSRC-------------------------------------*/
	/* Enable writing to UCSRC register */
	SET_BIT(UCSRC,URSEL);
     b78:	a0 e4       	ldi	r26, 0x40	; 64
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e0 e4       	ldi	r30, 0x40	; 64
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 68       	ori	r24, 0x80	; 128
     b84:	8c 93       	st	X, r24
	 *					  0           1            1             8-bit
	 *					  1           1            1             9-bit
	 *
	 *----------------------------------------------------------------------------*/
	/* 8-bit */
	SET_BIT(UCSRC,UCSZ0);
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e0 e4       	ldi	r30, 0x40	; 64
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1);
     b94:	a0 e4       	ldi	r26, 0x40	; 64
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24

	/* Baudrate prescaler */
	UBRRH = (BAUDRATE_PRESCALER>>8);
     ba2:	e0 e4       	ldi	r30, 0x40	; 64
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	10 82       	st	Z, r1
    UBRRL = BAUDRATE_PRESCALER;
     ba8:	e9 e2       	ldi	r30, 0x29	; 41
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	8c e0       	ldi	r24, 0x0C	; 12
     bae:	80 83       	st	Z, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <Send_Byte>:
void Send_Byte(const uint8 data)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01
	/* wait until transmitter buffer register is empty */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     bc2:	eb e2       	ldi	r30, 0x2B	; 43
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	80 72       	andi	r24, 0x20	; 32
     bce:	90 70       	andi	r25, 0x00	; 0
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	b9 f3       	breq	.-18     	; 0xbc2 <Send_Byte+0xc>
	/* Send data */
	UDR=data;
     bd4:	ec e2       	ldi	r30, 0x2C	; 44
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	80 83       	st	Z, r24

}
     bdc:	0f 90       	pop	r0
     bde:	cf 91       	pop	r28
     be0:	df 91       	pop	r29
     be2:	08 95       	ret

00000be4 <Resieve_Byte>:
uint8 Resieve_Byte()
{
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     bec:	eb e2       	ldi	r30, 0x2B	; 43
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	88 23       	and	r24, r24
     bf4:	dc f7       	brge	.-10     	; 0xbec <Resieve_Byte+0x8>
    return UDR;
     bf6:	ec e2       	ldi	r30, 0x2C	; 44
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
}
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	08 95       	ret

00000c02 <Send_String>:
void Send_String(const uint8* str)
{
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	6f 97       	sbiw	r28, 0x1f	; 31
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	9f 8f       	std	Y+31, r25	; 0x1f
     c18:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i = 0;
     c1a:	1d 8e       	std	Y+29, r1	; 0x1d
     c1c:	80 c0       	rjmp	.+256    	; 0xd1e <Send_String+0x11c>
	while(str[i] != '\0')
	{
		Send_Byte(str[i]);
     c1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c26:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c28:	fc 01       	movw	r30, r24
     c2a:	e2 0f       	add	r30, r18
     c2c:	f3 1f       	adc	r31, r19
     c2e:	80 81       	ld	r24, Z
     c30:	0e 94 db 05 	call	0xbb6	; 0xbb6 <Send_Byte>
		i++;
     c34:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c36:	8f 5f       	subi	r24, 0xFF	; 255
     c38:	8d 8f       	std	Y+29, r24	; 0x1d
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	a8 e4       	ldi	r26, 0x48	; 72
     c40:	b2 e4       	ldi	r27, 0x42	; 66
     c42:	89 8f       	std	Y+25, r24	; 0x19
     c44:	9a 8f       	std	Y+26, r25	; 0x1a
     c46:	ab 8f       	std	Y+27, r26	; 0x1b
     c48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4a:	69 8d       	ldd	r22, Y+25	; 0x19
     c4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c50:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	4a e7       	ldi	r20, 0x7A	; 122
     c58:	53 e4       	ldi	r21, 0x43	; 67
     c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	8d 8b       	std	Y+21, r24	; 0x15
     c64:	9e 8b       	std	Y+22, r25	; 0x16
     c66:	af 8b       	std	Y+23, r26	; 0x17
     c68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c6a:	6d 89       	ldd	r22, Y+21	; 0x15
     c6c:	7e 89       	ldd	r23, Y+22	; 0x16
     c6e:	8f 89       	ldd	r24, Y+23	; 0x17
     c70:	98 8d       	ldd	r25, Y+24	; 0x18
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e8       	ldi	r20, 0x80	; 128
     c78:	5f e3       	ldi	r21, 0x3F	; 63
     c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c7e:	88 23       	and	r24, r24
     c80:	2c f4       	brge	.+10     	; 0xc8c <Send_String+0x8a>
		__ticks = 1;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	9c 8b       	std	Y+20, r25	; 0x14
     c88:	8b 8b       	std	Y+19, r24	; 0x13
     c8a:	3f c0       	rjmp	.+126    	; 0xd0a <Send_String+0x108>
	else if (__tmp > 65535)
     c8c:	6d 89       	ldd	r22, Y+21	; 0x15
     c8e:	7e 89       	ldd	r23, Y+22	; 0x16
     c90:	8f 89       	ldd	r24, Y+23	; 0x17
     c92:	98 8d       	ldd	r25, Y+24	; 0x18
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	3f ef       	ldi	r19, 0xFF	; 255
     c98:	4f e7       	ldi	r20, 0x7F	; 127
     c9a:	57 e4       	ldi	r21, 0x47	; 71
     c9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ca0:	18 16       	cp	r1, r24
     ca2:	4c f5       	brge	.+82     	; 0xcf6 <Send_String+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca4:	69 8d       	ldd	r22, Y+25	; 0x19
     ca6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	40 e2       	ldi	r20, 0x20	; 32
     cb2:	51 e4       	ldi	r21, 0x41	; 65
     cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	bc 01       	movw	r22, r24
     cbe:	cd 01       	movw	r24, r26
     cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc4:	dc 01       	movw	r26, r24
     cc6:	cb 01       	movw	r24, r22
     cc8:	9c 8b       	std	Y+20, r25	; 0x14
     cca:	8b 8b       	std	Y+19, r24	; 0x13
     ccc:	0f c0       	rjmp	.+30     	; 0xcec <Send_String+0xea>
     cce:	89 e1       	ldi	r24, 0x19	; 25
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	9a 8b       	std	Y+18, r25	; 0x12
     cd4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cd6:	89 89       	ldd	r24, Y+17	; 0x11
     cd8:	9a 89       	ldd	r25, Y+18	; 0x12
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <Send_String+0xd8>
     cde:	9a 8b       	std	Y+18, r25	; 0x12
     ce0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce2:	8b 89       	ldd	r24, Y+19	; 0x13
     ce4:	9c 89       	ldd	r25, Y+20	; 0x14
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	9c 8b       	std	Y+20, r25	; 0x14
     cea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cec:	8b 89       	ldd	r24, Y+19	; 0x13
     cee:	9c 89       	ldd	r25, Y+20	; 0x14
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	69 f7       	brne	.-38     	; 0xcce <Send_String+0xcc>
     cf4:	14 c0       	rjmp	.+40     	; 0xd1e <Send_String+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cf6:	6d 89       	ldd	r22, Y+21	; 0x15
     cf8:	7e 89       	ldd	r23, Y+22	; 0x16
     cfa:	8f 89       	ldd	r24, Y+23	; 0x17
     cfc:	98 8d       	ldd	r25, Y+24	; 0x18
     cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	9c 8b       	std	Y+20, r25	; 0x14
     d08:	8b 8b       	std	Y+19, r24	; 0x13
     d0a:	8b 89       	ldd	r24, Y+19	; 0x13
     d0c:	9c 89       	ldd	r25, Y+20	; 0x14
     d0e:	98 8b       	std	Y+16, r25	; 0x10
     d10:	8f 87       	std	Y+15, r24	; 0x0f
     d12:	8f 85       	ldd	r24, Y+15	; 0x0f
     d14:	98 89       	ldd	r25, Y+16	; 0x10
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	f1 f7       	brne	.-4      	; 0xd16 <Send_String+0x114>
     d1a:	98 8b       	std	Y+16, r25	; 0x10
     d1c:	8f 87       	std	Y+15, r24	; 0x0f
    return UDR;
}
void Send_String(const uint8* str)
{
	uint8 i = 0;
	while(str[i] != '\0')
     d1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d26:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d28:	fc 01       	movw	r30, r24
     d2a:	e2 0f       	add	r30, r18
     d2c:	f3 1f       	adc	r31, r19
     d2e:	80 81       	ld	r24, Z
     d30:	88 23       	and	r24, r24
     d32:	09 f0       	breq	.+2      	; 0xd36 <Send_String+0x134>
     d34:	74 cf       	rjmp	.-280    	; 0xc1e <Send_String+0x1c>
	{
		Send_Byte(str[i]);
		i++;
		_delay_ms(50);
	}
	Send_Byte(END_STRING_SYMBOL);
     d36:	83 e2       	ldi	r24, 0x23	; 35
     d38:	0e 94 db 05 	call	0xbb6	; 0xbb6 <Send_Byte>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	a8 e4       	ldi	r26, 0x48	; 72
     d42:	b2 e4       	ldi	r27, 0x42	; 66
     d44:	8b 87       	std	Y+11, r24	; 0x0b
     d46:	9c 87       	std	Y+12, r25	; 0x0c
     d48:	ad 87       	std	Y+13, r26	; 0x0d
     d4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d50:	8d 85       	ldd	r24, Y+13	; 0x0d
     d52:	9e 85       	ldd	r25, Y+14	; 0x0e
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	4a e7       	ldi	r20, 0x7A	; 122
     d5a:	53 e4       	ldi	r21, 0x43	; 67
     d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	8f 83       	std	Y+7, r24	; 0x07
     d66:	98 87       	std	Y+8, r25	; 0x08
     d68:	a9 87       	std	Y+9, r26	; 0x09
     d6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d6c:	6f 81       	ldd	r22, Y+7	; 0x07
     d6e:	78 85       	ldd	r23, Y+8	; 0x08
     d70:	89 85       	ldd	r24, Y+9	; 0x09
     d72:	9a 85       	ldd	r25, Y+10	; 0x0a
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e8       	ldi	r20, 0x80	; 128
     d7a:	5f e3       	ldi	r21, 0x3F	; 63
     d7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d80:	88 23       	and	r24, r24
     d82:	2c f4       	brge	.+10     	; 0xd8e <Send_String+0x18c>
		__ticks = 1;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	9e 83       	std	Y+6, r25	; 0x06
     d8a:	8d 83       	std	Y+5, r24	; 0x05
     d8c:	3f c0       	rjmp	.+126    	; 0xe0c <Send_String+0x20a>
	else if (__tmp > 65535)
     d8e:	6f 81       	ldd	r22, Y+7	; 0x07
     d90:	78 85       	ldd	r23, Y+8	; 0x08
     d92:	89 85       	ldd	r24, Y+9	; 0x09
     d94:	9a 85       	ldd	r25, Y+10	; 0x0a
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	3f ef       	ldi	r19, 0xFF	; 255
     d9a:	4f e7       	ldi	r20, 0x7F	; 127
     d9c:	57 e4       	ldi	r21, 0x47	; 71
     d9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da2:	18 16       	cp	r1, r24
     da4:	4c f5       	brge	.+82     	; 0xdf8 <Send_String+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da6:	6b 85       	ldd	r22, Y+11	; 0x0b
     da8:	7c 85       	ldd	r23, Y+12	; 0x0c
     daa:	8d 85       	ldd	r24, Y+13	; 0x0d
     dac:	9e 85       	ldd	r25, Y+14	; 0x0e
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e2       	ldi	r20, 0x20	; 32
     db4:	51 e4       	ldi	r21, 0x41	; 65
     db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	bc 01       	movw	r22, r24
     dc0:	cd 01       	movw	r24, r26
     dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	9e 83       	std	Y+6, r25	; 0x06
     dcc:	8d 83       	std	Y+5, r24	; 0x05
     dce:	0f c0       	rjmp	.+30     	; 0xdee <Send_String+0x1ec>
     dd0:	89 e1       	ldi	r24, 0x19	; 25
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	9c 83       	std	Y+4, r25	; 0x04
     dd6:	8b 83       	std	Y+3, r24	; 0x03
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	9c 81       	ldd	r25, Y+4	; 0x04
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <Send_String+0x1da>
     de0:	9c 83       	std	Y+4, r25	; 0x04
     de2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de4:	8d 81       	ldd	r24, Y+5	; 0x05
     de6:	9e 81       	ldd	r25, Y+6	; 0x06
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	9e 83       	std	Y+6, r25	; 0x06
     dec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dee:	8d 81       	ldd	r24, Y+5	; 0x05
     df0:	9e 81       	ldd	r25, Y+6	; 0x06
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	69 f7       	brne	.-38     	; 0xdd0 <Send_String+0x1ce>
     df6:	14 c0       	rjmp	.+40     	; 0xe20 <Send_String+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df8:	6f 81       	ldd	r22, Y+7	; 0x07
     dfa:	78 85       	ldd	r23, Y+8	; 0x08
     dfc:	89 85       	ldd	r24, Y+9	; 0x09
     dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	9e 83       	std	Y+6, r25	; 0x06
     e0a:	8d 83       	std	Y+5, r24	; 0x05
     e0c:	8d 81       	ldd	r24, Y+5	; 0x05
     e0e:	9e 81       	ldd	r25, Y+6	; 0x06
     e10:	9a 83       	std	Y+2, r25	; 0x02
     e12:	89 83       	std	Y+1, r24	; 0x01
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	9a 81       	ldd	r25, Y+2	; 0x02
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <Send_String+0x216>
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
     e20:	6f 96       	adiw	r28, 0x1f	; 31
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <Resieve_String>:
void Resieve_String(uint8* str)
{
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	61 97       	sbiw	r28, 0x11	; 17
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	99 8b       	std	Y+17, r25	; 0x11
     e4c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i = 0;
     e4e:	1f 86       	std	Y+15, r1	; 0x0f
	str[i] = Resieve_Byte();
     e50:	8f 85       	ldd	r24, Y+15	; 0x0f
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	88 89       	ldd	r24, Y+16	; 0x10
     e58:	99 89       	ldd	r25, Y+17	; 0x11
     e5a:	8c 01       	movw	r16, r24
     e5c:	02 0f       	add	r16, r18
     e5e:	13 1f       	adc	r17, r19
     e60:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Resieve_Byte>
     e64:	f8 01       	movw	r30, r16
     e66:	80 83       	st	Z, r24
     e68:	81 c0       	rjmp	.+258    	; 0xf6c <Resieve_String+0x13a>
	while(str[i] != END_STRING_SYMBOL)
	{
		i++;
     e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e6c:	8f 5f       	subi	r24, 0xFF	; 255
     e6e:	8f 87       	std	Y+15, r24	; 0x0f
		str[i] = Resieve_Byte();
     e70:	8f 85       	ldd	r24, Y+15	; 0x0f
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	88 89       	ldd	r24, Y+16	; 0x10
     e78:	99 89       	ldd	r25, Y+17	; 0x11
     e7a:	8c 01       	movw	r16, r24
     e7c:	02 0f       	add	r16, r18
     e7e:	13 1f       	adc	r17, r19
     e80:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Resieve_Byte>
     e84:	f8 01       	movw	r30, r16
     e86:	80 83       	st	Z, r24
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a8 e4       	ldi	r26, 0x48	; 72
     e8e:	b2 e4       	ldi	r27, 0x42	; 66
     e90:	8b 87       	std	Y+11, r24	; 0x0b
     e92:	9c 87       	std	Y+12, r25	; 0x0c
     e94:	ad 87       	std	Y+13, r26	; 0x0d
     e96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e98:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	4a e7       	ldi	r20, 0x7A	; 122
     ea6:	53 e4       	ldi	r21, 0x43	; 67
     ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	8f 83       	std	Y+7, r24	; 0x07
     eb2:	98 87       	std	Y+8, r25	; 0x08
     eb4:	a9 87       	std	Y+9, r26	; 0x09
     eb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eb8:	6f 81       	ldd	r22, Y+7	; 0x07
     eba:	78 85       	ldd	r23, Y+8	; 0x08
     ebc:	89 85       	ldd	r24, Y+9	; 0x09
     ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e8       	ldi	r20, 0x80	; 128
     ec6:	5f e3       	ldi	r21, 0x3F	; 63
     ec8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ecc:	88 23       	and	r24, r24
     ece:	2c f4       	brge	.+10     	; 0xeda <Resieve_String+0xa8>
		__ticks = 1;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	9e 83       	std	Y+6, r25	; 0x06
     ed6:	8d 83       	std	Y+5, r24	; 0x05
     ed8:	3f c0       	rjmp	.+126    	; 0xf58 <Resieve_String+0x126>
	else if (__tmp > 65535)
     eda:	6f 81       	ldd	r22, Y+7	; 0x07
     edc:	78 85       	ldd	r23, Y+8	; 0x08
     ede:	89 85       	ldd	r24, Y+9	; 0x09
     ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	3f ef       	ldi	r19, 0xFF	; 255
     ee6:	4f e7       	ldi	r20, 0x7F	; 127
     ee8:	57 e4       	ldi	r21, 0x47	; 71
     eea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eee:	18 16       	cp	r1, r24
     ef0:	4c f5       	brge	.+82     	; 0xf44 <Resieve_String+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	40 e2       	ldi	r20, 0x20	; 32
     f00:	51 e4       	ldi	r21, 0x41	; 65
     f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	bc 01       	movw	r22, r24
     f0c:	cd 01       	movw	r24, r26
     f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	9e 83       	std	Y+6, r25	; 0x06
     f18:	8d 83       	std	Y+5, r24	; 0x05
     f1a:	0f c0       	rjmp	.+30     	; 0xf3a <Resieve_String+0x108>
     f1c:	89 e1       	ldi	r24, 0x19	; 25
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	9c 83       	std	Y+4, r25	; 0x04
     f22:	8b 83       	std	Y+3, r24	; 0x03
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	9c 81       	ldd	r25, Y+4	; 0x04
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <Resieve_String+0xf6>
     f2c:	9c 83       	std	Y+4, r25	; 0x04
     f2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	9e 83       	std	Y+6, r25	; 0x06
     f38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	69 f7       	brne	.-38     	; 0xf1c <Resieve_String+0xea>
     f42:	14 c0       	rjmp	.+40     	; 0xf6c <Resieve_String+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f44:	6f 81       	ldd	r22, Y+7	; 0x07
     f46:	78 85       	ldd	r23, Y+8	; 0x08
     f48:	89 85       	ldd	r24, Y+9	; 0x09
     f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	9e 83       	std	Y+6, r25	; 0x06
     f56:	8d 83       	std	Y+5, r24	; 0x05
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	9e 81       	ldd	r25, Y+6	; 0x06
     f5c:	9a 83       	std	Y+2, r25	; 0x02
     f5e:	89 83       	std	Y+1, r24	; 0x01
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <Resieve_String+0x132>
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
}
void Resieve_String(uint8* str)
{
	uint8 i = 0;
	str[i] = Resieve_Byte();
	while(str[i] != END_STRING_SYMBOL)
     f6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	88 89       	ldd	r24, Y+16	; 0x10
     f74:	99 89       	ldd	r25, Y+17	; 0x11
     f76:	fc 01       	movw	r30, r24
     f78:	e2 0f       	add	r30, r18
     f7a:	f3 1f       	adc	r31, r19
     f7c:	80 81       	ld	r24, Z
     f7e:	83 32       	cpi	r24, 0x23	; 35
     f80:	09 f0       	breq	.+2      	; 0xf84 <Resieve_String+0x152>
     f82:	73 cf       	rjmp	.-282    	; 0xe6a <Resieve_String+0x38>
	{
		i++;
		str[i] = Resieve_Byte();
		_delay_ms(50);
	}
	str[i] = '\0';
     f84:	8f 85       	ldd	r24, Y+15	; 0x0f
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	88 89       	ldd	r24, Y+16	; 0x10
     f8c:	99 89       	ldd	r25, Y+17	; 0x11
     f8e:	fc 01       	movw	r30, r24
     f90:	e2 0f       	add	r30, r18
     f92:	f3 1f       	adc	r31, r19
     f94:	10 82       	st	Z, r1
}
     f96:	61 96       	adiw	r28, 0x11	; 17
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	08 95       	ret

00000fac <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
     fb4:	0e 94 80 08 	call	0x1100	; 0x1100 <TWI_init>
}
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <EEPROM_writeByte+0x6>
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <EEPROM_writeByte+0x8>
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	9a 83       	std	Y+2, r25	; 0x02
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     fd0:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_start>
    if (TWI_getStatus() != TW_START)
     fd4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TWI_getStatus>
     fd8:	88 30       	cpi	r24, 0x08	; 8
     fda:	11 f0       	breq	.+4      	; 0xfe0 <EEPROM_writeByte+0x22>
        return ERROR;
     fdc:	1c 82       	std	Y+4, r1	; 0x04
     fde:	28 c0       	rjmp	.+80     	; 0x1030 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	80 70       	andi	r24, 0x00	; 0
     fe6:	97 70       	andi	r25, 0x07	; 7
     fe8:	88 0f       	add	r24, r24
     fea:	89 2f       	mov	r24, r25
     fec:	88 1f       	adc	r24, r24
     fee:	99 0b       	sbc	r25, r25
     ff0:	91 95       	neg	r25
     ff2:	80 6a       	ori	r24, 0xA0	; 160
     ff4:	0e 94 b1 08 	call	0x1162	; 0x1162 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     ff8:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TWI_getStatus>
     ffc:	88 31       	cpi	r24, 0x18	; 24
     ffe:	11 f0       	breq	.+4      	; 0x1004 <EEPROM_writeByte+0x46>
        return ERROR; 
    1000:	1c 82       	std	Y+4, r1	; 0x04
    1002:	16 c0       	rjmp	.+44     	; 0x1030 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	0e 94 b1 08 	call	0x1162	; 0x1162 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    100a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TWI_getStatus>
    100e:	88 32       	cpi	r24, 0x28	; 40
    1010:	11 f0       	breq	.+4      	; 0x1016 <EEPROM_writeByte+0x58>
        return ERROR;
    1012:	1c 82       	std	Y+4, r1	; 0x04
    1014:	0d c0       	rjmp	.+26     	; 0x1030 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	0e 94 b1 08 	call	0x1162	; 0x1162 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    101c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TWI_getStatus>
    1020:	88 32       	cpi	r24, 0x28	; 40
    1022:	11 f0       	breq	.+4      	; 0x1028 <EEPROM_writeByte+0x6a>
        return ERROR;
    1024:	1c 82       	std	Y+4, r1	; 0x04
    1026:	04 c0       	rjmp	.+8      	; 0x1030 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1028:	0e 94 a6 08 	call	0x114c	; 0x114c <TWI_stop>
	
    return SUCCESS;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	8c 83       	std	Y+4, r24	; 0x04
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	00 d0       	rcall	.+0      	; 0x1046 <EEPROM_readByte+0x6>
    1046:	00 d0       	rcall	.+0      	; 0x1048 <EEPROM_readByte+0x8>
    1048:	0f 92       	push	r0
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	7c 83       	std	Y+4, r23	; 0x04
    1054:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1056:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_start>
    if (TWI_getStatus() != TW_START)
    105a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TWI_getStatus>
    105e:	88 30       	cpi	r24, 0x08	; 8
    1060:	11 f0       	breq	.+4      	; 0x1066 <EEPROM_readByte+0x26>
        return ERROR;
    1062:	1d 82       	std	Y+5, r1	; 0x05
    1064:	44 c0       	rjmp	.+136    	; 0x10ee <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	80 70       	andi	r24, 0x00	; 0
    106c:	97 70       	andi	r25, 0x07	; 7
    106e:	88 0f       	add	r24, r24
    1070:	89 2f       	mov	r24, r25
    1072:	88 1f       	adc	r24, r24
    1074:	99 0b       	sbc	r25, r25
    1076:	91 95       	neg	r25
    1078:	80 6a       	ori	r24, 0xA0	; 160
    107a:	0e 94 b1 08 	call	0x1162	; 0x1162 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    107e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TWI_getStatus>
    1082:	88 31       	cpi	r24, 0x18	; 24
    1084:	11 f0       	breq	.+4      	; 0x108a <EEPROM_readByte+0x4a>
        return ERROR;
    1086:	1d 82       	std	Y+5, r1	; 0x05
    1088:	32 c0       	rjmp	.+100    	; 0x10ee <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	0e 94 b1 08 	call	0x1162	; 0x1162 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1090:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TWI_getStatus>
    1094:	88 32       	cpi	r24, 0x28	; 40
    1096:	11 f0       	breq	.+4      	; 0x109c <EEPROM_readByte+0x5c>
        return ERROR;
    1098:	1d 82       	std	Y+5, r1	; 0x05
    109a:	29 c0       	rjmp	.+82     	; 0x10ee <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    109c:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    10a0:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TWI_getStatus>
    10a4:	80 31       	cpi	r24, 0x10	; 16
    10a6:	11 f0       	breq	.+4      	; 0x10ac <EEPROM_readByte+0x6c>
        return ERROR;
    10a8:	1d 82       	std	Y+5, r1	; 0x05
    10aa:	21 c0       	rjmp	.+66     	; 0x10ee <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	80 70       	andi	r24, 0x00	; 0
    10b2:	97 70       	andi	r25, 0x07	; 7
    10b4:	88 0f       	add	r24, r24
    10b6:	89 2f       	mov	r24, r25
    10b8:	88 1f       	adc	r24, r24
    10ba:	99 0b       	sbc	r25, r25
    10bc:	91 95       	neg	r25
    10be:	81 6a       	ori	r24, 0xA1	; 161
    10c0:	0e 94 b1 08 	call	0x1162	; 0x1162 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    10c4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TWI_getStatus>
    10c8:	80 34       	cpi	r24, 0x40	; 64
    10ca:	11 f0       	breq	.+4      	; 0x10d0 <EEPROM_readByte+0x90>
        return ERROR;
    10cc:	1d 82       	std	Y+5, r1	; 0x05
    10ce:	0f c0       	rjmp	.+30     	; 0x10ee <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    10d0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <TWI_readWithNACK>
    10d4:	eb 81       	ldd	r30, Y+3	; 0x03
    10d6:	fc 81       	ldd	r31, Y+4	; 0x04
    10d8:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    10da:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TWI_getStatus>
    10de:	88 35       	cpi	r24, 0x58	; 88
    10e0:	11 f0       	breq	.+4      	; 0x10e6 <EEPROM_readByte+0xa6>
        return ERROR;
    10e2:	1d 82       	std	Y+5, r1	; 0x05
    10e4:	04 c0       	rjmp	.+8      	; 0x10ee <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    10e6:	0e 94 a6 08 	call	0x114c	; 0x114c <TWI_stop>
    return SUCCESS;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	8d 83       	std	Y+5, r24	; 0x05
    10ee:	8d 81       	ldd	r24, Y+5	; 0x05
}
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    1108:	e0 e2       	ldi	r30, 0x20	; 32
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	80 83       	st	Z, r24
	TWSR = 0x00;
    1110:	e1 e2       	ldi	r30, 0x21	; 33
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    1116:	e2 e2       	ldi	r30, 0x22	; 34
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    111e:	e6 e5       	ldi	r30, 0x56	; 86
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	84 e0       	ldi	r24, 0x04	; 4
    1124:	80 83       	st	Z, r24
}
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <TWI_start>:

void TWI_start(void)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1134:	e6 e5       	ldi	r30, 0x56	; 86
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	84 ea       	ldi	r24, 0xA4	; 164
    113a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    113c:	e6 e5       	ldi	r30, 0x56	; 86
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	88 23       	and	r24, r24
    1144:	dc f7       	brge	.-10     	; 0x113c <TWI_start+0x10>
}
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <TWI_stop>:

void TWI_stop(void)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1154:	e6 e5       	ldi	r30, 0x56	; 86
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	84 e9       	ldi	r24, 0x94	; 148
    115a:	80 83       	st	Z, r24
}
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <TWI_write>:

void TWI_write(uint8 data)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	0f 92       	push	r0
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    116e:	e3 e2       	ldi	r30, 0x23	; 35
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1176:	e6 e5       	ldi	r30, 0x56	; 86
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	84 e8       	ldi	r24, 0x84	; 132
    117c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    117e:	e6 e5       	ldi	r30, 0x56	; 86
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	88 23       	and	r24, r24
    1186:	dc f7       	brge	.-10     	; 0x117e <TWI_write+0x1c>
}
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1198:	e6 e5       	ldi	r30, 0x56	; 86
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	84 ec       	ldi	r24, 0xC4	; 196
    119e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    11a0:	e6 e5       	ldi	r30, 0x56	; 86
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	88 23       	and	r24, r24
    11a8:	dc f7       	brge	.-10     	; 0x11a0 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    11aa:	e3 e2       	ldi	r30, 0x23	; 35
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
}
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    11be:	e6 e5       	ldi	r30, 0x56	; 86
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	84 e8       	ldi	r24, 0x84	; 132
    11c4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    11c6:	e6 e5       	ldi	r30, 0x56	; 86
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	88 23       	and	r24, r24
    11ce:	dc f7       	brge	.-10     	; 0x11c6 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    11d0:	e3 e2       	ldi	r30, 0x23	; 35
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
}
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	0f 92       	push	r0
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    11e6:	e1 e2       	ldi	r30, 0x21	; 33
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	88 7f       	andi	r24, 0xF8	; 248
    11ee:	89 83       	std	Y+1, r24	; 0x01
    return status;
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <main>:
uint8 theif = FALSE;
/*---------------------------------------------------------------------------------*
 *                                FUNCTION DEFINITIONS                             *
 *---------------------------------------------------------------------------------*/
int main()
{
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	cf 58       	subi	r28, 0x8F	; 143
    1208:	d0 40       	sbci	r29, 0x00	; 0
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
/* Initializations ---------------------------------*/

	/* set direction of output leds and buzzer */
	SET_BIT(DDRA,GREEN_LED);
    1214:	aa e3       	ldi	r26, 0x3A	; 58
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	ea e3       	ldi	r30, 0x3A	; 58
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	81 60       	ori	r24, 0x01	; 1
    1220:	8c 93       	st	X, r24
	SET_BIT(DDRA,RED_LED);
    1222:	aa e3       	ldi	r26, 0x3A	; 58
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	ea e3       	ldi	r30, 0x3A	; 58
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	82 60       	ori	r24, 0x02	; 2
    122e:	8c 93       	st	X, r24
	SET_BIT(DDRA,BUZZER);
    1230:	aa e3       	ldi	r26, 0x3A	; 58
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	ea e3       	ldi	r30, 0x3A	; 58
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	84 60       	ori	r24, 0x04	; 4
    123c:	8c 93       	st	X, r24
    /*----------------*/
	/* initialize EEPROM and uart modules */
	EEPROM_init();
    123e:	0e 94 d6 07 	call	0xfac	; 0xfac <EEPROM_init>
	UART_Init();
    1242:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_Init>
    /*----------------*/
	/* initialize PWM for servo motor */
	SREG |= (1 << 7);
    1246:	af e5       	ldi	r26, 0x5F	; 95
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	ef e5       	ldi	r30, 0x5F	; 95
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	80 68       	ori	r24, 0x80	; 128
    1252:	8c 93       	st	X, r24
	PWM_TIMER_INIT(LOCK_DOOR_ANGLE);
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	80 ea       	ldi	r24, 0xA0	; 160
    125a:	90 e4       	ldi	r25, 0x40	; 64
    125c:	0e 94 72 11 	call	0x22e4	; 0x22e4 <PWM_TIMER_INIT>
    /*----------------*/
	/* set reset password in EEPROM if first time */
    if(isFirstTime())
    1260:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <isFirstTime>
    1264:	88 23       	and	r24, r24
    1266:	09 f4       	brne	.+2      	; 0x126a <main+0x70>
    1268:	bf c0       	rjmp	.+382    	; 0x13e8 <main+0x1ee>
    {
		setPassword(password);
    126a:	80 91 6e 00 	lds	r24, 0x006E
    126e:	90 91 6f 00 	lds	r25, 0x006F
    1272:	0e 94 0f 10 	call	0x201e	; 0x201e <setPassword>
		EEPROM_writeByte(FIRST_TIME_FLAG_ADDRESS, 0x00);
    1276:	80 e3       	ldi	r24, 0x30	; 48
    1278:	93 e0       	ldi	r25, 0x03	; 3
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	0e 94 df 07 	call	0xfbe	; 0xfbe <EEPROM_writeByte>
    1280:	fe 01       	movw	r30, r28
    1282:	e7 57       	subi	r30, 0x77	; 119
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	a0 e2       	ldi	r26, 0x20	; 32
    128c:	b1 e4       	ldi	r27, 0x41	; 65
    128e:	80 83       	st	Z, r24
    1290:	91 83       	std	Z+1, r25	; 0x01
    1292:	a2 83       	std	Z+2, r26	; 0x02
    1294:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1296:	8e 01       	movw	r16, r28
    1298:	0b 57       	subi	r16, 0x7B	; 123
    129a:	1f 4f       	sbci	r17, 0xFF	; 255
    129c:	fe 01       	movw	r30, r28
    129e:	e7 57       	subi	r30, 0x77	; 119
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	60 81       	ld	r22, Z
    12a4:	71 81       	ldd	r23, Z+1	; 0x01
    12a6:	82 81       	ldd	r24, Z+2	; 0x02
    12a8:	93 81       	ldd	r25, Z+3	; 0x03
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	4a e7       	ldi	r20, 0x7A	; 122
    12b0:	53 e4       	ldi	r21, 0x43	; 67
    12b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	f8 01       	movw	r30, r16
    12bc:	80 83       	st	Z, r24
    12be:	91 83       	std	Z+1, r25	; 0x01
    12c0:	a2 83       	std	Z+2, r26	; 0x02
    12c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12c4:	fe 01       	movw	r30, r28
    12c6:	eb 57       	subi	r30, 0x7B	; 123
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	60 81       	ld	r22, Z
    12cc:	71 81       	ldd	r23, Z+1	; 0x01
    12ce:	82 81       	ldd	r24, Z+2	; 0x02
    12d0:	93 81       	ldd	r25, Z+3	; 0x03
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e8       	ldi	r20, 0x80	; 128
    12d8:	5f e3       	ldi	r21, 0x3F	; 63
    12da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12de:	88 23       	and	r24, r24
    12e0:	44 f4       	brge	.+16     	; 0x12f2 <main+0xf8>
		__ticks = 1;
    12e2:	fe 01       	movw	r30, r28
    12e4:	ed 57       	subi	r30, 0x7D	; 125
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	91 83       	std	Z+1, r25	; 0x01
    12ee:	80 83       	st	Z, r24
    12f0:	64 c0       	rjmp	.+200    	; 0x13ba <main+0x1c0>
	else if (__tmp > 65535)
    12f2:	fe 01       	movw	r30, r28
    12f4:	eb 57       	subi	r30, 0x7B	; 123
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	60 81       	ld	r22, Z
    12fa:	71 81       	ldd	r23, Z+1	; 0x01
    12fc:	82 81       	ldd	r24, Z+2	; 0x02
    12fe:	93 81       	ldd	r25, Z+3	; 0x03
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	3f ef       	ldi	r19, 0xFF	; 255
    1304:	4f e7       	ldi	r20, 0x7F	; 127
    1306:	57 e4       	ldi	r21, 0x47	; 71
    1308:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    130c:	18 16       	cp	r1, r24
    130e:	0c f0       	brlt	.+2      	; 0x1312 <main+0x118>
    1310:	43 c0       	rjmp	.+134    	; 0x1398 <main+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1312:	fe 01       	movw	r30, r28
    1314:	e7 57       	subi	r30, 0x77	; 119
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	60 81       	ld	r22, Z
    131a:	71 81       	ldd	r23, Z+1	; 0x01
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	93 81       	ldd	r25, Z+3	; 0x03
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e2       	ldi	r20, 0x20	; 32
    1326:	51 e4       	ldi	r21, 0x41	; 65
    1328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	8e 01       	movw	r16, r28
    1332:	0d 57       	subi	r16, 0x7D	; 125
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	f8 01       	movw	r30, r16
    1344:	91 83       	std	Z+1, r25	; 0x01
    1346:	80 83       	st	Z, r24
    1348:	1f c0       	rjmp	.+62     	; 0x1388 <main+0x18e>
    134a:	fe 01       	movw	r30, r28
    134c:	ef 57       	subi	r30, 0x7F	; 127
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	89 e1       	ldi	r24, 0x19	; 25
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	91 83       	std	Z+1, r25	; 0x01
    1356:	80 83       	st	Z, r24
    1358:	fe 01       	movw	r30, r28
    135a:	ef 57       	subi	r30, 0x7F	; 127
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	80 81       	ld	r24, Z
    1360:	91 81       	ldd	r25, Z+1	; 0x01
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <main+0x168>
    1366:	fe 01       	movw	r30, r28
    1368:	ef 57       	subi	r30, 0x7F	; 127
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	91 83       	std	Z+1, r25	; 0x01
    136e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1370:	de 01       	movw	r26, r28
    1372:	ad 57       	subi	r26, 0x7D	; 125
    1374:	bf 4f       	sbci	r27, 0xFF	; 255
    1376:	fe 01       	movw	r30, r28
    1378:	ed 57       	subi	r30, 0x7D	; 125
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	80 81       	ld	r24, Z
    137e:	91 81       	ldd	r25, Z+1	; 0x01
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	11 96       	adiw	r26, 0x01	; 1
    1384:	9c 93       	st	X, r25
    1386:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1388:	fe 01       	movw	r30, r28
    138a:	ed 57       	subi	r30, 0x7D	; 125
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	80 81       	ld	r24, Z
    1390:	91 81       	ldd	r25, Z+1	; 0x01
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	d1 f6       	brne	.-76     	; 0x134a <main+0x150>
    1396:	28 c0       	rjmp	.+80     	; 0x13e8 <main+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1398:	8e 01       	movw	r16, r28
    139a:	0d 57       	subi	r16, 0x7D	; 125
    139c:	1f 4f       	sbci	r17, 0xFF	; 255
    139e:	fe 01       	movw	r30, r28
    13a0:	eb 57       	subi	r30, 0x7B	; 123
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	60 81       	ld	r22, Z
    13a6:	71 81       	ldd	r23, Z+1	; 0x01
    13a8:	82 81       	ldd	r24, Z+2	; 0x02
    13aa:	93 81       	ldd	r25, Z+3	; 0x03
    13ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	f8 01       	movw	r30, r16
    13b6:	91 83       	std	Z+1, r25	; 0x01
    13b8:	80 83       	st	Z, r24
    13ba:	de 01       	movw	r26, r28
    13bc:	a1 58       	subi	r26, 0x81	; 129
    13be:	bf 4f       	sbci	r27, 0xFF	; 255
    13c0:	fe 01       	movw	r30, r28
    13c2:	ed 57       	subi	r30, 0x7D	; 125
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	80 81       	ld	r24, Z
    13c8:	91 81       	ldd	r25, Z+1	; 0x01
    13ca:	11 96       	adiw	r26, 0x01	; 1
    13cc:	9c 93       	st	X, r25
    13ce:	8e 93       	st	-X, r24
    13d0:	fe 01       	movw	r30, r28
    13d2:	e1 58       	subi	r30, 0x81	; 129
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	80 81       	ld	r24, Z
    13d8:	91 81       	ldd	r25, Z+1	; 0x01
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	f1 f7       	brne	.-4      	; 0x13da <main+0x1e0>
    13de:	fe 01       	movw	r30, r28
    13e0:	e1 58       	subi	r30, 0x81	; 129
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	80 83       	st	Z, r24
/*-------------------------------------------------*/
	uint8 command;
	while(HIGH)
	{
/* Set leds and buzzer congigurations -------------*/
		if(isLocked && !theif)					/* if door is locked */
    13e8:	80 91 70 00 	lds	r24, 0x0070
    13ec:	88 23       	and	r24, r24
    13ee:	99 f0       	breq	.+38     	; 0x1416 <main+0x21c>
    13f0:	80 91 72 00 	lds	r24, 0x0072
    13f4:	88 23       	and	r24, r24
    13f6:	79 f4       	brne	.+30     	; 0x1416 <main+0x21c>
		{
			CLEAR_BIT(PORTA,RED_LED);
    13f8:	ab e3       	ldi	r26, 0x3B	; 59
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	eb e3       	ldi	r30, 0x3B	; 59
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	8d 7f       	andi	r24, 0xFD	; 253
    1404:	8c 93       	st	X, r24
			SET_BIT(PORTA,GREEN_LED);
    1406:	ab e3       	ldi	r26, 0x3B	; 59
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	eb e3       	ldi	r30, 0x3B	; 59
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	81 60       	ori	r24, 0x01	; 1
    1412:	8c 93       	st	X, r24
    1414:	a3 c1       	rjmp	.+838    	; 0x175c <main+0x562>
		}
		else if(isLocked && theif)				/* if warning (wrong password) */
    1416:	80 91 70 00 	lds	r24, 0x0070
    141a:	88 23       	and	r24, r24
    141c:	09 f4       	brne	.+2      	; 0x1420 <main+0x226>
    141e:	90 c1       	rjmp	.+800    	; 0x1740 <main+0x546>
    1420:	80 91 72 00 	lds	r24, 0x0072
    1424:	88 23       	and	r24, r24
    1426:	09 f4       	brne	.+2      	; 0x142a <main+0x230>
    1428:	8b c1       	rjmp	.+790    	; 0x1740 <main+0x546>
		{
			SET_BIT(PORTA,GREEN_LED);
    142a:	ab e3       	ldi	r26, 0x3B	; 59
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	eb e3       	ldi	r30, 0x3B	; 59
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	81 60       	ori	r24, 0x01	; 1
    1436:	8c 93       	st	X, r24
			CLEAR_BIT(PORTA,RED_LED);
    1438:	ab e3       	ldi	r26, 0x3B	; 59
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	eb e3       	ldi	r30, 0x3B	; 59
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8d 7f       	andi	r24, 0xFD	; 253
    1444:	8c 93       	st	X, r24
			SET_BIT(PORTA,BUZZER);
    1446:	ab e3       	ldi	r26, 0x3B	; 59
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	eb e3       	ldi	r30, 0x3B	; 59
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	84 60       	ori	r24, 0x04	; 4
    1452:	8c 93       	st	X, r24
    1454:	fe 01       	movw	r30, r28
    1456:	e5 58       	subi	r30, 0x85	; 133
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	aa ef       	ldi	r26, 0xFA	; 250
    1460:	b3 e4       	ldi	r27, 0x43	; 67
    1462:	80 83       	st	Z, r24
    1464:	91 83       	std	Z+1, r25	; 0x01
    1466:	a2 83       	std	Z+2, r26	; 0x02
    1468:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146a:	8e 01       	movw	r16, r28
    146c:	09 58       	subi	r16, 0x89	; 137
    146e:	1f 4f       	sbci	r17, 0xFF	; 255
    1470:	fe 01       	movw	r30, r28
    1472:	e5 58       	subi	r30, 0x85	; 133
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	60 81       	ld	r22, Z
    1478:	71 81       	ldd	r23, Z+1	; 0x01
    147a:	82 81       	ldd	r24, Z+2	; 0x02
    147c:	93 81       	ldd	r25, Z+3	; 0x03
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	4a e7       	ldi	r20, 0x7A	; 122
    1484:	53 e4       	ldi	r21, 0x43	; 67
    1486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	f8 01       	movw	r30, r16
    1490:	80 83       	st	Z, r24
    1492:	91 83       	std	Z+1, r25	; 0x01
    1494:	a2 83       	std	Z+2, r26	; 0x02
    1496:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1498:	fe 01       	movw	r30, r28
    149a:	e9 58       	subi	r30, 0x89	; 137
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	60 81       	ld	r22, Z
    14a0:	71 81       	ldd	r23, Z+1	; 0x01
    14a2:	82 81       	ldd	r24, Z+2	; 0x02
    14a4:	93 81       	ldd	r25, Z+3	; 0x03
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e8       	ldi	r20, 0x80	; 128
    14ac:	5f e3       	ldi	r21, 0x3F	; 63
    14ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b2:	88 23       	and	r24, r24
    14b4:	44 f4       	brge	.+16     	; 0x14c6 <main+0x2cc>
		__ticks = 1;
    14b6:	fe 01       	movw	r30, r28
    14b8:	eb 58       	subi	r30, 0x8B	; 139
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	80 83       	st	Z, r24
    14c4:	64 c0       	rjmp	.+200    	; 0x158e <main+0x394>
	else if (__tmp > 65535)
    14c6:	fe 01       	movw	r30, r28
    14c8:	e9 58       	subi	r30, 0x89	; 137
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	60 81       	ld	r22, Z
    14ce:	71 81       	ldd	r23, Z+1	; 0x01
    14d0:	82 81       	ldd	r24, Z+2	; 0x02
    14d2:	93 81       	ldd	r25, Z+3	; 0x03
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	3f ef       	ldi	r19, 0xFF	; 255
    14d8:	4f e7       	ldi	r20, 0x7F	; 127
    14da:	57 e4       	ldi	r21, 0x47	; 71
    14dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e0:	18 16       	cp	r1, r24
    14e2:	0c f0       	brlt	.+2      	; 0x14e6 <main+0x2ec>
    14e4:	43 c0       	rjmp	.+134    	; 0x156c <main+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e6:	fe 01       	movw	r30, r28
    14e8:	e5 58       	subi	r30, 0x85	; 133
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	60 81       	ld	r22, Z
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 e2       	ldi	r20, 0x20	; 32
    14fa:	51 e4       	ldi	r21, 0x41	; 65
    14fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	8e 01       	movw	r16, r28
    1506:	0b 58       	subi	r16, 0x8B	; 139
    1508:	1f 4f       	sbci	r17, 0xFF	; 255
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	f8 01       	movw	r30, r16
    1518:	91 83       	std	Z+1, r25	; 0x01
    151a:	80 83       	st	Z, r24
    151c:	1f c0       	rjmp	.+62     	; 0x155c <main+0x362>
    151e:	fe 01       	movw	r30, r28
    1520:	ed 58       	subi	r30, 0x8D	; 141
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	89 e1       	ldi	r24, 0x19	; 25
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	91 83       	std	Z+1, r25	; 0x01
    152a:	80 83       	st	Z, r24
    152c:	fe 01       	movw	r30, r28
    152e:	ed 58       	subi	r30, 0x8D	; 141
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	80 81       	ld	r24, Z
    1534:	91 81       	ldd	r25, Z+1	; 0x01
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <main+0x33c>
    153a:	fe 01       	movw	r30, r28
    153c:	ed 58       	subi	r30, 0x8D	; 141
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	91 83       	std	Z+1, r25	; 0x01
    1542:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1544:	de 01       	movw	r26, r28
    1546:	ab 58       	subi	r26, 0x8B	; 139
    1548:	bf 4f       	sbci	r27, 0xFF	; 255
    154a:	fe 01       	movw	r30, r28
    154c:	eb 58       	subi	r30, 0x8B	; 139
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	80 81       	ld	r24, Z
    1552:	91 81       	ldd	r25, Z+1	; 0x01
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	11 96       	adiw	r26, 0x01	; 1
    1558:	9c 93       	st	X, r25
    155a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155c:	fe 01       	movw	r30, r28
    155e:	eb 58       	subi	r30, 0x8B	; 139
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	80 81       	ld	r24, Z
    1564:	91 81       	ldd	r25, Z+1	; 0x01
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	d1 f6       	brne	.-76     	; 0x151e <main+0x324>
    156a:	27 c0       	rjmp	.+78     	; 0x15ba <main+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156c:	8e 01       	movw	r16, r28
    156e:	0b 58       	subi	r16, 0x8B	; 139
    1570:	1f 4f       	sbci	r17, 0xFF	; 255
    1572:	fe 01       	movw	r30, r28
    1574:	e9 58       	subi	r30, 0x89	; 137
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	60 81       	ld	r22, Z
    157a:	71 81       	ldd	r23, Z+1	; 0x01
    157c:	82 81       	ldd	r24, Z+2	; 0x02
    157e:	93 81       	ldd	r25, Z+3	; 0x03
    1580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	f8 01       	movw	r30, r16
    158a:	91 83       	std	Z+1, r25	; 0x01
    158c:	80 83       	st	Z, r24
    158e:	de 01       	movw	r26, r28
    1590:	af 58       	subi	r26, 0x8F	; 143
    1592:	bf 4f       	sbci	r27, 0xFF	; 255
    1594:	fe 01       	movw	r30, r28
    1596:	eb 58       	subi	r30, 0x8B	; 139
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	80 81       	ld	r24, Z
    159c:	91 81       	ldd	r25, Z+1	; 0x01
    159e:	8d 93       	st	X+, r24
    15a0:	9c 93       	st	X, r25
    15a2:	fe 01       	movw	r30, r28
    15a4:	ef 58       	subi	r30, 0x8F	; 143
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	80 81       	ld	r24, Z
    15aa:	91 81       	ldd	r25, Z+1	; 0x01
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <main+0x3b2>
    15b0:	fe 01       	movw	r30, r28
    15b2:	ef 58       	subi	r30, 0x8F	; 143
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	91 83       	std	Z+1, r25	; 0x01
    15b8:	80 83       	st	Z, r24
			_delay_ms(500);
			SET_BIT(PORTA,RED_LED);
    15ba:	ab e3       	ldi	r26, 0x3B	; 59
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	eb e3       	ldi	r30, 0x3B	; 59
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	82 60       	ori	r24, 0x02	; 2
    15c6:	8c 93       	st	X, r24
			CLEAR_BIT(PORTA,BUZZER);
    15c8:	ab e3       	ldi	r26, 0x3B	; 59
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	eb e3       	ldi	r30, 0x3B	; 59
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8b 7f       	andi	r24, 0xFB	; 251
    15d4:	8c 93       	st	X, r24
    15d6:	fe 01       	movw	r30, r28
    15d8:	e3 59       	subi	r30, 0x93	; 147
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	aa ef       	ldi	r26, 0xFA	; 250
    15e2:	b3 e4       	ldi	r27, 0x43	; 67
    15e4:	80 83       	st	Z, r24
    15e6:	91 83       	std	Z+1, r25	; 0x01
    15e8:	a2 83       	std	Z+2, r26	; 0x02
    15ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ec:	8e 01       	movw	r16, r28
    15ee:	07 59       	subi	r16, 0x97	; 151
    15f0:	1f 4f       	sbci	r17, 0xFF	; 255
    15f2:	fe 01       	movw	r30, r28
    15f4:	e3 59       	subi	r30, 0x93	; 147
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	60 81       	ld	r22, Z
    15fa:	71 81       	ldd	r23, Z+1	; 0x01
    15fc:	82 81       	ldd	r24, Z+2	; 0x02
    15fe:	93 81       	ldd	r25, Z+3	; 0x03
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	4a e7       	ldi	r20, 0x7A	; 122
    1606:	53 e4       	ldi	r21, 0x43	; 67
    1608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	f8 01       	movw	r30, r16
    1612:	80 83       	st	Z, r24
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	a2 83       	std	Z+2, r26	; 0x02
    1618:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    161a:	fe 01       	movw	r30, r28
    161c:	e7 59       	subi	r30, 0x97	; 151
    161e:	ff 4f       	sbci	r31, 0xFF	; 255
    1620:	60 81       	ld	r22, Z
    1622:	71 81       	ldd	r23, Z+1	; 0x01
    1624:	82 81       	ldd	r24, Z+2	; 0x02
    1626:	93 81       	ldd	r25, Z+3	; 0x03
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e8       	ldi	r20, 0x80	; 128
    162e:	5f e3       	ldi	r21, 0x3F	; 63
    1630:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1634:	88 23       	and	r24, r24
    1636:	44 f4       	brge	.+16     	; 0x1648 <main+0x44e>
		__ticks = 1;
    1638:	fe 01       	movw	r30, r28
    163a:	e9 59       	subi	r30, 0x99	; 153
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	91 83       	std	Z+1, r25	; 0x01
    1644:	80 83       	st	Z, r24
    1646:	64 c0       	rjmp	.+200    	; 0x1710 <main+0x516>
	else if (__tmp > 65535)
    1648:	fe 01       	movw	r30, r28
    164a:	e7 59       	subi	r30, 0x97	; 151
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	60 81       	ld	r22, Z
    1650:	71 81       	ldd	r23, Z+1	; 0x01
    1652:	82 81       	ldd	r24, Z+2	; 0x02
    1654:	93 81       	ldd	r25, Z+3	; 0x03
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	3f ef       	ldi	r19, 0xFF	; 255
    165a:	4f e7       	ldi	r20, 0x7F	; 127
    165c:	57 e4       	ldi	r21, 0x47	; 71
    165e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1662:	18 16       	cp	r1, r24
    1664:	0c f0       	brlt	.+2      	; 0x1668 <main+0x46e>
    1666:	43 c0       	rjmp	.+134    	; 0x16ee <main+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1668:	fe 01       	movw	r30, r28
    166a:	e3 59       	subi	r30, 0x93	; 147
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	60 81       	ld	r22, Z
    1670:	71 81       	ldd	r23, Z+1	; 0x01
    1672:	82 81       	ldd	r24, Z+2	; 0x02
    1674:	93 81       	ldd	r25, Z+3	; 0x03
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e2       	ldi	r20, 0x20	; 32
    167c:	51 e4       	ldi	r21, 0x41	; 65
    167e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	8e 01       	movw	r16, r28
    1688:	09 59       	subi	r16, 0x99	; 153
    168a:	1f 4f       	sbci	r17, 0xFF	; 255
    168c:	bc 01       	movw	r22, r24
    168e:	cd 01       	movw	r24, r26
    1690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	f8 01       	movw	r30, r16
    169a:	91 83       	std	Z+1, r25	; 0x01
    169c:	80 83       	st	Z, r24
    169e:	1f c0       	rjmp	.+62     	; 0x16de <main+0x4e4>
    16a0:	fe 01       	movw	r30, r28
    16a2:	eb 59       	subi	r30, 0x9B	; 155
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	89 e1       	ldi	r24, 0x19	; 25
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	91 83       	std	Z+1, r25	; 0x01
    16ac:	80 83       	st	Z, r24
    16ae:	fe 01       	movw	r30, r28
    16b0:	eb 59       	subi	r30, 0x9B	; 155
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	f1 f7       	brne	.-4      	; 0x16b8 <main+0x4be>
    16bc:	fe 01       	movw	r30, r28
    16be:	eb 59       	subi	r30, 0x9B	; 155
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	91 83       	std	Z+1, r25	; 0x01
    16c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c6:	de 01       	movw	r26, r28
    16c8:	a9 59       	subi	r26, 0x99	; 153
    16ca:	bf 4f       	sbci	r27, 0xFF	; 255
    16cc:	fe 01       	movw	r30, r28
    16ce:	e9 59       	subi	r30, 0x99	; 153
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	80 81       	ld	r24, Z
    16d4:	91 81       	ldd	r25, Z+1	; 0x01
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	11 96       	adiw	r26, 0x01	; 1
    16da:	9c 93       	st	X, r25
    16dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16de:	fe 01       	movw	r30, r28
    16e0:	e9 59       	subi	r30, 0x99	; 153
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	80 81       	ld	r24, Z
    16e6:	91 81       	ldd	r25, Z+1	; 0x01
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	d1 f6       	brne	.-76     	; 0x16a0 <main+0x4a6>
    16ec:	37 c0       	rjmp	.+110    	; 0x175c <main+0x562>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ee:	8e 01       	movw	r16, r28
    16f0:	09 59       	subi	r16, 0x99	; 153
    16f2:	1f 4f       	sbci	r17, 0xFF	; 255
    16f4:	fe 01       	movw	r30, r28
    16f6:	e7 59       	subi	r30, 0x97	; 151
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	60 81       	ld	r22, Z
    16fc:	71 81       	ldd	r23, Z+1	; 0x01
    16fe:	82 81       	ldd	r24, Z+2	; 0x02
    1700:	93 81       	ldd	r25, Z+3	; 0x03
    1702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	f8 01       	movw	r30, r16
    170c:	91 83       	std	Z+1, r25	; 0x01
    170e:	80 83       	st	Z, r24
    1710:	de 01       	movw	r26, r28
    1712:	ad 59       	subi	r26, 0x9D	; 157
    1714:	bf 4f       	sbci	r27, 0xFF	; 255
    1716:	fe 01       	movw	r30, r28
    1718:	e9 59       	subi	r30, 0x99	; 153
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	80 81       	ld	r24, Z
    171e:	91 81       	ldd	r25, Z+1	; 0x01
    1720:	11 96       	adiw	r26, 0x01	; 1
    1722:	9c 93       	st	X, r25
    1724:	8e 93       	st	-X, r24
    1726:	fe 01       	movw	r30, r28
    1728:	ed 59       	subi	r30, 0x9D	; 157
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	80 81       	ld	r24, Z
    172e:	91 81       	ldd	r25, Z+1	; 0x01
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	f1 f7       	brne	.-4      	; 0x1730 <main+0x536>
    1734:	fe 01       	movw	r30, r28
    1736:	ed 59       	subi	r30, 0x9D	; 157
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	91 83       	std	Z+1, r25	; 0x01
    173c:	80 83       	st	Z, r24
    173e:	0e c0       	rjmp	.+28     	; 0x175c <main+0x562>
			_delay_ms(500);
		}										/* if door is opened */
		else
		{
			CLEAR_BIT(PORTA,GREEN_LED);
    1740:	ab e3       	ldi	r26, 0x3B	; 59
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	eb e3       	ldi	r30, 0x3B	; 59
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	8e 7f       	andi	r24, 0xFE	; 254
    174c:	8c 93       	st	X, r24
			SET_BIT(PORTA,RED_LED);
    174e:	ab e3       	ldi	r26, 0x3B	; 59
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	eb e3       	ldi	r30, 0x3B	; 59
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	82 60       	ori	r24, 0x02	; 2
    175a:	8c 93       	st	X, r24
		}
/*-------------------------------------------------*/
/*Recieve command from first MCU ------------------*/
		command = Resieve_Byte();
    175c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Resieve_Byte>
    1760:	fe 01       	movw	r30, r28
    1762:	e3 57       	subi	r30, 0x73	; 115
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 83       	st	Z, r24
		switch(command)
    1768:	fe 01       	movw	r30, r28
    176a:	e3 57       	subi	r30, 0x73	; 115
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	80 81       	ld	r24, Z
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	c2 57       	subi	r28, 0x72	; 114
    1776:	df 4f       	sbci	r29, 0xFF	; 255
    1778:	39 83       	std	Y+1, r19	; 0x01
    177a:	28 83       	st	Y, r18
    177c:	ce 58       	subi	r28, 0x8E	; 142
    177e:	d0 40       	sbci	r29, 0x00	; 0
    1780:	c2 57       	subi	r28, 0x72	; 114
    1782:	df 4f       	sbci	r29, 0xFF	; 255
    1784:	88 81       	ld	r24, Y
    1786:	99 81       	ldd	r25, Y+1	; 0x01
    1788:	ce 58       	subi	r28, 0x8E	; 142
    178a:	d0 40       	sbci	r29, 0x00	; 0
    178c:	83 30       	cpi	r24, 0x03	; 3
    178e:	91 05       	cpc	r25, r1
    1790:	09 f4       	brne	.+2      	; 0x1794 <main+0x59a>
    1792:	41 c2       	rjmp	.+1154   	; 0x1c16 <main+0xa1c>
    1794:	c2 57       	subi	r28, 0x72	; 114
    1796:	df 4f       	sbci	r29, 0xFF	; 255
    1798:	e8 81       	ld	r30, Y
    179a:	f9 81       	ldd	r31, Y+1	; 0x01
    179c:	ce 58       	subi	r28, 0x8E	; 142
    179e:	d0 40       	sbci	r29, 0x00	; 0
    17a0:	e4 30       	cpi	r30, 0x04	; 4
    17a2:	f1 05       	cpc	r31, r1
    17a4:	a4 f4       	brge	.+40     	; 0x17ce <main+0x5d4>
    17a6:	c2 57       	subi	r28, 0x72	; 114
    17a8:	df 4f       	sbci	r29, 0xFF	; 255
    17aa:	28 81       	ld	r18, Y
    17ac:	39 81       	ldd	r19, Y+1	; 0x01
    17ae:	ce 58       	subi	r28, 0x8E	; 142
    17b0:	d0 40       	sbci	r29, 0x00	; 0
    17b2:	21 30       	cpi	r18, 0x01	; 1
    17b4:	31 05       	cpc	r19, r1
    17b6:	51 f1       	breq	.+84     	; 0x180c <main+0x612>
    17b8:	c2 57       	subi	r28, 0x72	; 114
    17ba:	df 4f       	sbci	r29, 0xFF	; 255
    17bc:	88 81       	ld	r24, Y
    17be:	99 81       	ldd	r25, Y+1	; 0x01
    17c0:	ce 58       	subi	r28, 0x8E	; 142
    17c2:	d0 40       	sbci	r29, 0x00	; 0
    17c4:	82 30       	cpi	r24, 0x02	; 2
    17c6:	91 05       	cpc	r25, r1
    17c8:	09 f4       	brne	.+2      	; 0x17cc <main+0x5d2>
    17ca:	dd c0       	rjmp	.+442    	; 0x1986 <main+0x78c>
    17cc:	0d ce       	rjmp	.-998    	; 0x13e8 <main+0x1ee>
    17ce:	c2 57       	subi	r28, 0x72	; 114
    17d0:	df 4f       	sbci	r29, 0xFF	; 255
    17d2:	e8 81       	ld	r30, Y
    17d4:	f9 81       	ldd	r31, Y+1	; 0x01
    17d6:	ce 58       	subi	r28, 0x8E	; 142
    17d8:	d0 40       	sbci	r29, 0x00	; 0
    17da:	e5 30       	cpi	r30, 0x05	; 5
    17dc:	f1 05       	cpc	r31, r1
    17de:	09 f4       	brne	.+2      	; 0x17e2 <main+0x5e8>
    17e0:	0d c3       	rjmp	.+1562   	; 0x1dfc <main+0xc02>
    17e2:	c2 57       	subi	r28, 0x72	; 114
    17e4:	df 4f       	sbci	r29, 0xFF	; 255
    17e6:	28 81       	ld	r18, Y
    17e8:	39 81       	ldd	r19, Y+1	; 0x01
    17ea:	ce 58       	subi	r28, 0x8E	; 142
    17ec:	d0 40       	sbci	r29, 0x00	; 0
    17ee:	25 30       	cpi	r18, 0x05	; 5
    17f0:	31 05       	cpc	r19, r1
    17f2:	0c f4       	brge	.+2      	; 0x17f6 <main+0x5fc>
    17f4:	06 c3       	rjmp	.+1548   	; 0x1e02 <main+0xc08>
    17f6:	c2 57       	subi	r28, 0x72	; 114
    17f8:	df 4f       	sbci	r29, 0xFF	; 255
    17fa:	88 81       	ld	r24, Y
    17fc:	99 81       	ldd	r25, Y+1	; 0x01
    17fe:	ce 58       	subi	r28, 0x8E	; 142
    1800:	d0 40       	sbci	r29, 0x00	; 0
    1802:	86 30       	cpi	r24, 0x06	; 6
    1804:	91 05       	cpc	r25, r1
    1806:	09 f4       	brne	.+2      	; 0x180a <main+0x610>
    1808:	f2 c3       	rjmp	.+2020   	; 0x1fee <main+0xdf4>
    180a:	ee cd       	rjmp	.-1060   	; 0x13e8 <main+0x1ee>
		{
		case FETCH_PASSWORD_COMMAND:
			fetchPassword();
    180c:	0e 94 b2 10 	call	0x2164	; 0x2164 <fetchPassword>
			Send_String(password);
    1810:	80 91 6e 00 	lds	r24, 0x006E
    1814:	90 91 6f 00 	lds	r25, 0x006F
    1818:	0e 94 01 06 	call	0xc02	; 0xc02 <Send_String>
    181c:	fe 01       	movw	r30, r28
    181e:	e1 5a       	subi	r30, 0xA1	; 161
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	a8 e4       	ldi	r26, 0x48	; 72
    1828:	b2 e4       	ldi	r27, 0x42	; 66
    182a:	80 83       	st	Z, r24
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	a2 83       	std	Z+2, r26	; 0x02
    1830:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1832:	8e 01       	movw	r16, r28
    1834:	05 5a       	subi	r16, 0xA5	; 165
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	fe 01       	movw	r30, r28
    183a:	e1 5a       	subi	r30, 0xA1	; 161
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	4a e7       	ldi	r20, 0x7A	; 122
    184c:	53 e4       	ldi	r21, 0x43	; 67
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	f8 01       	movw	r30, r16
    1858:	80 83       	st	Z, r24
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	a2 83       	std	Z+2, r26	; 0x02
    185e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1860:	fe 01       	movw	r30, r28
    1862:	e5 5a       	subi	r30, 0xA5	; 165
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e8       	ldi	r20, 0x80	; 128
    1874:	5f e3       	ldi	r21, 0x3F	; 63
    1876:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    187a:	88 23       	and	r24, r24
    187c:	44 f4       	brge	.+16     	; 0x188e <main+0x694>
		__ticks = 1;
    187e:	fe 01       	movw	r30, r28
    1880:	e7 5a       	subi	r30, 0xA7	; 167
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	80 83       	st	Z, r24
    188c:	64 c0       	rjmp	.+200    	; 0x1956 <main+0x75c>
	else if (__tmp > 65535)
    188e:	fe 01       	movw	r30, r28
    1890:	e5 5a       	subi	r30, 0xA5	; 165
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	60 81       	ld	r22, Z
    1896:	71 81       	ldd	r23, Z+1	; 0x01
    1898:	82 81       	ldd	r24, Z+2	; 0x02
    189a:	93 81       	ldd	r25, Z+3	; 0x03
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	3f ef       	ldi	r19, 0xFF	; 255
    18a0:	4f e7       	ldi	r20, 0x7F	; 127
    18a2:	57 e4       	ldi	r21, 0x47	; 71
    18a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a8:	18 16       	cp	r1, r24
    18aa:	0c f0       	brlt	.+2      	; 0x18ae <main+0x6b4>
    18ac:	43 c0       	rjmp	.+134    	; 0x1934 <main+0x73a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	fe 01       	movw	r30, r28
    18b0:	e1 5a       	subi	r30, 0xA1	; 161
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e2       	ldi	r20, 0x20	; 32
    18c2:	51 e4       	ldi	r21, 0x41	; 65
    18c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	8e 01       	movw	r16, r28
    18ce:	07 5a       	subi	r16, 0xA7	; 167
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	f8 01       	movw	r30, r16
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	80 83       	st	Z, r24
    18e4:	1f c0       	rjmp	.+62     	; 0x1924 <main+0x72a>
    18e6:	fe 01       	movw	r30, r28
    18e8:	e9 5a       	subi	r30, 0xA9	; 169
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	89 e1       	ldi	r24, 0x19	; 25
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    18f4:	fe 01       	movw	r30, r28
    18f6:	e9 5a       	subi	r30, 0xA9	; 169
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <main+0x704>
    1902:	fe 01       	movw	r30, r28
    1904:	e9 5a       	subi	r30, 0xA9	; 169
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190c:	de 01       	movw	r26, r28
    190e:	a7 5a       	subi	r26, 0xA7	; 167
    1910:	bf 4f       	sbci	r27, 0xFF	; 255
    1912:	fe 01       	movw	r30, r28
    1914:	e7 5a       	subi	r30, 0xA7	; 167
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 81       	ld	r24, Z
    191a:	91 81       	ldd	r25, Z+1	; 0x01
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	11 96       	adiw	r26, 0x01	; 1
    1920:	9c 93       	st	X, r25
    1922:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1924:	fe 01       	movw	r30, r28
    1926:	e7 5a       	subi	r30, 0xA7	; 167
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	80 81       	ld	r24, Z
    192c:	91 81       	ldd	r25, Z+1	; 0x01
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	d1 f6       	brne	.-76     	; 0x18e6 <main+0x6ec>
    1932:	5a cd       	rjmp	.-1356   	; 0x13e8 <main+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1934:	8e 01       	movw	r16, r28
    1936:	07 5a       	subi	r16, 0xA7	; 167
    1938:	1f 4f       	sbci	r17, 0xFF	; 255
    193a:	fe 01       	movw	r30, r28
    193c:	e5 5a       	subi	r30, 0xA5	; 165
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	60 81       	ld	r22, Z
    1942:	71 81       	ldd	r23, Z+1	; 0x01
    1944:	82 81       	ldd	r24, Z+2	; 0x02
    1946:	93 81       	ldd	r25, Z+3	; 0x03
    1948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	f8 01       	movw	r30, r16
    1952:	91 83       	std	Z+1, r25	; 0x01
    1954:	80 83       	st	Z, r24
    1956:	de 01       	movw	r26, r28
    1958:	ab 5a       	subi	r26, 0xAB	; 171
    195a:	bf 4f       	sbci	r27, 0xFF	; 255
    195c:	fe 01       	movw	r30, r28
    195e:	e7 5a       	subi	r30, 0xA7	; 167
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 81       	ld	r24, Z
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	11 96       	adiw	r26, 0x01	; 1
    1968:	9c 93       	st	X, r25
    196a:	8e 93       	st	-X, r24
    196c:	fe 01       	movw	r30, r28
    196e:	eb 5a       	subi	r30, 0xAB	; 171
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	80 81       	ld	r24, Z
    1974:	91 81       	ldd	r25, Z+1	; 0x01
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	f1 f7       	brne	.-4      	; 0x1976 <main+0x77c>
    197a:	fe 01       	movw	r30, r28
    197c:	eb 5a       	subi	r30, 0xAB	; 171
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	91 83       	std	Z+1, r25	; 0x01
    1982:	80 83       	st	Z, r24
    1984:	31 cd       	rjmp	.-1438   	; 0x13e8 <main+0x1ee>
			_delay_ms(50);
			break;
		case LOCK_DOOR_COMMAND:
			Send_Byte(isLocked);
    1986:	80 91 70 00 	lds	r24, 0x0070
    198a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <Send_Byte>
    198e:	fe 01       	movw	r30, r28
    1990:	ef 5a       	subi	r30, 0xAF	; 175
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	a8 e4       	ldi	r26, 0x48	; 72
    199a:	b2 e4       	ldi	r27, 0x42	; 66
    199c:	80 83       	st	Z, r24
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	a2 83       	std	Z+2, r26	; 0x02
    19a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a4:	8e 01       	movw	r16, r28
    19a6:	03 5b       	subi	r16, 0xB3	; 179
    19a8:	1f 4f       	sbci	r17, 0xFF	; 255
    19aa:	fe 01       	movw	r30, r28
    19ac:	ef 5a       	subi	r30, 0xAF	; 175
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	60 81       	ld	r22, Z
    19b2:	71 81       	ldd	r23, Z+1	; 0x01
    19b4:	82 81       	ldd	r24, Z+2	; 0x02
    19b6:	93 81       	ldd	r25, Z+3	; 0x03
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	4a e7       	ldi	r20, 0x7A	; 122
    19be:	53 e4       	ldi	r21, 0x43	; 67
    19c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	f8 01       	movw	r30, r16
    19ca:	80 83       	st	Z, r24
    19cc:	91 83       	std	Z+1, r25	; 0x01
    19ce:	a2 83       	std	Z+2, r26	; 0x02
    19d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19d2:	fe 01       	movw	r30, r28
    19d4:	e3 5b       	subi	r30, 0xB3	; 179
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	60 81       	ld	r22, Z
    19da:	71 81       	ldd	r23, Z+1	; 0x01
    19dc:	82 81       	ldd	r24, Z+2	; 0x02
    19de:	93 81       	ldd	r25, Z+3	; 0x03
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e8       	ldi	r20, 0x80	; 128
    19e6:	5f e3       	ldi	r21, 0x3F	; 63
    19e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ec:	88 23       	and	r24, r24
    19ee:	44 f4       	brge	.+16     	; 0x1a00 <main+0x806>
		__ticks = 1;
    19f0:	fe 01       	movw	r30, r28
    19f2:	e5 5b       	subi	r30, 0xB5	; 181
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	91 83       	std	Z+1, r25	; 0x01
    19fc:	80 83       	st	Z, r24
    19fe:	64 c0       	rjmp	.+200    	; 0x1ac8 <main+0x8ce>
	else if (__tmp > 65535)
    1a00:	fe 01       	movw	r30, r28
    1a02:	e3 5b       	subi	r30, 0xB3	; 179
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	60 81       	ld	r22, Z
    1a08:	71 81       	ldd	r23, Z+1	; 0x01
    1a0a:	82 81       	ldd	r24, Z+2	; 0x02
    1a0c:	93 81       	ldd	r25, Z+3	; 0x03
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	3f ef       	ldi	r19, 0xFF	; 255
    1a12:	4f e7       	ldi	r20, 0x7F	; 127
    1a14:	57 e4       	ldi	r21, 0x47	; 71
    1a16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a1a:	18 16       	cp	r1, r24
    1a1c:	0c f0       	brlt	.+2      	; 0x1a20 <main+0x826>
    1a1e:	43 c0       	rjmp	.+134    	; 0x1aa6 <main+0x8ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a20:	fe 01       	movw	r30, r28
    1a22:	ef 5a       	subi	r30, 0xAF	; 175
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	60 81       	ld	r22, Z
    1a28:	71 81       	ldd	r23, Z+1	; 0x01
    1a2a:	82 81       	ldd	r24, Z+2	; 0x02
    1a2c:	93 81       	ldd	r25, Z+3	; 0x03
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e2       	ldi	r20, 0x20	; 32
    1a34:	51 e4       	ldi	r21, 0x41	; 65
    1a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	8e 01       	movw	r16, r28
    1a40:	05 5b       	subi	r16, 0xB5	; 181
    1a42:	1f 4f       	sbci	r17, 0xFF	; 255
    1a44:	bc 01       	movw	r22, r24
    1a46:	cd 01       	movw	r24, r26
    1a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	f8 01       	movw	r30, r16
    1a52:	91 83       	std	Z+1, r25	; 0x01
    1a54:	80 83       	st	Z, r24
    1a56:	1f c0       	rjmp	.+62     	; 0x1a96 <main+0x89c>
    1a58:	fe 01       	movw	r30, r28
    1a5a:	e7 5b       	subi	r30, 0xB7	; 183
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	89 e1       	ldi	r24, 0x19	; 25
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	80 83       	st	Z, r24
    1a66:	fe 01       	movw	r30, r28
    1a68:	e7 5b       	subi	r30, 0xB7	; 183
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	80 81       	ld	r24, Z
    1a6e:	91 81       	ldd	r25, Z+1	; 0x01
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <main+0x876>
    1a74:	fe 01       	movw	r30, r28
    1a76:	e7 5b       	subi	r30, 0xB7	; 183
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	91 83       	std	Z+1, r25	; 0x01
    1a7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7e:	de 01       	movw	r26, r28
    1a80:	a5 5b       	subi	r26, 0xB5	; 181
    1a82:	bf 4f       	sbci	r27, 0xFF	; 255
    1a84:	fe 01       	movw	r30, r28
    1a86:	e5 5b       	subi	r30, 0xB5	; 181
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	80 81       	ld	r24, Z
    1a8c:	91 81       	ldd	r25, Z+1	; 0x01
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	11 96       	adiw	r26, 0x01	; 1
    1a92:	9c 93       	st	X, r25
    1a94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a96:	fe 01       	movw	r30, r28
    1a98:	e5 5b       	subi	r30, 0xB5	; 181
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	80 81       	ld	r24, Z
    1a9e:	91 81       	ldd	r25, Z+1	; 0x01
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	d1 f6       	brne	.-76     	; 0x1a58 <main+0x85e>
    1aa4:	28 c0       	rjmp	.+80     	; 0x1af6 <main+0x8fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa6:	8e 01       	movw	r16, r28
    1aa8:	05 5b       	subi	r16, 0xB5	; 181
    1aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1aac:	fe 01       	movw	r30, r28
    1aae:	e3 5b       	subi	r30, 0xB3	; 179
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	60 81       	ld	r22, Z
    1ab4:	71 81       	ldd	r23, Z+1	; 0x01
    1ab6:	82 81       	ldd	r24, Z+2	; 0x02
    1ab8:	93 81       	ldd	r25, Z+3	; 0x03
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	91 83       	std	Z+1, r25	; 0x01
    1ac6:	80 83       	st	Z, r24
    1ac8:	de 01       	movw	r26, r28
    1aca:	a9 5b       	subi	r26, 0xB9	; 185
    1acc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ace:	fe 01       	movw	r30, r28
    1ad0:	e5 5b       	subi	r30, 0xB5	; 181
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	80 81       	ld	r24, Z
    1ad6:	91 81       	ldd	r25, Z+1	; 0x01
    1ad8:	11 96       	adiw	r26, 0x01	; 1
    1ada:	9c 93       	st	X, r25
    1adc:	8e 93       	st	-X, r24
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e9 5b       	subi	r30, 0xB9	; 185
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	80 81       	ld	r24, Z
    1ae6:	91 81       	ldd	r25, Z+1	; 0x01
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <main+0x8ee>
    1aec:	fe 01       	movw	r30, r28
    1aee:	e9 5b       	subi	r30, 0xB9	; 185
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	91 83       	std	Z+1, r25	; 0x01
    1af4:	80 83       	st	Z, r24
			_delay_ms(50);
			if(!isLocked)
    1af6:	80 91 70 00 	lds	r24, 0x0070
    1afa:	88 23       	and	r24, r24
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <main+0x906>
    1afe:	74 cc       	rjmp	.-1816   	; 0x13e8 <main+0x1ee>
			{
				lockDoor();
    1b00:	0e 94 53 11 	call	0x22a6	; 0x22a6 <lockDoor>
				Send_Byte(TRUE);
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	0e 94 db 05 	call	0xbb6	; 0xbb6 <Send_Byte>
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	ed 5b       	subi	r30, 0xBD	; 189
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a8 e4       	ldi	r26, 0x48	; 72
    1b16:	b2 e4       	ldi	r27, 0x42	; 66
    1b18:	80 83       	st	Z, r24
    1b1a:	91 83       	std	Z+1, r25	; 0x01
    1b1c:	a2 83       	std	Z+2, r26	; 0x02
    1b1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b20:	8e 01       	movw	r16, r28
    1b22:	01 5c       	subi	r16, 0xC1	; 193
    1b24:	1f 4f       	sbci	r17, 0xFF	; 255
    1b26:	fe 01       	movw	r30, r28
    1b28:	ed 5b       	subi	r30, 0xBD	; 189
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	60 81       	ld	r22, Z
    1b2e:	71 81       	ldd	r23, Z+1	; 0x01
    1b30:	82 81       	ldd	r24, Z+2	; 0x02
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	4a e7       	ldi	r20, 0x7A	; 122
    1b3a:	53 e4       	ldi	r21, 0x43	; 67
    1b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	f8 01       	movw	r30, r16
    1b46:	80 83       	st	Z, r24
    1b48:	91 83       	std	Z+1, r25	; 0x01
    1b4a:	a2 83       	std	Z+2, r26	; 0x02
    1b4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b4e:	fe 01       	movw	r30, r28
    1b50:	ff 96       	adiw	r30, 0x3f	; 63
    1b52:	60 81       	ld	r22, Z
    1b54:	71 81       	ldd	r23, Z+1	; 0x01
    1b56:	82 81       	ldd	r24, Z+2	; 0x02
    1b58:	93 81       	ldd	r25, Z+3	; 0x03
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e8       	ldi	r20, 0x80	; 128
    1b60:	5f e3       	ldi	r21, 0x3F	; 63
    1b62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b66:	88 23       	and	r24, r24
    1b68:	2c f4       	brge	.+10     	; 0x1b74 <main+0x97a>
		__ticks = 1;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9e af       	std	Y+62, r25	; 0x3e
    1b70:	8d af       	std	Y+61, r24	; 0x3d
    1b72:	46 c0       	rjmp	.+140    	; 0x1c00 <main+0xa06>
	else if (__tmp > 65535)
    1b74:	fe 01       	movw	r30, r28
    1b76:	ff 96       	adiw	r30, 0x3f	; 63
    1b78:	60 81       	ld	r22, Z
    1b7a:	71 81       	ldd	r23, Z+1	; 0x01
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	93 81       	ldd	r25, Z+3	; 0x03
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	3f ef       	ldi	r19, 0xFF	; 255
    1b84:	4f e7       	ldi	r20, 0x7F	; 127
    1b86:	57 e4       	ldi	r21, 0x47	; 71
    1b88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8c:	18 16       	cp	r1, r24
    1b8e:	64 f5       	brge	.+88     	; 0x1be8 <main+0x9ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b90:	fe 01       	movw	r30, r28
    1b92:	ed 5b       	subi	r30, 0xBD	; 189
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	60 81       	ld	r22, Z
    1b98:	71 81       	ldd	r23, Z+1	; 0x01
    1b9a:	82 81       	ldd	r24, Z+2	; 0x02
    1b9c:	93 81       	ldd	r25, Z+3	; 0x03
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e2       	ldi	r20, 0x20	; 32
    1ba4:	51 e4       	ldi	r21, 0x41	; 65
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9e af       	std	Y+62, r25	; 0x3e
    1bbc:	8d af       	std	Y+61, r24	; 0x3d
    1bbe:	0f c0       	rjmp	.+30     	; 0x1bde <main+0x9e4>
    1bc0:	89 e1       	ldi	r24, 0x19	; 25
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9c af       	std	Y+60, r25	; 0x3c
    1bc6:	8b af       	std	Y+59, r24	; 0x3b
    1bc8:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bca:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <main+0x9d2>
    1bd0:	9c af       	std	Y+60, r25	; 0x3c
    1bd2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bd6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	9e af       	std	Y+62, r25	; 0x3e
    1bdc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bde:	8d ad       	ldd	r24, Y+61	; 0x3d
    1be0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	69 f7       	brne	.-38     	; 0x1bc0 <main+0x9c6>
    1be6:	00 cc       	rjmp	.-2048   	; 0x13e8 <main+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be8:	fe 01       	movw	r30, r28
    1bea:	ff 96       	adiw	r30, 0x3f	; 63
    1bec:	60 81       	ld	r22, Z
    1bee:	71 81       	ldd	r23, Z+1	; 0x01
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	9e af       	std	Y+62, r25	; 0x3e
    1bfe:	8d af       	std	Y+61, r24	; 0x3d
    1c00:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c02:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c04:	9a af       	std	Y+58, r25	; 0x3a
    1c06:	89 af       	std	Y+57, r24	; 0x39
    1c08:	89 ad       	ldd	r24, Y+57	; 0x39
    1c0a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <main+0xa12>
    1c10:	9a af       	std	Y+58, r25	; 0x3a
    1c12:	89 af       	std	Y+57, r24	; 0x39
    1c14:	e9 cb       	rjmp	.-2094   	; 0x13e8 <main+0x1ee>
				_delay_ms(50);
			}
			break;
		case UNLOCK_DOOR_COMMAND:
			Send_Byte(isLocked);
    1c16:	80 91 70 00 	lds	r24, 0x0070
    1c1a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <Send_Byte>
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	a8 e4       	ldi	r26, 0x48	; 72
    1c24:	b2 e4       	ldi	r27, 0x42	; 66
    1c26:	8d ab       	std	Y+53, r24	; 0x35
    1c28:	9e ab       	std	Y+54, r25	; 0x36
    1c2a:	af ab       	std	Y+55, r26	; 0x37
    1c2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c30:	7e a9       	ldd	r23, Y+54	; 0x36
    1c32:	8f a9       	ldd	r24, Y+55	; 0x37
    1c34:	98 ad       	ldd	r25, Y+56	; 0x38
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	4a e7       	ldi	r20, 0x7A	; 122
    1c3c:	53 e4       	ldi	r21, 0x43	; 67
    1c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	89 ab       	std	Y+49, r24	; 0x31
    1c48:	9a ab       	std	Y+50, r25	; 0x32
    1c4a:	ab ab       	std	Y+51, r26	; 0x33
    1c4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c50:	7a a9       	ldd	r23, Y+50	; 0x32
    1c52:	8b a9       	ldd	r24, Y+51	; 0x33
    1c54:	9c a9       	ldd	r25, Y+52	; 0x34
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e8       	ldi	r20, 0x80	; 128
    1c5c:	5f e3       	ldi	r21, 0x3F	; 63
    1c5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c62:	88 23       	and	r24, r24
    1c64:	2c f4       	brge	.+10     	; 0x1c70 <main+0xa76>
		__ticks = 1;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	98 ab       	std	Y+48, r25	; 0x30
    1c6c:	8f a7       	std	Y+47, r24	; 0x2f
    1c6e:	3f c0       	rjmp	.+126    	; 0x1cee <main+0xaf4>
	else if (__tmp > 65535)
    1c70:	69 a9       	ldd	r22, Y+49	; 0x31
    1c72:	7a a9       	ldd	r23, Y+50	; 0x32
    1c74:	8b a9       	ldd	r24, Y+51	; 0x33
    1c76:	9c a9       	ldd	r25, Y+52	; 0x34
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	3f ef       	ldi	r19, 0xFF	; 255
    1c7c:	4f e7       	ldi	r20, 0x7F	; 127
    1c7e:	57 e4       	ldi	r21, 0x47	; 71
    1c80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c84:	18 16       	cp	r1, r24
    1c86:	4c f5       	brge	.+82     	; 0x1cda <main+0xae0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c88:	6d a9       	ldd	r22, Y+53	; 0x35
    1c8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e2       	ldi	r20, 0x20	; 32
    1c96:	51 e4       	ldi	r21, 0x41	; 65
    1c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	bc 01       	movw	r22, r24
    1ca2:	cd 01       	movw	r24, r26
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	98 ab       	std	Y+48, r25	; 0x30
    1cae:	8f a7       	std	Y+47, r24	; 0x2f
    1cb0:	0f c0       	rjmp	.+30     	; 0x1cd0 <main+0xad6>
    1cb2:	89 e1       	ldi	r24, 0x19	; 25
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	9e a7       	std	Y+46, r25	; 0x2e
    1cb8:	8d a7       	std	Y+45, r24	; 0x2d
    1cba:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cbc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <main+0xac4>
    1cc2:	9e a7       	std	Y+46, r25	; 0x2e
    1cc4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cc8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	98 ab       	std	Y+48, r25	; 0x30
    1cce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	69 f7       	brne	.-38     	; 0x1cb2 <main+0xab8>
    1cd8:	14 c0       	rjmp	.+40     	; 0x1d02 <main+0xb08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cda:	69 a9       	ldd	r22, Y+49	; 0x31
    1cdc:	7a a9       	ldd	r23, Y+50	; 0x32
    1cde:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	98 ab       	std	Y+48, r25	; 0x30
    1cec:	8f a7       	std	Y+47, r24	; 0x2f
    1cee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf0:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf2:	9c a7       	std	Y+44, r25	; 0x2c
    1cf4:	8b a7       	std	Y+43, r24	; 0x2b
    1cf6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cf8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <main+0xb00>
    1cfe:	9c a7       	std	Y+44, r25	; 0x2c
    1d00:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(50);
			if(isLocked)
    1d02:	80 91 70 00 	lds	r24, 0x0070
    1d06:	88 23       	and	r24, r24
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <main+0xb12>
    1d0a:	6e cb       	rjmp	.-2340   	; 0x13e8 <main+0x1ee>
			{
				openDoor();
    1d0c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <openDoor>
				/* Acknowledgement */
				Send_Byte(TRUE);
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	0e 94 db 05 	call	0xbb6	; 0xbb6 <Send_Byte>
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	a8 e4       	ldi	r26, 0x48	; 72
    1d1c:	b2 e4       	ldi	r27, 0x42	; 66
    1d1e:	8f a3       	std	Y+39, r24	; 0x27
    1d20:	98 a7       	std	Y+40, r25	; 0x28
    1d22:	a9 a7       	std	Y+41, r26	; 0x29
    1d24:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d26:	6f a1       	ldd	r22, Y+39	; 0x27
    1d28:	78 a5       	ldd	r23, Y+40	; 0x28
    1d2a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	4a e7       	ldi	r20, 0x7A	; 122
    1d34:	53 e4       	ldi	r21, 0x43	; 67
    1d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	8b a3       	std	Y+35, r24	; 0x23
    1d40:	9c a3       	std	Y+36, r25	; 0x24
    1d42:	ad a3       	std	Y+37, r26	; 0x25
    1d44:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d46:	6b a1       	ldd	r22, Y+35	; 0x23
    1d48:	7c a1       	ldd	r23, Y+36	; 0x24
    1d4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e8       	ldi	r20, 0x80	; 128
    1d54:	5f e3       	ldi	r21, 0x3F	; 63
    1d56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d5a:	88 23       	and	r24, r24
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <main+0xb6e>
		__ticks = 1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9a a3       	std	Y+34, r25	; 0x22
    1d64:	89 a3       	std	Y+33, r24	; 0x21
    1d66:	3f c0       	rjmp	.+126    	; 0x1de6 <main+0xbec>
	else if (__tmp > 65535)
    1d68:	6b a1       	ldd	r22, Y+35	; 0x23
    1d6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	3f ef       	ldi	r19, 0xFF	; 255
    1d74:	4f e7       	ldi	r20, 0x7F	; 127
    1d76:	57 e4       	ldi	r21, 0x47	; 71
    1d78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d7c:	18 16       	cp	r1, r24
    1d7e:	4c f5       	brge	.+82     	; 0x1dd2 <main+0xbd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d80:	6f a1       	ldd	r22, Y+39	; 0x27
    1d82:	78 a5       	ldd	r23, Y+40	; 0x28
    1d84:	89 a5       	ldd	r24, Y+41	; 0x29
    1d86:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e2       	ldi	r20, 0x20	; 32
    1d8e:	51 e4       	ldi	r21, 0x41	; 65
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9a a3       	std	Y+34, r25	; 0x22
    1da6:	89 a3       	std	Y+33, r24	; 0x21
    1da8:	0f c0       	rjmp	.+30     	; 0x1dc8 <main+0xbce>
    1daa:	89 e1       	ldi	r24, 0x19	; 25
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	98 a3       	std	Y+32, r25	; 0x20
    1db0:	8f 8f       	std	Y+31, r24	; 0x1f
    1db2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1db4:	98 a1       	ldd	r25, Y+32	; 0x20
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <main+0xbbc>
    1dba:	98 a3       	std	Y+32, r25	; 0x20
    1dbc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc0:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	9a a3       	std	Y+34, r25	; 0x22
    1dc6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1dca:	9a a1       	ldd	r25, Y+34	; 0x22
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	69 f7       	brne	.-38     	; 0x1daa <main+0xbb0>
    1dd0:	0b cb       	rjmp	.-2538   	; 0x13e8 <main+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd2:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd4:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd6:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9a a3       	std	Y+34, r25	; 0x22
    1de4:	89 a3       	std	Y+33, r24	; 0x21
    1de6:	89 a1       	ldd	r24, Y+33	; 0x21
    1de8:	9a a1       	ldd	r25, Y+34	; 0x22
    1dea:	9e 8f       	std	Y+30, r25	; 0x1e
    1dec:	8d 8f       	std	Y+29, r24	; 0x1d
    1dee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <main+0xbf8>
    1df6:	9e 8f       	std	Y+30, r25	; 0x1e
    1df8:	8d 8f       	std	Y+29, r24	; 0x1d
    1dfa:	f6 ca       	rjmp	.-2580   	; 0x13e8 <main+0x1ee>
				_delay_ms(50);
				/*-----------------*/
			}
			break;
		case LOG_OUT_COMMAND:
			lockDoor();
    1dfc:	0e 94 53 11 	call	0x22a6	; 0x22a6 <lockDoor>
    1e00:	f3 ca       	rjmp	.-2586   	; 0x13e8 <main+0x1ee>
			break;
		case CHANGE_PASSWORD_COMMAND:
			Resieve_String(password);
    1e02:	80 91 6e 00 	lds	r24, 0x006E
    1e06:	90 91 6f 00 	lds	r25, 0x006F
    1e0a:	0e 94 19 07 	call	0xe32	; 0xe32 <Resieve_String>
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	a8 e4       	ldi	r26, 0x48	; 72
    1e14:	b2 e4       	ldi	r27, 0x42	; 66
    1e16:	89 8f       	std	Y+25, r24	; 0x19
    1e18:	9a 8f       	std	Y+26, r25	; 0x1a
    1e1a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	4a e7       	ldi	r20, 0x7A	; 122
    1e2c:	53 e4       	ldi	r21, 0x43	; 67
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	8d 8b       	std	Y+21, r24	; 0x15
    1e38:	9e 8b       	std	Y+22, r25	; 0x16
    1e3a:	af 8b       	std	Y+23, r26	; 0x17
    1e3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e40:	7e 89       	ldd	r23, Y+22	; 0x16
    1e42:	8f 89       	ldd	r24, Y+23	; 0x17
    1e44:	98 8d       	ldd	r25, Y+24	; 0x18
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e8       	ldi	r20, 0x80	; 128
    1e4c:	5f e3       	ldi	r21, 0x3F	; 63
    1e4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e52:	88 23       	and	r24, r24
    1e54:	2c f4       	brge	.+10     	; 0x1e60 <main+0xc66>
		__ticks = 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9c 8b       	std	Y+20, r25	; 0x14
    1e5c:	8b 8b       	std	Y+19, r24	; 0x13
    1e5e:	3f c0       	rjmp	.+126    	; 0x1ede <main+0xce4>
	else if (__tmp > 65535)
    1e60:	6d 89       	ldd	r22, Y+21	; 0x15
    1e62:	7e 89       	ldd	r23, Y+22	; 0x16
    1e64:	8f 89       	ldd	r24, Y+23	; 0x17
    1e66:	98 8d       	ldd	r25, Y+24	; 0x18
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	3f ef       	ldi	r19, 0xFF	; 255
    1e6c:	4f e7       	ldi	r20, 0x7F	; 127
    1e6e:	57 e4       	ldi	r21, 0x47	; 71
    1e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e74:	18 16       	cp	r1, r24
    1e76:	4c f5       	brge	.+82     	; 0x1eca <main+0xcd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e78:	69 8d       	ldd	r22, Y+25	; 0x19
    1e7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e2       	ldi	r20, 0x20	; 32
    1e86:	51 e4       	ldi	r21, 0x41	; 65
    1e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9c 8b       	std	Y+20, r25	; 0x14
    1e9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ea0:	0f c0       	rjmp	.+30     	; 0x1ec0 <main+0xcc6>
    1ea2:	89 e1       	ldi	r24, 0x19	; 25
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	9a 8b       	std	Y+18, r25	; 0x12
    1ea8:	89 8b       	std	Y+17, r24	; 0x11
    1eaa:	89 89       	ldd	r24, Y+17	; 0x11
    1eac:	9a 89       	ldd	r25, Y+18	; 0x12
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <main+0xcb4>
    1eb2:	9a 8b       	std	Y+18, r25	; 0x12
    1eb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	9c 8b       	std	Y+20, r25	; 0x14
    1ebe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	69 f7       	brne	.-38     	; 0x1ea2 <main+0xca8>
    1ec8:	14 c0       	rjmp	.+40     	; 0x1ef2 <main+0xcf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eca:	6d 89       	ldd	r22, Y+21	; 0x15
    1ecc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ece:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9c 8b       	std	Y+20, r25	; 0x14
    1edc:	8b 8b       	std	Y+19, r24	; 0x13
    1ede:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee2:	98 8b       	std	Y+16, r25	; 0x10
    1ee4:	8f 87       	std	Y+15, r24	; 0x0f
    1ee6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee8:	98 89       	ldd	r25, Y+16	; 0x10
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <main+0xcf0>
    1eee:	98 8b       	std	Y+16, r25	; 0x10
    1ef0:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(50);
			setPassword(password);
    1ef2:	80 91 6e 00 	lds	r24, 0x006E
    1ef6:	90 91 6f 00 	lds	r25, 0x006F
    1efa:	0e 94 0f 10 	call	0x201e	; 0x201e <setPassword>
			/* Acknowledgement */
			Send_Byte(TRUE);
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	0e 94 db 05 	call	0xbb6	; 0xbb6 <Send_Byte>
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	aa e7       	ldi	r26, 0x7A	; 122
    1f0a:	b4 e4       	ldi	r27, 0x44	; 68
    1f0c:	8b 87       	std	Y+11, r24	; 0x0b
    1f0e:	9c 87       	std	Y+12, r25	; 0x0c
    1f10:	ad 87       	std	Y+13, r26	; 0x0d
    1f12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	4a e7       	ldi	r20, 0x7A	; 122
    1f22:	53 e4       	ldi	r21, 0x43	; 67
    1f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	8f 83       	std	Y+7, r24	; 0x07
    1f2e:	98 87       	std	Y+8, r25	; 0x08
    1f30:	a9 87       	std	Y+9, r26	; 0x09
    1f32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f34:	6f 81       	ldd	r22, Y+7	; 0x07
    1f36:	78 85       	ldd	r23, Y+8	; 0x08
    1f38:	89 85       	ldd	r24, Y+9	; 0x09
    1f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	40 e8       	ldi	r20, 0x80	; 128
    1f42:	5f e3       	ldi	r21, 0x3F	; 63
    1f44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f48:	88 23       	and	r24, r24
    1f4a:	2c f4       	brge	.+10     	; 0x1f56 <main+0xd5c>
		__ticks = 1;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	9e 83       	std	Y+6, r25	; 0x06
    1f52:	8d 83       	std	Y+5, r24	; 0x05
    1f54:	3f c0       	rjmp	.+126    	; 0x1fd4 <main+0xdda>
	else if (__tmp > 65535)
    1f56:	6f 81       	ldd	r22, Y+7	; 0x07
    1f58:	78 85       	ldd	r23, Y+8	; 0x08
    1f5a:	89 85       	ldd	r24, Y+9	; 0x09
    1f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	3f ef       	ldi	r19, 0xFF	; 255
    1f62:	4f e7       	ldi	r20, 0x7F	; 127
    1f64:	57 e4       	ldi	r21, 0x47	; 71
    1f66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f6a:	18 16       	cp	r1, r24
    1f6c:	4c f5       	brge	.+82     	; 0x1fc0 <main+0xdc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e2       	ldi	r20, 0x20	; 32
    1f7c:	51 e4       	ldi	r21, 0x41	; 65
    1f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	bc 01       	movw	r22, r24
    1f88:	cd 01       	movw	r24, r26
    1f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	9e 83       	std	Y+6, r25	; 0x06
    1f94:	8d 83       	std	Y+5, r24	; 0x05
    1f96:	0f c0       	rjmp	.+30     	; 0x1fb6 <main+0xdbc>
    1f98:	89 e1       	ldi	r24, 0x19	; 25
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	9c 83       	std	Y+4, r25	; 0x04
    1f9e:	8b 83       	std	Y+3, r24	; 0x03
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <main+0xdaa>
    1fa8:	9c 83       	std	Y+4, r25	; 0x04
    1faa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fac:	8d 81       	ldd	r24, Y+5	; 0x05
    1fae:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fba:	00 97       	sbiw	r24, 0x00	; 0
    1fbc:	69 f7       	brne	.-38     	; 0x1f98 <main+0xd9e>
    1fbe:	14 c0       	rjmp	.+40     	; 0x1fe8 <main+0xdee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc2:	78 85       	ldd	r23, Y+8	; 0x08
    1fc4:	89 85       	ldd	r24, Y+9	; 0x09
    1fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	9e 83       	std	Y+6, r25	; 0x06
    1fd2:	8d 83       	std	Y+5, r24	; 0x05
    1fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd8:	9a 83       	std	Y+2, r25	; 0x02
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	f1 f7       	brne	.-4      	; 0x1fe0 <main+0xde6>
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			/*-----------------*/
			lockDoor();
    1fe8:	0e 94 53 11 	call	0x22a6	; 0x22a6 <lockDoor>
    1fec:	fd c9       	rjmp	.-3078   	; 0x13e8 <main+0x1ee>
			break;
		case WARNING_COMMAND:
			lockDoor();
    1fee:	0e 94 53 11 	call	0x22a6	; 0x22a6 <lockDoor>
			theif = TRUE;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	80 93 72 00 	sts	0x0072, r24
    1ff8:	f7 c9       	rjmp	.-3090   	; 0x13e8 <main+0x1ee>

00001ffa <isFirstTime>:
/*-------------------------------------------------*/

	}
}
uint8 isFirstTime()
{
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	0f 92       	push	r0
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
	uint8 firstTimeFlag;
	EEPROM_readByte(FIRST_TIME_FLAG_ADDRESS, &firstTimeFlag);
    2004:	80 e3       	ldi	r24, 0x30	; 48
    2006:	93 e0       	ldi	r25, 0x03	; 3
    2008:	9e 01       	movw	r18, r28
    200a:	2f 5f       	subi	r18, 0xFF	; 255
    200c:	3f 4f       	sbci	r19, 0xFF	; 255
    200e:	b9 01       	movw	r22, r18
    2010:	0e 94 20 08 	call	0x1040	; 0x1040 <EEPROM_readByte>
	return firstTimeFlag;
    2014:	89 81       	ldd	r24, Y+1	; 0x01
}
    2016:	0f 90       	pop	r0
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <setPassword>:
void setPassword(uint8* password)
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	61 97       	sbiw	r28, 0x11	; 17
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	99 8b       	std	Y+17, r25	; 0x11
    2034:	88 8b       	std	Y+16, r24	; 0x10
	for(uint8 i=0;i<PASSWORD_LENGTH;i++)
    2036:	1f 86       	std	Y+15, r1	; 0x0f
    2038:	88 c0       	rjmp	.+272    	; 0x214a <setPassword+0x12c>
	{
		EEPROM_writeByte((PASSWORD_START_ADDRESS + i), password[i]);
    203a:	8f 85       	ldd	r24, Y+15	; 0x0f
    203c:	88 2f       	mov	r24, r24
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	ac 01       	movw	r20, r24
    2042:	40 50       	subi	r20, 0x00	; 0
    2044:	5d 4f       	sbci	r21, 0xFD	; 253
    2046:	8f 85       	ldd	r24, Y+15	; 0x0f
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	88 89       	ldd	r24, Y+16	; 0x10
    204e:	99 89       	ldd	r25, Y+17	; 0x11
    2050:	fc 01       	movw	r30, r24
    2052:	e2 0f       	add	r30, r18
    2054:	f3 1f       	adc	r31, r19
    2056:	20 81       	ld	r18, Z
    2058:	ca 01       	movw	r24, r20
    205a:	62 2f       	mov	r22, r18
    205c:	0e 94 df 07 	call	0xfbe	; 0xfbe <EEPROM_writeByte>
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	a0 e2       	ldi	r26, 0x20	; 32
    2066:	b1 e4       	ldi	r27, 0x41	; 65
    2068:	8b 87       	std	Y+11, r24	; 0x0b
    206a:	9c 87       	std	Y+12, r25	; 0x0c
    206c:	ad 87       	std	Y+13, r26	; 0x0d
    206e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2070:	6b 85       	ldd	r22, Y+11	; 0x0b
    2072:	7c 85       	ldd	r23, Y+12	; 0x0c
    2074:	8d 85       	ldd	r24, Y+13	; 0x0d
    2076:	9e 85       	ldd	r25, Y+14	; 0x0e
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	4a e7       	ldi	r20, 0x7A	; 122
    207e:	53 e4       	ldi	r21, 0x43	; 67
    2080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	8f 83       	std	Y+7, r24	; 0x07
    208a:	98 87       	std	Y+8, r25	; 0x08
    208c:	a9 87       	std	Y+9, r26	; 0x09
    208e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2090:	6f 81       	ldd	r22, Y+7	; 0x07
    2092:	78 85       	ldd	r23, Y+8	; 0x08
    2094:	89 85       	ldd	r24, Y+9	; 0x09
    2096:	9a 85       	ldd	r25, Y+10	; 0x0a
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e8       	ldi	r20, 0x80	; 128
    209e:	5f e3       	ldi	r21, 0x3F	; 63
    20a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a4:	88 23       	and	r24, r24
    20a6:	2c f4       	brge	.+10     	; 0x20b2 <setPassword+0x94>
		__ticks = 1;
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	9e 83       	std	Y+6, r25	; 0x06
    20ae:	8d 83       	std	Y+5, r24	; 0x05
    20b0:	3f c0       	rjmp	.+126    	; 0x2130 <setPassword+0x112>
	else if (__tmp > 65535)
    20b2:	6f 81       	ldd	r22, Y+7	; 0x07
    20b4:	78 85       	ldd	r23, Y+8	; 0x08
    20b6:	89 85       	ldd	r24, Y+9	; 0x09
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	3f ef       	ldi	r19, 0xFF	; 255
    20be:	4f e7       	ldi	r20, 0x7F	; 127
    20c0:	57 e4       	ldi	r21, 0x47	; 71
    20c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c6:	18 16       	cp	r1, r24
    20c8:	4c f5       	brge	.+82     	; 0x211c <setPassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    20cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e2       	ldi	r20, 0x20	; 32
    20d8:	51 e4       	ldi	r21, 0x41	; 65
    20da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	bc 01       	movw	r22, r24
    20e4:	cd 01       	movw	r24, r26
    20e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	9e 83       	std	Y+6, r25	; 0x06
    20f0:	8d 83       	std	Y+5, r24	; 0x05
    20f2:	0f c0       	rjmp	.+30     	; 0x2112 <setPassword+0xf4>
    20f4:	89 e1       	ldi	r24, 0x19	; 25
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9c 83       	std	Y+4, r25	; 0x04
    20fa:	8b 83       	std	Y+3, r24	; 0x03
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <setPassword+0xe2>
    2104:	9c 83       	std	Y+4, r25	; 0x04
    2106:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2108:	8d 81       	ldd	r24, Y+5	; 0x05
    210a:	9e 81       	ldd	r25, Y+6	; 0x06
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	9e 83       	std	Y+6, r25	; 0x06
    2110:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2112:	8d 81       	ldd	r24, Y+5	; 0x05
    2114:	9e 81       	ldd	r25, Y+6	; 0x06
    2116:	00 97       	sbiw	r24, 0x00	; 0
    2118:	69 f7       	brne	.-38     	; 0x20f4 <setPassword+0xd6>
    211a:	14 c0       	rjmp	.+40     	; 0x2144 <setPassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211c:	6f 81       	ldd	r22, Y+7	; 0x07
    211e:	78 85       	ldd	r23, Y+8	; 0x08
    2120:	89 85       	ldd	r24, Y+9	; 0x09
    2122:	9a 85       	ldd	r25, Y+10	; 0x0a
    2124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	9e 83       	std	Y+6, r25	; 0x06
    212e:	8d 83       	std	Y+5, r24	; 0x05
    2130:	8d 81       	ldd	r24, Y+5	; 0x05
    2132:	9e 81       	ldd	r25, Y+6	; 0x06
    2134:	9a 83       	std	Y+2, r25	; 0x02
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	9a 81       	ldd	r25, Y+2	; 0x02
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <setPassword+0x11e>
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	89 83       	std	Y+1, r24	; 0x01
	EEPROM_readByte(FIRST_TIME_FLAG_ADDRESS, &firstTimeFlag);
	return firstTimeFlag;
}
void setPassword(uint8* password)
{
	for(uint8 i=0;i<PASSWORD_LENGTH;i++)
    2144:	8f 85       	ldd	r24, Y+15	; 0x0f
    2146:	8f 5f       	subi	r24, 0xFF	; 255
    2148:	8f 87       	std	Y+15, r24	; 0x0f
    214a:	8f 85       	ldd	r24, Y+15	; 0x0f
    214c:	85 30       	cpi	r24, 0x05	; 5
    214e:	08 f4       	brcc	.+2      	; 0x2152 <setPassword+0x134>
    2150:	74 cf       	rjmp	.-280    	; 0x203a <setPassword+0x1c>
	{
		EEPROM_writeByte((PASSWORD_START_ADDRESS + i), password[i]);
		_delay_ms(10);
	}

}
    2152:	61 96       	adiw	r28, 0x11	; 17
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <fetchPassword>:
void fetchPassword()
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	2f 97       	sbiw	r28, 0x0f	; 15
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
	for(uint8 i=0;i<PASSWORD_LENGTH;i++)
    2178:	1f 86       	std	Y+15, r1	; 0x0f
    217a:	88 c0       	rjmp	.+272    	; 0x228c <fetchPassword+0x128>
		{
			EEPROM_readByte((PASSWORD_START_ADDRESS + i), password+i);
    217c:	8f 85       	ldd	r24, Y+15	; 0x0f
    217e:	88 2f       	mov	r24, r24
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	ac 01       	movw	r20, r24
    2184:	40 50       	subi	r20, 0x00	; 0
    2186:	5d 4f       	sbci	r21, 0xFD	; 253
    2188:	20 91 6e 00 	lds	r18, 0x006E
    218c:	30 91 6f 00 	lds	r19, 0x006F
    2190:	8f 85       	ldd	r24, Y+15	; 0x0f
    2192:	88 2f       	mov	r24, r24
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	28 0f       	add	r18, r24
    2198:	39 1f       	adc	r19, r25
    219a:	ca 01       	movw	r24, r20
    219c:	b9 01       	movw	r22, r18
    219e:	0e 94 20 08 	call	0x1040	; 0x1040 <EEPROM_readByte>
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	a0 e2       	ldi	r26, 0x20	; 32
    21a8:	b1 e4       	ldi	r27, 0x41	; 65
    21aa:	8b 87       	std	Y+11, r24	; 0x0b
    21ac:	9c 87       	std	Y+12, r25	; 0x0c
    21ae:	ad 87       	std	Y+13, r26	; 0x0d
    21b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a e7       	ldi	r20, 0x7A	; 122
    21c0:	53 e4       	ldi	r21, 0x43	; 67
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	8f 83       	std	Y+7, r24	; 0x07
    21cc:	98 87       	std	Y+8, r25	; 0x08
    21ce:	a9 87       	std	Y+9, r26	; 0x09
    21d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21d2:	6f 81       	ldd	r22, Y+7	; 0x07
    21d4:	78 85       	ldd	r23, Y+8	; 0x08
    21d6:	89 85       	ldd	r24, Y+9	; 0x09
    21d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e8       	ldi	r20, 0x80	; 128
    21e0:	5f e3       	ldi	r21, 0x3F	; 63
    21e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e6:	88 23       	and	r24, r24
    21e8:	2c f4       	brge	.+10     	; 0x21f4 <fetchPassword+0x90>
		__ticks = 1;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	9e 83       	std	Y+6, r25	; 0x06
    21f0:	8d 83       	std	Y+5, r24	; 0x05
    21f2:	3f c0       	rjmp	.+126    	; 0x2272 <fetchPassword+0x10e>
	else if (__tmp > 65535)
    21f4:	6f 81       	ldd	r22, Y+7	; 0x07
    21f6:	78 85       	ldd	r23, Y+8	; 0x08
    21f8:	89 85       	ldd	r24, Y+9	; 0x09
    21fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	4c f5       	brge	.+82     	; 0x225e <fetchPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220c:	6b 85       	ldd	r22, Y+11	; 0x0b
    220e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2210:	8d 85       	ldd	r24, Y+13	; 0x0d
    2212:	9e 85       	ldd	r25, Y+14	; 0x0e
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e2       	ldi	r20, 0x20	; 32
    221a:	51 e4       	ldi	r21, 0x41	; 65
    221c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9e 83       	std	Y+6, r25	; 0x06
    2232:	8d 83       	std	Y+5, r24	; 0x05
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <fetchPassword+0xf0>
    2236:	89 e1       	ldi	r24, 0x19	; 25
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9c 83       	std	Y+4, r25	; 0x04
    223c:	8b 83       	std	Y+3, r24	; 0x03
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	9c 81       	ldd	r25, Y+4	; 0x04
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <fetchPassword+0xde>
    2246:	9c 83       	std	Y+4, r25	; 0x04
    2248:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224a:	8d 81       	ldd	r24, Y+5	; 0x05
    224c:	9e 81       	ldd	r25, Y+6	; 0x06
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	9e 83       	std	Y+6, r25	; 0x06
    2252:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	69 f7       	brne	.-38     	; 0x2236 <fetchPassword+0xd2>
    225c:	14 c0       	rjmp	.+40     	; 0x2286 <fetchPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	6f 81       	ldd	r22, Y+7	; 0x07
    2260:	78 85       	ldd	r23, Y+8	; 0x08
    2262:	89 85       	ldd	r24, Y+9	; 0x09
    2264:	9a 85       	ldd	r25, Y+10	; 0x0a
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9e 83       	std	Y+6, r25	; 0x06
    2270:	8d 83       	std	Y+5, r24	; 0x05
    2272:	8d 81       	ldd	r24, Y+5	; 0x05
    2274:	9e 81       	ldd	r25, Y+6	; 0x06
    2276:	9a 83       	std	Y+2, r25	; 0x02
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	9a 81       	ldd	r25, Y+2	; 0x02
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <fetchPassword+0x11a>
    2282:	9a 83       	std	Y+2, r25	; 0x02
    2284:	89 83       	std	Y+1, r24	; 0x01
	}

}
void fetchPassword()
{
	for(uint8 i=0;i<PASSWORD_LENGTH;i++)
    2286:	8f 85       	ldd	r24, Y+15	; 0x0f
    2288:	8f 5f       	subi	r24, 0xFF	; 255
    228a:	8f 87       	std	Y+15, r24	; 0x0f
    228c:	8f 85       	ldd	r24, Y+15	; 0x0f
    228e:	85 30       	cpi	r24, 0x05	; 5
    2290:	08 f4       	brcc	.+2      	; 0x2294 <fetchPassword+0x130>
    2292:	74 cf       	rjmp	.-280    	; 0x217c <fetchPassword+0x18>
		{
			EEPROM_readByte((PASSWORD_START_ADDRESS + i), password+i);
			_delay_ms(10);
		}
}
    2294:	2f 96       	adiw	r28, 0x0f	; 15
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	08 95       	ret

000022a6 <lockDoor>:
void lockDoor()
{
    22a6:	df 93       	push	r29
    22a8:	cf 93       	push	r28
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
	PWM_TIMER_INIT(LOCK_DOOR_ANGLE);
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	80 ea       	ldi	r24, 0xA0	; 160
    22b4:	90 e4       	ldi	r25, 0x40	; 64
    22b6:	0e 94 72 11 	call	0x22e4	; 0x22e4 <PWM_TIMER_INIT>
	isLocked = TRUE;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	80 93 70 00 	sts	0x0070, r24
}
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <openDoor>:
void openDoor()
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
	PWM_TIMER_INIT(UNLOCK_DOOR_ANGLE);
    22ce:	60 e0       	ldi	r22, 0x00	; 0
    22d0:	70 e0       	ldi	r23, 0x00	; 0
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	0e 94 72 11 	call	0x22e4	; 0x22e4 <PWM_TIMER_INIT>
	isLocked = FALSE;
    22da:	10 92 70 00 	sts	0x0070, r1
}
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <PWM_TIMER_INIT>:
void PWM_TIMER_INIT(float duty_Cycle)
{
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <PWM_TIMER_INIT+0x6>
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <PWM_TIMER_INIT+0x8>
    22ec:	0f 92       	push	r0
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	6a 83       	std	Y+2, r22	; 0x02
    22f4:	7b 83       	std	Y+3, r23	; 0x03
    22f6:	8c 83       	std	Y+4, r24	; 0x04
    22f8:	9d 83       	std	Y+5, r25	; 0x05
	unsigned char compare_Val = (unsigned char) duty_Cycle * 255 / 100;
    22fa:	6a 81       	ldd	r22, Y+2	; 0x02
    22fc:	7b 81       	ldd	r23, Y+3	; 0x03
    22fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2300:	9d 81       	ldd	r25, Y+5	; 0x05
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	48 2f       	mov	r20, r24
    230c:	50 e0       	ldi	r21, 0x00	; 0
    230e:	ca 01       	movw	r24, r20
    2310:	9c 01       	movw	r18, r24
    2312:	22 0f       	add	r18, r18
    2314:	33 1f       	adc	r19, r19
    2316:	c9 01       	movw	r24, r18
    2318:	96 95       	lsr	r25
    231a:	98 2f       	mov	r25, r24
    231c:	88 27       	eor	r24, r24
    231e:	97 95       	ror	r25
    2320:	87 95       	ror	r24
    2322:	82 1b       	sub	r24, r18
    2324:	93 0b       	sbc	r25, r19
    2326:	84 0f       	add	r24, r20
    2328:	95 1f       	adc	r25, r21
    232a:	24 e6       	ldi	r18, 0x64	; 100
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	b9 01       	movw	r22, r18
    2330:	0e 94 b9 11 	call	0x2372	; 0x2372 <__divmodhi4>
    2334:	cb 01       	movw	r24, r22
    2336:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
    2338:	e2 e5       	ldi	r30, 0x52	; 82
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	10 82       	st	Z, r1
	OCR0 = compare_Val;
    233e:	ec e5       	ldi	r30, 0x5C	; 92
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	80 83       	st	Z, r24
	DDRB |= (1 << PB3);
    2346:	a7 e3       	ldi	r26, 0x37	; 55
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e7 e3       	ldi	r30, 0x37	; 55
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	88 60       	ori	r24, 0x08	; 8
    2352:	8c 93       	st	X, r24
	TCCR0 |= (1 << WGM01) | (1 << WGM00) | (1 << COM01) | (1 << CS02)
    2354:	a3 e5       	ldi	r26, 0x53	; 83
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e3 e5       	ldi	r30, 0x53	; 83
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	8d 66       	ori	r24, 0x6D	; 109
    2360:	8c 93       	st	X, r24
			| (1 << CS00);   //PRESCALER =1024
}
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <__divmodhi4>:
    2372:	97 fb       	bst	r25, 7
    2374:	09 2e       	mov	r0, r25
    2376:	07 26       	eor	r0, r23
    2378:	0a d0       	rcall	.+20     	; 0x238e <__divmodhi4_neg1>
    237a:	77 fd       	sbrc	r23, 7
    237c:	04 d0       	rcall	.+8      	; 0x2386 <__divmodhi4_neg2>
    237e:	0c d0       	rcall	.+24     	; 0x2398 <__udivmodhi4>
    2380:	06 d0       	rcall	.+12     	; 0x238e <__divmodhi4_neg1>
    2382:	00 20       	and	r0, r0
    2384:	1a f4       	brpl	.+6      	; 0x238c <__divmodhi4_exit>

00002386 <__divmodhi4_neg2>:
    2386:	70 95       	com	r23
    2388:	61 95       	neg	r22
    238a:	7f 4f       	sbci	r23, 0xFF	; 255

0000238c <__divmodhi4_exit>:
    238c:	08 95       	ret

0000238e <__divmodhi4_neg1>:
    238e:	f6 f7       	brtc	.-4      	; 0x238c <__divmodhi4_exit>
    2390:	90 95       	com	r25
    2392:	81 95       	neg	r24
    2394:	9f 4f       	sbci	r25, 0xFF	; 255
    2396:	08 95       	ret

00002398 <__udivmodhi4>:
    2398:	aa 1b       	sub	r26, r26
    239a:	bb 1b       	sub	r27, r27
    239c:	51 e1       	ldi	r21, 0x11	; 17
    239e:	07 c0       	rjmp	.+14     	; 0x23ae <__udivmodhi4_ep>

000023a0 <__udivmodhi4_loop>:
    23a0:	aa 1f       	adc	r26, r26
    23a2:	bb 1f       	adc	r27, r27
    23a4:	a6 17       	cp	r26, r22
    23a6:	b7 07       	cpc	r27, r23
    23a8:	10 f0       	brcs	.+4      	; 0x23ae <__udivmodhi4_ep>
    23aa:	a6 1b       	sub	r26, r22
    23ac:	b7 0b       	sbc	r27, r23

000023ae <__udivmodhi4_ep>:
    23ae:	88 1f       	adc	r24, r24
    23b0:	99 1f       	adc	r25, r25
    23b2:	5a 95       	dec	r21
    23b4:	a9 f7       	brne	.-22     	; 0x23a0 <__udivmodhi4_loop>
    23b6:	80 95       	com	r24
    23b8:	90 95       	com	r25
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	08 95       	ret

000023c0 <__prologue_saves__>:
    23c0:	2f 92       	push	r2
    23c2:	3f 92       	push	r3
    23c4:	4f 92       	push	r4
    23c6:	5f 92       	push	r5
    23c8:	6f 92       	push	r6
    23ca:	7f 92       	push	r7
    23cc:	8f 92       	push	r8
    23ce:	9f 92       	push	r9
    23d0:	af 92       	push	r10
    23d2:	bf 92       	push	r11
    23d4:	cf 92       	push	r12
    23d6:	df 92       	push	r13
    23d8:	ef 92       	push	r14
    23da:	ff 92       	push	r15
    23dc:	0f 93       	push	r16
    23de:	1f 93       	push	r17
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	ca 1b       	sub	r28, r26
    23ea:	db 0b       	sbc	r29, r27
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	09 94       	ijmp

000023f8 <__epilogue_restores__>:
    23f8:	2a 88       	ldd	r2, Y+18	; 0x12
    23fa:	39 88       	ldd	r3, Y+17	; 0x11
    23fc:	48 88       	ldd	r4, Y+16	; 0x10
    23fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2400:	6e 84       	ldd	r6, Y+14	; 0x0e
    2402:	7d 84       	ldd	r7, Y+13	; 0x0d
    2404:	8c 84       	ldd	r8, Y+12	; 0x0c
    2406:	9b 84       	ldd	r9, Y+11	; 0x0b
    2408:	aa 84       	ldd	r10, Y+10	; 0x0a
    240a:	b9 84       	ldd	r11, Y+9	; 0x09
    240c:	c8 84       	ldd	r12, Y+8	; 0x08
    240e:	df 80       	ldd	r13, Y+7	; 0x07
    2410:	ee 80       	ldd	r14, Y+6	; 0x06
    2412:	fd 80       	ldd	r15, Y+5	; 0x05
    2414:	0c 81       	ldd	r16, Y+4	; 0x04
    2416:	1b 81       	ldd	r17, Y+3	; 0x03
    2418:	aa 81       	ldd	r26, Y+2	; 0x02
    241a:	b9 81       	ldd	r27, Y+1	; 0x01
    241c:	ce 0f       	add	r28, r30
    241e:	d1 1d       	adc	r29, r1
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	ed 01       	movw	r28, r26
    242c:	08 95       	ret

0000242e <_exit>:
    242e:	f8 94       	cli

00002430 <__stop_program>:
    2430:	ff cf       	rjmp	.-2      	; 0x2430 <__stop_program>
